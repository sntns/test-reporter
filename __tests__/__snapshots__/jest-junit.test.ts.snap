// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`jest-junit tests report from ./reports/jest test results matches snapshot 1`] = `
TestRunResult {
  "path": "fixtures/jest-junit.xml",
  "suites": Array [
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "Test 1",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "Passing test",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "Test 1 › Test 1.1",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": Object {
                "details": "Error: expect(received).toBeTruthy()

Received: false
    at Object.<anonymous> (C:\\\\Users\\\\Michal\\\\Workspace\\\\dorny\\\\test-check\\\\reports\\\\jest\\\\__tests__\\\\main.test.js:10:21)
    at Object.asyncJestTest (C:\\\\Users\\\\Michal\\\\Workspace\\\\dorny\\\\test-check\\\\reports\\\\jest\\\\node_modules\\\\jest-jasmine2\\\\build\\\\jasmineAsyncInstall.js:106:37)
    at C:\\\\Users\\\\Michal\\\\Workspace\\\\dorny\\\\test-check\\\\reports\\\\jest\\\\node_modules\\\\jest-jasmine2\\\\build\\\\queueRunner.js:45:12
    at new Promise (<anonymous>)
    at mapper (C:\\\\Users\\\\Michal\\\\Workspace\\\\dorny\\\\test-check\\\\reports\\\\jest\\\\node_modules\\\\jest-jasmine2\\\\build\\\\queueRunner.js:28:19)
    at C:\\\\Users\\\\Michal\\\\Workspace\\\\dorny\\\\test-check\\\\reports\\\\jest\\\\node_modules\\\\jest-jasmine2\\\\build\\\\queueRunner.js:75:41
    at processTicksAndRejections (internal/process/task_queues.js:97:5)",
                "line": 10,
                "path": "__tests__/main.test.js",
              },
              "name": "Failing test",
              "output": undefined,
              "result": "failed",
              "time": 2,
            },
            TestCaseResult {
              "error": Object {
                "details": "Error: Some error
    at Object.throwError (C:\\\\Users\\\\Michal\\\\Workspace\\\\dorny\\\\test-check\\\\reports\\\\jest\\\\lib\\\\main.js:2:9)
    at Object.<anonymous> (C:\\\\Users\\\\Michal\\\\Workspace\\\\dorny\\\\test-check\\\\reports\\\\jest\\\\__tests__\\\\main.test.js:14:11)
    at Object.asyncJestTest (C:\\\\Users\\\\Michal\\\\Workspace\\\\dorny\\\\test-check\\\\reports\\\\jest\\\\node_modules\\\\jest-jasmine2\\\\build\\\\jasmineAsyncInstall.js:106:37)
    at C:\\\\Users\\\\Michal\\\\Workspace\\\\dorny\\\\test-check\\\\reports\\\\jest\\\\node_modules\\\\jest-jasmine2\\\\build\\\\queueRunner.js:45:12
    at new Promise (<anonymous>)
    at mapper (C:\\\\Users\\\\Michal\\\\Workspace\\\\dorny\\\\test-check\\\\reports\\\\jest\\\\node_modules\\\\jest-jasmine2\\\\build\\\\queueRunner.js:28:19)
    at C:\\\\Users\\\\Michal\\\\Workspace\\\\dorny\\\\test-check\\\\reports\\\\jest\\\\node_modules\\\\jest-jasmine2\\\\build\\\\queueRunner.js:75:41
    at processTicksAndRejections (internal/process/task_queues.js:97:5)",
                "line": 2,
                "path": "lib/main.js",
              },
              "name": "Exception in target unit",
              "output": undefined,
              "result": "failed",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "Test 2",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": Object {
                "details": "Error: Some error
    at Object.<anonymous> (C:\\\\Users\\\\Michal\\\\Workspace\\\\dorny\\\\test-check\\\\reports\\\\jest\\\\__tests__\\\\main.test.js:21:11)
    at Object.asyncJestTest (C:\\\\Users\\\\Michal\\\\Workspace\\\\dorny\\\\test-check\\\\reports\\\\jest\\\\node_modules\\\\jest-jasmine2\\\\build\\\\jasmineAsyncInstall.js:106:37)
    at C:\\\\Users\\\\Michal\\\\Workspace\\\\dorny\\\\test-check\\\\reports\\\\jest\\\\node_modules\\\\jest-jasmine2\\\\build\\\\queueRunner.js:45:12
    at new Promise (<anonymous>)
    at mapper (C:\\\\Users\\\\Michal\\\\Workspace\\\\dorny\\\\test-check\\\\reports\\\\jest\\\\node_modules\\\\jest-jasmine2\\\\build\\\\queueRunner.js:28:19)
    at C:\\\\Users\\\\Michal\\\\Workspace\\\\dorny\\\\test-check\\\\reports\\\\jest\\\\node_modules\\\\jest-jasmine2\\\\build\\\\queueRunner.js:75:41
    at processTicksAndRejections (internal/process/task_queues.js:97:5)",
                "line": 21,
                "path": "__tests__/main.test.js",
              },
              "name": "Exception in test",
              "output": undefined,
              "result": "failed",
              "time": 0,
            },
          ],
        },
      ],
      "name": "__tests__\\\\main.test.js",
      "output": undefined,
      "totalTime": 486,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": Object {
                "details": ": Timeout - Async callback was not invoked within the 1 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 1 ms timeout specified by jest.setTimeout.Error: 
    at new Spec (C:\\\\Users\\\\Michal\\\\Workspace\\\\dorny\\\\test-check\\\\reports\\\\jest\\\\node_modules\\\\jest-jasmine2\\\\build\\\\jasmine\\\\Spec.js:116:22)
    at new Spec (C:\\\\Users\\\\Michal\\\\Workspace\\\\dorny\\\\test-check\\\\reports\\\\jest\\\\node_modules\\\\jest-jasmine2\\\\build\\\\setup_jest_globals.js:78:9)
    at specFactory (C:\\\\Users\\\\Michal\\\\Workspace\\\\dorny\\\\test-check\\\\reports\\\\jest\\\\node_modules\\\\jest-jasmine2\\\\build\\\\jasmine\\\\Env.js:523:24)
    at Env.it (C:\\\\Users\\\\Michal\\\\Workspace\\\\dorny\\\\test-check\\\\reports\\\\jest\\\\node_modules\\\\jest-jasmine2\\\\build\\\\jasmine\\\\Env.js:592:24)
    at Env.it (C:\\\\Users\\\\Michal\\\\Workspace\\\\dorny\\\\test-check\\\\reports\\\\jest\\\\node_modules\\\\jest-jasmine2\\\\build\\\\jasmineAsyncInstall.js:134:23)
    at it (C:\\\\Users\\\\Michal\\\\Workspace\\\\dorny\\\\test-check\\\\reports\\\\jest\\\\node_modules\\\\jest-jasmine2\\\\build\\\\jasmine\\\\jasmineLight.js:100:21)
    at Object.<anonymous> (C:\\\\Users\\\\Michal\\\\Workspace\\\\dorny\\\\test-check\\\\reports\\\\jest\\\\__tests__\\\\second.test.js:1:34)
    at Runtime._execModule (C:\\\\Users\\\\Michal\\\\Workspace\\\\dorny\\\\test-check\\\\reports\\\\jest\\\\node_modules\\\\jest-runtime\\\\build\\\\index.js:1245:24)
    at Runtime._loadModule (C:\\\\Users\\\\Michal\\\\Workspace\\\\dorny\\\\test-check\\\\reports\\\\jest\\\\node_modules\\\\jest-runtime\\\\build\\\\index.js:844:12)
    at Runtime.requireModule (C:\\\\Users\\\\Michal\\\\Workspace\\\\dorny\\\\test-check\\\\reports\\\\jest\\\\node_modules\\\\jest-runtime\\\\build\\\\index.js:694:10)
    at jasmine2 (C:\\\\Users\\\\Michal\\\\Workspace\\\\dorny\\\\test-check\\\\reports\\\\jest\\\\node_modules\\\\jest-jasmine2\\\\build\\\\index.js:230:13)
    at runTestInternal (C:\\\\Users\\\\Michal\\\\Workspace\\\\dorny\\\\test-check\\\\reports\\\\jest\\\\node_modules\\\\jest-runner\\\\build\\\\runTest.js:380:22)
    at runTest (C:\\\\Users\\\\Michal\\\\Workspace\\\\dorny\\\\test-check\\\\reports\\\\jest\\\\node_modules\\\\jest-runner\\\\build\\\\runTest.js:472:34)",
                "line": 1,
                "path": "__tests__/second.test.js",
              },
              "name": "Timeout test",
              "output": undefined,
              "result": "failed",
              "time": 4,
            },
            TestCaseResult {
              "error": undefined,
              "name": "Skipped test",
              "output": undefined,
              "result": "skipped",
              "time": 0,
            },
          ],
        },
      ],
      "name": "__tests__\\\\second.test.js",
      "output": undefined,
      "totalTime": 82,
    },
  ],
  "totalTime": 1360,
}
`;

exports[`jest-junit tests report from facebook/jest test results matches snapshot 1`] = `
TestRunResult {
  "path": "fixtures/external/jest/jest-test-results.xml",
  "suites": Array [
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "picks a name based on the rootDir",
              "output": undefined,
              "result": "success",
              "time": 6,
            },
            TestCaseResult {
              "error": undefined,
              "name": "keeps custom project name based on the projects rootDir",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "keeps custom names based on the rootDir",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "minimal config is stable across runs",
              "output": undefined,
              "result": "success",
              "time": 3,
            },
            TestCaseResult {
              "error": undefined,
              "name": "sets coverageReporters correctly when argv.json is set",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "rootDir",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "throws if the options is missing a rootDir property",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
          ],
        },
        TestGroupResult {
          "name": "automock",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "falsy automock is not overwritten",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "collectCoverageOnlyFrom",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "normalizes all paths relative to rootDir",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not change absolute paths",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "substitutes <rootDir> tokens",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "collectCoverageFrom",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "substitutes <rootDir> tokens",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "findRelatedTests",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "it generates --coverageCoverageFrom patterns when needed",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "roots",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "normalizes all paths relative to rootDir",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not change absolute paths",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "substitutes <rootDir> tokens",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "transform",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "normalizes the path",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "pulls in config if it's passed as an array, and defaults to empty object",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "haste",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "normalizes the path for hasteImplModulePath",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "setupFilesAfterEnv",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "normalizes the path according to rootDir",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not change absolute paths",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "substitutes <rootDir> tokens",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "setupTestFrameworkScriptFile",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "logs a deprecation warning when \`setupTestFrameworkScriptFile\` is used",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "logs an error when \`setupTestFrameworkScriptFile\` and \`setupFilesAfterEnv\` are used",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "coveragePathIgnorePatterns",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "does not normalize paths relative to rootDir",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not normalize trailing slashes",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "substitutes <rootDir> tokens",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "watchPathIgnorePatterns",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "does not normalize paths relative to rootDir",
              "output": undefined,
              "result": "success",
              "time": 5,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not normalize trailing slashes",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "substitutes <rootDir> tokens",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "testPathIgnorePatterns",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "does not normalize paths relative to rootDir",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not normalize trailing slashes",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "substitutes <rootDir> tokens",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "modulePathIgnorePatterns",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "does not normalize paths relative to rootDir",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not normalize trailing slashes",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "substitutes <rootDir> tokens",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "testRunner",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "defaults to Circus",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "resolves jasmine",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "is overwritten by argv",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "coverageDirectory",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "defaults to <rootDir>/coverage",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "testEnvironment",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "resolves to an environment and prefers jest-environment-\`name\`",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws on invalid environment names",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with rootDir",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "babel-jest",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "correctly identifies and uses babel-jest",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "uses babel-jest if babel-jest is explicitly specified in a custom transform options",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "Upgrade help",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "logs a warning when \`scriptPreprocessor\` and/or \`preprocessorIgnorePatterns\` are used",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
          ],
        },
        TestGroupResult {
          "name": "testRegex",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "testRegex empty string is mapped to empty array",
              "output": undefined,
              "result": "success",
              "time": 3,
            },
            TestCaseResult {
              "error": undefined,
              "name": "testRegex string is mapped to an array",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "testRegex array is preserved",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "testMatch",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "testMatch default not applied if testRegex is set",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "testRegex default not applied if testMatch is set",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws if testRegex and testMatch are both specified",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "normalizes testMatch",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "moduleDirectories",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "defaults to node_modules",
              "output": undefined,
              "result": "success",
              "time": 8,
            },
            TestCaseResult {
              "error": undefined,
              "name": "normalizes moduleDirectories",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "preset",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "throws when preset not found",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws when module was found but no \\"jest-preset.js\\" or \\"jest-preset.json\\" files",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws when a dependency is missing in the preset",
              "output": undefined,
              "result": "success",
              "time": 44,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws when preset is invalid",
              "output": undefined,
              "result": "success",
              "time": 59,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws when preset evaluation throws type error",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with \\"react-native\\"",
              "output": undefined,
              "result": "success",
              "time": 3,
            },
            TestCaseResult {
              "error": undefined,
              "name": "searches for .json and .js preset files",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "merges with options",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "merges with options and moduleNameMapper preset is overridden by options",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "merges with options and transform preset is overridden by options",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "extracts setupFilesAfterEnv from preset",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "preset with globals",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should merge the globals preset correctly",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "preset without setupFiles",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should normalize setupFiles correctly",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "preset without setupFilesAfterEnv",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should normalize setupFilesAfterEnv correctly",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "runner",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "defaults to \`jest-runner\`",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "resolves to runners that do not have the prefix",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "resolves to runners and prefers jest-runner-\`name\`",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throw error when a runner is not found",
              "output": undefined,
              "result": "success",
              "time": 7,
            },
          ],
        },
        TestGroupResult {
          "name": "watchPlugins",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "defaults to undefined",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "resolves to watch plugins and prefers jest-watch-\`name\`",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "resolves watch plugins that do not have the prefix",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "normalizes multiple watchPlugins",
              "output": undefined,
              "result": "success",
              "time": 4,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throw error when a watch plugin is not found",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "testPathPattern",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "defaults to empty",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "joins multiple --testPathPatterns and <regexForTestFiles>",
              "output": undefined,
              "result": "success",
              "time": 3,
            },
            TestCaseResult {
              "error": undefined,
              "name": "gives precedence to --all",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "testPathPattern --testPathPattern",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "uses --testPathPattern if set",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "ignores invalid regular expressions and logs a warning",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "joins multiple --testPathPattern if set",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "testPathPattern --testPathPattern posix",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should not escape the pattern",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "testPathPattern --testPathPattern win32",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "preserves any use of \\"\\\\\\"",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "replaces POSIX path separators",
              "output": undefined,
              "result": "success",
              "time": 9,
            },
            TestCaseResult {
              "error": undefined,
              "name": "replaces POSIX paths in multiple args",
              "output": undefined,
              "result": "success",
              "time": 8,
            },
            TestCaseResult {
              "error": undefined,
              "name": "coerces all patterns to strings",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
          ],
        },
        TestGroupResult {
          "name": "testPathPattern <regexForTestFiles>",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "uses <regexForTestFiles> if set",
              "output": undefined,
              "result": "success",
              "time": 3,
            },
            TestCaseResult {
              "error": undefined,
              "name": "ignores invalid regular expressions and logs a warning",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "joins multiple <regexForTestFiles> if set",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "testPathPattern <regexForTestFiles> posix",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should not escape the pattern",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "testPathPattern <regexForTestFiles> win32",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "preserves any use of \\"\\\\\\"",
              "output": undefined,
              "result": "success",
              "time": 15,
            },
            TestCaseResult {
              "error": undefined,
              "name": "replaces POSIX path separators",
              "output": undefined,
              "result": "success",
              "time": 14,
            },
            TestCaseResult {
              "error": undefined,
              "name": "replaces POSIX paths in multiple args",
              "output": undefined,
              "result": "success",
              "time": 11,
            },
            TestCaseResult {
              "error": undefined,
              "name": "coerces all patterns to strings",
              "output": undefined,
              "result": "success",
              "time": 4,
            },
          ],
        },
        TestGroupResult {
          "name": "moduleFileExtensions",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "defaults to something useful",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws if missing \`js\` but using jest-runner",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not throw if missing \`js\` with a custom runner",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
          ],
        },
        TestGroupResult {
          "name": "cwd",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "is set to process.cwd",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "is not lost if the config has its own cwd property",
              "output": undefined,
              "result": "success",
              "time": 6,
            },
          ],
        },
        TestGroupResult {
          "name": "Defaults",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should be accepted by normalize",
              "output": undefined,
              "result": "success",
              "time": 3,
            },
          ],
        },
        TestGroupResult {
          "name": "displayName",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should throw an error when displayName is is an empty object",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should throw an error when displayName is missing color",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should throw an error when displayName is missing name",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should throw an error when displayName is using invalid values",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "generates a default color for the runner undefined",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "generates a default color for the runner jest-runner",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "generates a default color for the runner jest-runner-eslint",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "generates a default color for the runner jest-runner-tslint",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "generates a default color for the runner jest-runner-tsc",
              "output": undefined,
              "result": "success",
              "time": 7,
            },
          ],
        },
        TestGroupResult {
          "name": "testTimeout",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should return timeout value if defined",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should throw an error if timeout is a negative number",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "extensionsToTreatAsEsm",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should pass valid config through",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should enforce leading dots",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws on .js",
              "output": undefined,
              "result": "success",
              "time": 4,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws on .mjs",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws on .cjs",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
      ],
      "name": "packages/jest-config/src/__tests__/normalize.test.js",
      "output": undefined,
      "totalTime": 798,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "Repl cli",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "runs without errors",
              "output": undefined,
              "result": "success",
              "time": 1028,
            },
          ],
        },
      ],
      "name": "packages/jest-repl/src/__tests__/jest_repl.test.js",
      "output": undefined,
      "totalTime": 1172,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "chalk",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "level 0",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "level 1",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "level 2",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "level 3",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "matcher error toMatchInlineSnapshot",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "Expected properties must be an object (non-null) without snapshot",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "Expected properties must be an object (null) with snapshot",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "Inline snapshot must be a string",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "Snapshot matchers cannot be used with not",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "matcher error toMatchSnapshot",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "Expected properties must be an object (non-null)",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "Expected properties must be an object (null) with hint",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "Expected properties must be an object (null) without hint",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "Snapshot state must be initialized",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "matcher error toMatchSnapshot received value must be an object",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "(non-null)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "(null)",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "matcher error toThrowErrorMatchingInlineSnapshot",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "Inline snapshot must be a string",
              "output": undefined,
              "result": "success",
              "time": 4,
            },
            TestCaseResult {
              "error": undefined,
              "name": "Snapshot state must be initialized",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "matcher error toThrowErrorMatchingSnapshot",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "Received value must be a function",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "Snapshot matchers cannot be used with not",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "other error toThrowErrorMatchingSnapshot",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "Received function did not throw",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "pass false toMatchInlineSnapshot with properties equals false",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "with snapshot",
              "output": undefined,
              "result": "success",
              "time": 8,
            },
            TestCaseResult {
              "error": undefined,
              "name": "without snapshot",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "pass false toMatchInlineSnapshot with properties",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "equals true",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "pass false toMatchSnapshot",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "New snapshot was not written (multi line)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "New snapshot was not written (single line)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "pass false toMatchSnapshot with properties equals false",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "isLineDiffable false",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "isLineDiffable true",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "pass false toMatchSnapshot with properties",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "equals true",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "pass false toThrowErrorMatchingInlineSnapshot",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "with snapshot",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "pass true toMatchSnapshot",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "without properties",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "printPropertiesAndReceived",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "omit missing properties",
              "output": undefined,
              "result": "success",
              "time": 4,
            },
          ],
        },
        TestGroupResult {
          "name": "printSnapshotAndReceived backtick",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "single line expected and received",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "printSnapshotAndReceived empty string",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "expected and received single line",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "received and expected multi line",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "printSnapshotAndReceived escape",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "double quote marks in string",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "backslash in multi line string",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "backslash in single line string",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "regexp",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "printSnapshotAndReceived expand",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "false",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "true",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "printSnapshotAndReceived",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "fallback to line diff",
              "output": undefined,
              "result": "success",
              "time": 21,
            },
            TestCaseResult {
              "error": undefined,
              "name": "multi line small change in one line and other is unchanged",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "multi line small changes",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "single line large changes",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "printSnapshotAndReceived has no common after clean up chaff",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "array",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "string single line",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "printSnapshotAndReceived MAX_DIFF_STRING_LENGTH unquoted",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "both are less",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "expected is more",
              "output": undefined,
              "result": "success",
              "time": 3,
            },
            TestCaseResult {
              "error": undefined,
              "name": "received is more",
              "output": undefined,
              "result": "success",
              "time": 4,
            },
          ],
        },
        TestGroupResult {
          "name": "printSnapshotAndReceived MAX_DIFF_STRING_LENGTH quoted",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "both are less",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "expected is more",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "received is more",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "printSnapshotAndReceived isLineDiffable false",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "asymmetric matcher",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "boolean",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "date",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "error",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "function",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "number",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "printSnapshotAndReceived isLineDiffable true",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "array",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "object",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "single line expected and received",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "single line expected and multi line received",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "printSnapshotAndReceived ignore indentation",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "markup delete",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "markup fall back",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "markup insert",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "printSnapshotAndReceived ignore indentation object",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "delete",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "insert",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "printSnapshotAndReceived without serialize",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "backtick single line expected and received",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "backtick single line expected and multi line received",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "has no common after clean up chaff multi line",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "has no common after clean up chaff single line",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prettier/pull/5590",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
      ],
      "name": "packages/jest-snapshot/src/__tests__/printSnapshot.test.ts",
      "output": undefined,
      "totalTime": 1188,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "get configuration defaults",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "packages/jest-config/src/__tests__/Defaults.test.ts",
      "output": undefined,
      "totalTime": 672,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "isCoreModule",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "returns false if \`hasCoreModules\` is false.",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "returns true if \`hasCoreModules\` is true and \`moduleName\` is a core module.",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "returns false if \`hasCoreModules\` is true and \`moduleName\` is not a core module.",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "returns false if \`hasCoreModules\` is true and \`moduleNameMapper\` alias a module same name with core module",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "findNodeModule",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "is possible to override the default resolver",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "passes packageFilter to the resolve module when using the default resolver",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "resolveModule",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "is possible to resolve node modules",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "is possible to resolve node modules with custom extensions",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "is possible to resolve node modules with custom extensions and platforms",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "is possible to resolve node modules by resolving their realpath",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "is possible to specify custom resolve paths",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not confuse directories with files",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "getMockModule",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "is possible to use custom resolver to resolve deps inside mock modules with moduleNameMapper",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "nodeModulesPaths",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "provides custom module paths after node_modules",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "Resolver.getModulePaths() -> nodeModulesPaths()",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "can resolve node modules relative to absolute paths in \\"moduleDirectories\\" on Windows platforms",
              "output": undefined,
              "result": "success",
              "time": 21,
            },
            TestCaseResult {
              "error": undefined,
              "name": "can resolve node modules relative to absolute paths in \\"moduleDirectories\\" on Posix platforms",
              "output": undefined,
              "result": "success",
              "time": 8,
            },
          ],
        },
      ],
      "name": "packages/jest-resolve/src/__tests__/resolve.test.ts",
      "output": undefined,
      "totalTime": 1308,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "toEqual",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should be reflexive",
              "output": undefined,
              "result": "success",
              "time": 58,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should be symmetric",
              "output": undefined,
              "result": "success",
              "time": 204,
            },
          ],
        },
      ],
      "name": "packages/expect/src/__tests__/matchers-toEqual.property.test.ts",
      "output": undefined,
      "totalTime": 1062,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "snapshots needs update with npm test",
              "output": undefined,
              "result": "success",
              "time": 250,
            },
            TestCaseResult {
              "error": undefined,
              "name": "snapshots needs update with yarn test",
              "output": undefined,
              "result": "success",
              "time": 4,
            },
            TestCaseResult {
              "error": undefined,
              "name": "snapshots all have results (no update)",
              "output": undefined,
              "result": "success",
              "time": 4,
            },
            TestCaseResult {
              "error": undefined,
              "name": "snapshots all have results (after update)",
              "output": undefined,
              "result": "success",
              "time": 10,
            },
          ],
        },
      ],
      "name": "packages/jest-reporters/src/__tests__/SummaryReporter.test.js",
      "output": undefined,
      "totalTime": 366,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "readConfigs() throws when called without project paths",
              "output": undefined,
              "result": "success",
              "time": 16,
            },
            TestCaseResult {
              "error": undefined,
              "name": "readConfigs() loads async config file",
              "output": undefined,
              "result": "success",
              "time": 10,
            },
            TestCaseResult {
              "error": undefined,
              "name": "readConfigs() reject if async was rejected",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "packages/jest-config/src/__tests__/readConfigs.test.ts",
      "output": undefined,
      "totalTime": 135,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "generateEmptyCoverage",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "generates an empty coverage object for a file without running it",
              "output": undefined,
              "result": "success",
              "time": 370,
            },
            TestCaseResult {
              "error": undefined,
              "name": "generates a null coverage result when using /* istanbul ignore file */",
              "output": undefined,
              "result": "success",
              "time": 15,
            },
            TestCaseResult {
              "error": undefined,
              "name": "generates a null coverage result when collectCoverage global config is false",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
      ],
      "name": "packages/jest-reporters/src/__tests__/generateEmptyCoverage.test.js",
      "output": undefined,
      "totalTime": 1129,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "Any.asymmetricMatch()",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "Any.toAsymmetricMatcher()",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "Any.toAsymmetricMatcher() with function name",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "Any throws when called with empty constructor",
              "output": undefined,
              "result": "success",
              "time": 47,
            },
            TestCaseResult {
              "error": undefined,
              "name": "Anything matches any type",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "Anything does not match null and undefined",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "Anything.toAsymmetricMatcher()",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "ArrayContaining matches",
              "output": undefined,
              "result": "success",
              "time": 4,
            },
            TestCaseResult {
              "error": undefined,
              "name": "ArrayContaining does not match",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "ArrayContaining throws for non-arrays",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "ArrayNotContaining matches",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "ArrayNotContaining does not match",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "ArrayNotContaining throws for non-arrays",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "ObjectContaining matches",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "ObjectContaining does not match",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "ObjectContaining matches defined properties",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "ObjectContaining matches prototype properties",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "ObjectContaining throws for non-objects",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "ObjectContaining does not mutate the sample",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "ObjectNotContaining matches",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "ObjectNotContaining does not match",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "ObjectNotContaining inverts ObjectContaining",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "ObjectNotContaining throws for non-objects",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "StringContaining matches string against string",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "StringContaining throws if expected value is not string",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "StringContaining returns false if received value is not string",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "StringNotContaining matches string against string",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "StringNotContaining throws if expected value is not string",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "StringNotContaining returns true if received value is not string",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "StringMatching matches string against regexp",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "StringMatching matches string against string",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "StringMatching throws if expected value is neither string nor regexp",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "StringMatching returns false if received value is not string",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "StringMatching returns false even if coerced non-string received value matches pattern",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "StringNotMatching matches string against regexp",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "StringNotMatching matches string against string",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "StringNotMatching throws if expected value is neither string nor regexp",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "StringNotMatching returns true if received value is not string",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "packages/expect/src/__tests__/asymmetricMatchers.test.ts",
      "output": undefined,
      "totalTime": 207,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "onRunComplete",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "getLastError() returns an error when threshold is not met for global",
              "output": undefined,
              "result": "success",
              "time": 299,
            },
            TestCaseResult {
              "error": undefined,
              "name": "getLastError() returns an error when threshold is not met for file",
              "output": undefined,
              "result": "success",
              "time": 3,
            },
            TestCaseResult {
              "error": undefined,
              "name": "getLastError() returns \`undefined\` when threshold is met",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "getLastError() returns an error when threshold is not met for non-covered file",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "getLastError() returns an error when threshold is not met for directory",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "getLastError() returns \`undefined\` when threshold is met for directory",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "getLastError() returns an error when there is no coverage data for a threshold",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "getLastError() returns 'undefined' when global threshold group
   is empty because PATH and GLOB threshold groups have matched all the
    files in the coverage data.",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "getLastError() returns 'undefined' when file and directory path
  threshold groups overlap",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "that if globs or paths are specified alongside global, coverage
  data for matching paths will be subtracted from overall coverage
  and thresholds will be applied independently",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "that files are matched by all matching threshold groups",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "that it passes custom options when creating reporters",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
          ],
        },
      ],
      "name": "packages/jest-reporters/src/__tests__/CoverageReporter.test.js",
      "output": undefined,
      "totalTime": 397,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "saveInlineSnapshots() replaces empty function call with a template literal",
              "output": undefined,
              "result": "success",
              "time": 63,
            },
            TestCaseResult {
              "error": undefined,
              "name": "saveInlineSnapshots() without prettier leaves formatting outside of snapshots alone",
              "output": undefined,
              "result": "success",
              "time": 7,
            },
            TestCaseResult {
              "error": undefined,
              "name": "saveInlineSnapshots() can handle typescript without prettier",
              "output": undefined,
              "result": "success",
              "time": 8,
            },
            TestCaseResult {
              "error": undefined,
              "name": "saveInlineSnapshots() can handle tsx without prettier",
              "output": undefined,
              "result": "success",
              "time": 6,
            },
            TestCaseResult {
              "error": undefined,
              "name": "saveInlineSnapshots() can handle flow and jsx without prettier",
              "output": undefined,
              "result": "success",
              "time": 35,
            },
            TestCaseResult {
              "error": undefined,
              "name": "saveInlineSnapshots() can use prettier to fix formatting for whole file",
              "output": undefined,
              "result": "success",
              "time": 17,
            },
            TestCaseResult {
              "error": undefined,
              "name": "saveInlineSnapshots() replaces existing template literal - babel parser",
              "output": undefined,
              "result": "success",
              "time": 5,
            },
            TestCaseResult {
              "error": undefined,
              "name": "saveInlineSnapshots() replaces existing template literal - flow parser",
              "output": undefined,
              "result": "success",
              "time": 169,
            },
            TestCaseResult {
              "error": undefined,
              "name": "saveInlineSnapshots() replaces existing template literal - typescript parser",
              "output": undefined,
              "result": "success",
              "time": 155,
            },
            TestCaseResult {
              "error": undefined,
              "name": "saveInlineSnapshots() replaces existing template literal with property matchers",
              "output": undefined,
              "result": "success",
              "time": 17,
            },
            TestCaseResult {
              "error": undefined,
              "name": "saveInlineSnapshots() creates template literal with property matchers",
              "output": undefined,
              "result": "success",
              "time": 5,
            },
            TestCaseResult {
              "error": undefined,
              "name": "saveInlineSnapshots() creates template literal with property matchers",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "saveInlineSnapshots() throws if frame does not match",
              "output": undefined,
              "result": "success",
              "time": 22,
            },
            TestCaseResult {
              "error": undefined,
              "name": "saveInlineSnapshots() throws if multiple calls to to the same location",
              "output": undefined,
              "result": "success",
              "time": 3,
            },
            TestCaseResult {
              "error": undefined,
              "name": "saveInlineSnapshots() uses escaped backticks",
              "output": undefined,
              "result": "success",
              "time": 6,
            },
            TestCaseResult {
              "error": undefined,
              "name": "saveInlineSnapshots() works with non-literals in expect call",
              "output": undefined,
              "result": "success",
              "time": 8,
            },
            TestCaseResult {
              "error": undefined,
              "name": "saveInlineSnapshots() indents multi-line snapshots with spaces",
              "output": undefined,
              "result": "success",
              "time": 13,
            },
            TestCaseResult {
              "error": undefined,
              "name": "saveInlineSnapshots() does not re-indent error snapshots",
              "output": undefined,
              "result": "success",
              "time": 22,
            },
            TestCaseResult {
              "error": undefined,
              "name": "saveInlineSnapshots() does not re-indent already indented snapshots",
              "output": undefined,
              "result": "success",
              "time": 11,
            },
            TestCaseResult {
              "error": undefined,
              "name": "saveInlineSnapshots() indents multi-line snapshots with tabs",
              "output": undefined,
              "result": "success",
              "time": 12,
            },
            TestCaseResult {
              "error": undefined,
              "name": "saveInlineSnapshots() indents snapshots after prettier reformats",
              "output": undefined,
              "result": "success",
              "time": 16,
            },
            TestCaseResult {
              "error": undefined,
              "name": "saveInlineSnapshots() does not indent empty lines",
              "output": undefined,
              "result": "success",
              "time": 7,
            },
          ],
        },
      ],
      "name": "packages/jest-snapshot/src/__tests__/InlineSnapshots.test.ts",
      "output": undefined,
      "totalTime": 1149,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "readConfig() throws when an object is passed without a file path",
              "output": undefined,
              "result": "success",
              "time": 16,
            },
          ],
        },
      ],
      "name": "packages/jest-config/src/__tests__/readConfig.test.ts",
      "output": undefined,
      "totalTime": 76,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "When offset is -1",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "When offset is in the first set of items",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "When offset is in the middle of the list",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "When offset is at the end of the list",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "When offset is at the end and size is smaller than max",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "packages/jest-watcher/src/lib/__tests__/scroll.test.ts",
      "output": undefined,
      "totalTime": 57,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "toThrowError",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "to throw or not to throw",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "invalid arguments",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "invalid actual",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "toThrowError substring",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "passes",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "did not throw at all",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "threw, but message did not match (error)",
              "output": undefined,
              "result": "success",
              "time": 4,
            },
            TestCaseResult {
              "error": undefined,
              "name": "threw, but message did not match (non-error falsey)",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "properly escapes strings when matching against errors",
              "output": undefined,
              "result": "success",
              "time": 37,
            },
            TestCaseResult {
              "error": undefined,
              "name": "threw, but message should not match (error)",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "threw, but message should not match (non-error truthy)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "toThrowError regexp",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "passes",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "did not throw at all",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "threw, but message did not match (error)",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "threw, but message did not match (non-error falsey)",
              "output": undefined,
              "result": "success",
              "time": 8,
            },
            TestCaseResult {
              "error": undefined,
              "name": "threw, but message should not match (error)",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "threw, but message should not match (non-error truthy)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "toThrowError error class",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "passes",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "did not throw at all",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "threw, but class did not match (error)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "threw, but class did not match (non-error falsey)",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "threw, but class should not match (error)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "threw, but class should not match (error subclass)",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "threw, but class should not match (error subsubclass)",
              "output": undefined,
              "result": "success",
              "time": 4,
            },
          ],
        },
        TestGroupResult {
          "name": "toThrowError error-message pass",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "isNot false",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "isNot true",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "toThrowError error-message fail",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "isNot false",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "isNot true",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "multiline diff highlight incorrect expected space",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "toThrowError asymmetric any-Class pass",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "isNot false",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "isNot true",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "toThrowError asymmetric any-Class fail",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "isNot false",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "isNot true",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "toThrowError asymmetric anything pass",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "isNot false",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "isNot true",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "toThrowError asymmetric anything fail",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "isNot false",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "isNot true",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "toThrowError asymmetric no-symbol pass",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "isNot false",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "isNot true",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "toThrowError asymmetric no-symbol fail",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "isNot false",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "isNot true",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "toThrowError asymmetric objectContaining pass",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "isNot false",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "isNot true",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "toThrowError asymmetric objectContaining fail",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "isNot false",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "isNot true",
              "output": undefined,
              "result": "success",
              "time": 4,
            },
          ],
        },
        TestGroupResult {
          "name": "toThrowError promise/async throws if Error-like object is returned",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "passes",
              "output": undefined,
              "result": "success",
              "time": 3,
            },
            TestCaseResult {
              "error": undefined,
              "name": "did not throw at all",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "threw, but class did not match",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "threw, but should not have",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "toThrowError expected is undefined",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "threw, but should not have (non-error falsey)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "toThrow",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "to throw or not to throw",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "invalid arguments",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "invalid actual",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "toThrow substring",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "passes",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "did not throw at all",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "threw, but message did not match (error)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "threw, but message did not match (non-error falsey)",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "properly escapes strings when matching against errors",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "threw, but message should not match (error)",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "threw, but message should not match (non-error truthy)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "toThrow regexp",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "passes",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "did not throw at all",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "threw, but message did not match (error)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "threw, but message did not match (non-error falsey)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "threw, but message should not match (error)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "threw, but message should not match (non-error truthy)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "toThrow error class",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "passes",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "did not throw at all",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "threw, but class did not match (error)",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "threw, but class did not match (non-error falsey)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "threw, but class should not match (error)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "threw, but class should not match (error subclass)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "threw, but class should not match (error subsubclass)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "toThrow error-message pass",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "isNot false",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "isNot true",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "toThrow error-message fail",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "isNot false",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "isNot true",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "multiline diff highlight incorrect expected space",
              "output": undefined,
              "result": "success",
              "time": 4,
            },
          ],
        },
        TestGroupResult {
          "name": "toThrow asymmetric any-Class pass",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "isNot false",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "isNot true",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "toThrow asymmetric any-Class fail",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "isNot false",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "isNot true",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "toThrow asymmetric anything pass",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "isNot false",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "isNot true",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "toThrow asymmetric anything fail",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "isNot false",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "isNot true",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "toThrow asymmetric no-symbol pass",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "isNot false",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "isNot true",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "toThrow asymmetric no-symbol fail",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "isNot false",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "isNot true",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "toThrow asymmetric objectContaining pass",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "isNot false",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "isNot true",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "toThrow asymmetric objectContaining fail",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "isNot false",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "isNot true",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "toThrow promise/async throws if Error-like object is returned",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "passes",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "did not throw at all",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "threw, but class did not match",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "threw, but should not have",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "toThrow expected is undefined",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "threw, but should not have (non-error falsey)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "packages/expect/src/__tests__/toThrowMatchers.test.ts",
      "output": undefined,
      "totalTime": 257,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "recursively validates default Jest config",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "recursively validates default jest-validate config",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "pretty prints valid config for Boolean",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "pretty prints valid config for Array",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "pretty prints valid config for String",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "pretty prints valid config for Object",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "pretty prints valid config for Function",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "omits null and undefined config values",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "recursively omits null and undefined config values",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "treat async and non-async functions as equivalent",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "treat async and non-async functions as equivalent",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "treat async and non-async functions as equivalent",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "treat async and non-async functions as equivalent",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "respects recursiveDenylist",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "displays warning for unknown config options",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "displays warning for deprecated config options",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with custom warnings",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with custom errors",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with custom deprecations",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with multiple valid types",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "reports errors nicely when failing with multiple valid options",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "Repeated types within multiple valid examples are coalesced in error report",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "Comments in config JSON using \\"//\\" key are not warned",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "packages/jest-validate/src/__tests__/validate.test.ts",
      "output": undefined,
      "totalTime": 283,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "defaults",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "returns cached object if called multiple times",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "resolveSnapshotPath()",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "resolveTestPath()",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "custom resolver in project config",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "returns cached object if called multiple times",
              "output": undefined,
              "result": "success",
              "time": 4,
            },
            TestCaseResult {
              "error": undefined,
              "name": "resolveSnapshotPath()",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "resolveTestPath()",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "malformed custom resolver in project config",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "missing resolveSnapshotPath throws",
              "output": undefined,
              "result": "success",
              "time": 8,
            },
            TestCaseResult {
              "error": undefined,
              "name": "missing resolveTestPath throws",
              "output": undefined,
              "result": "success",
              "time": 10,
            },
            TestCaseResult {
              "error": undefined,
              "name": "missing testPathForConsistencyCheck throws",
              "output": undefined,
              "result": "success",
              "time": 4,
            },
            TestCaseResult {
              "error": undefined,
              "name": "inconsistent functions throws",
              "output": undefined,
              "result": "success",
              "time": 20,
            },
          ],
        },
      ],
      "name": "packages/jest-snapshot/src/__tests__/SnapshotResolver.test.ts",
      "output": undefined,
      "totalTime": 98,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "resolves to the result of generateEmptyCoverage upon success",
              "output": undefined,
              "result": "success",
              "time": 127,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws errors on invalid JavaScript",
              "output": undefined,
              "result": "success",
              "time": 5,
            },
          ],
        },
      ],
      "name": "packages/jest-reporters/src/__tests__/CoverageWorker.test.js",
      "output": undefined,
      "totalTime": 199,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "Returns source string with inline maps when no transformOptions is passed",
              "output": undefined,
              "result": "success",
              "time": 177,
            },
            TestCaseResult {
              "error": undefined,
              "name": "can pass null to createTransformer",
              "output": undefined,
              "result": "success",
              "time": 17,
            },
          ],
        },
        TestGroupResult {
          "name": "caller option correctly merges from defaults and options",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "{\\"supportsDynamicImport\\":true,\\"supportsStaticESM\\":true} -> {\\"supportsDynamicImport\\":true,\\"supportsStaticESM\\":true}",
              "output": undefined,
              "result": "success",
              "time": 6,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{\\"supportsDynamicImport\\":false,\\"supportsStaticESM\\":false} -> {\\"supportsDynamicImport\\":false,\\"supportsStaticESM\\":false}",
              "output": undefined,
              "result": "success",
              "time": 11,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{\\"supportsStaticESM\\":false} -> {\\"supportsDynamicImport\\":false,\\"supportsStaticESM\\":false}",
              "output": undefined,
              "result": "success",
              "time": 13,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{\\"supportsDynamicImport\\":true} -> {\\"supportsDynamicImport\\":true,\\"supportsStaticESM\\":false}",
              "output": undefined,
              "result": "success",
              "time": 11,
            },
          ],
        },
      ],
      "name": "packages/babel-jest/src/__tests__/index.ts",
      "output": undefined,
      "totalTime": 371,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "Resolve config path .js",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "file path with \\".js\\"",
              "output": undefined,
              "result": "success",
              "time": 9,
            },
            TestCaseResult {
              "error": undefined,
              "name": "directory path with \\".js\\"",
              "output": undefined,
              "result": "success",
              "time": 11,
            },
          ],
        },
        TestGroupResult {
          "name": "Resolve config path .ts",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "file path with \\".ts\\"",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "directory path with \\".ts\\"",
              "output": undefined,
              "result": "success",
              "time": 3,
            },
          ],
        },
        TestGroupResult {
          "name": "Resolve config path .mjs",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "file path with \\".mjs\\"",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "directory path with \\".mjs\\"",
              "output": undefined,
              "result": "success",
              "time": 7,
            },
          ],
        },
        TestGroupResult {
          "name": "Resolve config path .cjs",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "file path with \\".cjs\\"",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "directory path with \\".cjs\\"",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
          ],
        },
        TestGroupResult {
          "name": "Resolve config path .json",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "file path with \\".json\\"",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "directory path with \\".json\\"",
              "output": undefined,
              "result": "success",
              "time": 3,
            },
          ],
        },
      ],
      "name": "packages/jest-config/src/__tests__/resolveConfigPath.test.ts",
      "output": undefined,
      "totalTime": 183,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "groupTestsBySuites",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should handle empty results",
              "output": undefined,
              "result": "success",
              "time": 293,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should group A1 in A",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should group A1 in A; B1 in B",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should group A1, A2 in A",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should group A1, A2 in A; B1, B2 in B",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should group AB1 in AB",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should group AB1, AB2 in AB",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should group A1 in A; AB1 in AB",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should group AB1 in AB; A1 in A",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should group AB1 in AB; CD1 in CD",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should group ABC1 in ABC; BC1 in BC; D1 in D; A1 in A",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "packages/jest-reporters/src/__tests__/VerboseReporter.test.js",
      "output": undefined,
      "totalTime": 425,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "keyToTestName()",
              "output": undefined,
              "result": "success",
              "time": 18,
            },
            TestCaseResult {
              "error": undefined,
              "name": "testNameToKey",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "saveSnapshotFile() works with",
              "output": undefined,
              "result": "success",
              "time": 7,
            },
            TestCaseResult {
              "error": undefined,
              "name": "saveSnapshotFile() works with",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "getSnapshotData() throws when no snapshot version",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "getSnapshotData() throws for older snapshot version",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "getSnapshotData() throws for newer snapshot version",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "getSnapshotData() does not throw for when updating",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "getSnapshotData() marks invalid snapshot dirty when updating",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "getSnapshotData() marks valid snapshot not dirty when updating",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "escaping",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "serialize handles \\\\r\\\\n",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "ExtraLineBreaks",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "0 empty string",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "1 line has double quote marks at edges",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "1 line has spaces at edges",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "2 lines both are blank",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "2 lines have double quote marks at edges",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "2 lines first is blank",
              "output": undefined,
              "result": "success",
              "time": 4,
            },
            TestCaseResult {
              "error": undefined,
              "name": "2 lines last is blank",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "removeLinesBeforeExternalMatcherTrap",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "contains external matcher trap",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "doesn't contain external matcher trap",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "DeepMerge with property matchers",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "Correctly merges a nested object",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "Correctly merges an object with an array of objects",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "Correctly merges an object with an array of strings",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "Correctly merges an array of objects",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "Correctly merges an array of arrays",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "packages/jest-snapshot/src/__tests__/utils.test.ts",
      "output": undefined,
      "totalTime": 214,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "test always",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "test success",
              "output": undefined,
              "result": "success",
              "time": 8,
            },
            TestCaseResult {
              "error": undefined,
              "name": "test change",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "test success-change",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "test failure-change",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "test always with rootDir",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "test success with rootDir",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "test change with rootDir",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "test success-change with rootDir",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "test failure-change with rootDir",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "test always with moduleName",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "test success with moduleName",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "test change with moduleName",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "test success-change with moduleName",
              "output": undefined,
              "result": "success",
              "time": 4,
            },
            TestCaseResult {
              "error": undefined,
              "name": "test failure-change with moduleName",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "node-notifier is an optional dependency",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "without node-notifier uses mock function that throws an error",
              "output": undefined,
              "result": "success",
              "time": 23,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws the error when require throws an unexpected error",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "uses node-notifier when it is available",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
      ],
      "name": "packages/jest-reporters/src/__tests__/NotifyReporter.test.ts",
      "output": undefined,
      "totalTime": 166,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "Runtime CLI",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "fails with no path",
              "output": undefined,
              "result": "success",
              "time": 80,
            },
            TestCaseResult {
              "error": undefined,
              "name": "displays script output",
              "output": undefined,
              "result": "success",
              "time": 1197,
            },
            TestCaseResult {
              "error": undefined,
              "name": "always disables automocking",
              "output": undefined,
              "result": "success",
              "time": 1424,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws script errors",
              "output": undefined,
              "result": "success",
              "time": 1209,
            },
          ],
        },
      ],
      "name": "packages/jest-repl/src/__tests__/runtime_cli.test.js",
      "output": undefined,
      "totalTime": 4094.0000000000005,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "is available globally when matcher is unary",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "is available globally when matcher is variadic",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "exposes matcherUtils in context",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "is ok if there is no message specified",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "exposes an equality function to custom matchers",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "defines asymmetric unary matchers",
              "output": undefined,
              "result": "success",
              "time": 3,
            },
            TestCaseResult {
              "error": undefined,
              "name": "defines asymmetric unary matchers that can be prefixed by not",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "defines asymmetric variadic matchers",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "defines asymmetric variadic matchers that can be prefixed by not",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints the Symbol into the error message",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
      ],
      "name": "packages/expect/src/__tests__/extend.test.ts",
      "output": undefined,
      "totalTime": 99,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "getCallsite",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "without source map",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "ignores errors when fs throws",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "reads source map file to determine line and column",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "packages/jest-source-map/src/__tests__/getCallsite.test.ts",
      "output": undefined,
      "totalTime": 86,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "maps special values to valid options",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "maps regular values to themselves",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with string objects",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "explicit flags override those from --config",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "packages/jest-config/src/__tests__/setFromArgv.test.ts",
      "output": undefined,
      "totalTime": 53,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "calls handler on change value",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls handler on success prompt",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls handler on cancel prompt",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
      ],
      "name": "packages/jest-watcher/src/lib/__tests__/prompt.test.ts",
      "output": undefined,
      "totalTime": 91,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "docblock",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "extracts valid docblock with line comment",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "extracts valid docblock",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "extracts valid docblock with more comments",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "extracts from invalid docblock",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "returns extract and parsedocblock",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "parses directives out of a docblock",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "parses multiple of the same directives out of a docblock",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "parses >=3 of the same directives out of a docblock",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "parses directives out of a docblock with comments",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "parses directives out of a docblock with line comments",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "parses multiline directives",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "parses multiline directives even if there are linecomments within the docblock",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports slashes in @team directive",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "extracts comments from docblock",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "extracts multiline comments from docblock",
              "output": undefined,
              "result": "success",
              "time": 10,
            },
            TestCaseResult {
              "error": undefined,
              "name": "preserves leading whitespace in multiline comments from docblock",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "removes leading newlines in multiline comments from docblock",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "extracts comments from beginning and end of docblock",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "preserve urls within a pragma's values",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "strip linecomments from pragmas but preserve for comments",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "extracts docblock comments as CRLF when docblock contains CRLF",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "extracts docblock comments as LF when docblock contains LF",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "strips the docblock out of a file that contains a top docblock",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "returns a file unchanged if there is no top docblock to strip",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints docblocks with no pragmas as empty string",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints docblocks with one pragma on one line",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints docblocks with multiple pragmas on multiple lines",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints docblocks with multiple of the same pragma",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints docblocks with pragmas",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints docblocks with comments",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints docblocks with comments and no keys",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints docblocks with multiline comments",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints docblocks that are parseable",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "can augment existing docblocks with comments",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints docblocks using CRLF if comments contains CRLF",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints docblocks using LF if comments contains LF",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
      ],
      "name": "packages/jest-docblock/src/__tests__/index.test.ts",
      "output": undefined,
      "totalTime": 177,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "dedentLines non-null",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "no lines",
              "output": undefined,
              "result": "success",
              "time": 3,
            },
            TestCaseResult {
              "error": undefined,
              "name": "one line empty string",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "one line empty object",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "one line self-closing element",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "object value empty string",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "object value string includes double-quote marks",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "markup with props and text",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "markup with components as props",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "dedentLines null",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "object key multi-line",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "object value multi-line",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "object key and value multi-line",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "markup prop multi-line",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "markup prop component with multi-line text",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "markup text multi-line",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "markup text multiple lines",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "markup unclosed self-closing start tag",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "markup unclosed because no end tag",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "packages/jest-snapshot/src/__tests__/dedentLines.test.ts",
      "output": undefined,
      "totalTime": 94,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "getMaxWorkers",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "Returns 1 when runInBand",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "Returns 1 when the OS CPUs are not available",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "Returns the \`maxWorkers\` when specified",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "Returns based on the number of cpus",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "getMaxWorkers % based",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "50% = 2 workers",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "< 0 workers should become 1",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "0% shouldn't break",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "packages/jest-config/src/__tests__/getMaxWorkers.test.ts",
      "output": undefined,
      "totalTime": 67,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "wrapAnsiString()",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "wraps a long string containing ansi chars",
              "output": undefined,
              "result": "success",
              "time": 3,
            },
            TestCaseResult {
              "error": undefined,
              "name": "returns the string unaltered if given a terminal width of zero",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "trimAndFormatPath()",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "trims dirname",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "trims dirname (longer line width)",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "trims dirname and basename",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not trim anything",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "split at the path.sep index",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "printDisplayName",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should default displayName color to white when displayName is a string",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should default displayName color to white when color is not a valid value",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should correctly print the displayName when color and name are valid values",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "packages/jest-reporters/src/__tests__/utils.test.ts",
      "output": undefined,
      "totalTime": 85,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "throw matcher can take func",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
          ],
        },
        TestGroupResult {
          "name": "throw matcher from promise",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "can take error",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "can take custom error",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
      ],
      "name": "packages/jest-snapshot/src/__tests__/throwMatcher.test.ts",
      "output": undefined,
      "totalTime": 481,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "matcher returns matcher name, expected and actual values",
              "output": undefined,
              "result": "success",
              "time": 7,
            },
          ],
        },
      ],
      "name": "packages/jest-snapshot/src/__tests__/matcher.test.ts",
      "output": undefined,
      "totalTime": 131,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "validate pattern function",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "without passed args returns true",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "returns true for empty pattern",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "returns true for valid pattern",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "returns false for invalid pattern",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
      ],
      "name": "packages/jest-config/src/__tests__/validatePattern.test.ts",
      "output": undefined,
      "totalTime": 52,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "isBuiltinModule",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should return true for the \`path\` module",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should return false for the \`chalk\` module",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should return true for the \`_http_common\` module",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should return false for any internal node builtins",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "packages/jest-resolve/src/__tests__/isBuiltinModule.test.ts",
      "output": undefined,
      "totalTime": 36,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "throw when directly imported",
              "output": undefined,
              "result": "success",
              "time": 505,
            },
          ],
        },
      ],
      "name": "packages/jest-globals/src/__tests__/index.ts",
      "output": undefined,
      "totalTime": 533,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "replacePathSepForRegex() posix",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should return the path",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "replacePathSepForRegex() win32",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should replace POSIX path separators",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should escape Windows path separators",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should not escape an escaped dot",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should not escape an escaped regexp symbol",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should escape Windows path separators inside groups",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should escape Windows path separator at the beginning",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should not escape several already escaped path separators",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "packages/jest-regex-util/src/__tests__/index.test.ts",
      "output": undefined,
      "totalTime": 56,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "mock with 0 calls and default name",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "mock with 2 calls, 1 return, 1 throw",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "mock with 0 calls and default name in React element",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "mock with 0 calls and non-default name",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "mock with 1 calls and non-default name via new in object",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "mock with 1 calls in React element",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "mock with 2 calls",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "indent option",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "min option",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "maxDepth option",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "packages/jest-snapshot/src/__tests__/mockSerializer.test.ts",
      "output": undefined,
      "totalTime": 45,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "getWatermarks",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "that watermarks use thresholds as upper target",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "that watermarks are created always created",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
      ],
      "name": "packages/jest-reporters/src/__tests__/getWatermarks.test.ts",
      "output": undefined,
      "totalTime": 37,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "normal output, everything goes to stdout",
              "output": undefined,
              "result": "success",
              "time": 3,
            },
            TestCaseResult {
              "error": undefined,
              "name": "when using stderr as output, no stdout call is made",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
      ],
      "name": "packages/jest-reporters/src/__tests__/DefaultReporter.test.js",
      "output": undefined,
      "totalTime": 148,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should call \`terminal-link\` correctly",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should render the terminal link",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should display test time for slow test",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should not display test time for fast test",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "packages/jest-reporters/src/__tests__/getResultHeader.test.js",
      "output": undefined,
      "totalTime": 30,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "toEqual duck type Text",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "isNot false",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "isNot true",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "toEqual duck type Element",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "isNot false",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "isNot true",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "toEqual duck type Fragment",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "isNot false",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "isNot true",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "toEqual document createTextNode",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "isNot false",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "isNot true",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "toEqual document createElement",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "isNot false",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "isNot true",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "toEqual document createDocumentFragment",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "isNot false",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "isNot true",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
      ],
      "name": "packages/expect/src/__tests__/toEqual-dom.test.ts",
      "output": undefined,
      "totalTime": 99,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "NodeEnvironment",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "uses a copy of the process object",
              "output": undefined,
              "result": "success",
              "time": 11,
            },
            TestCaseResult {
              "error": undefined,
              "name": "exposes process.on",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "exposes global.global",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should configure setTimeout/setInterval to use the node api",
              "output": undefined,
              "result": "success",
              "time": 3,
            },
            TestCaseResult {
              "error": undefined,
              "name": "has modern fake timers implementation",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "TextEncoder references the same global Uint8Array constructor",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "packages/jest-environment-node/src/__tests__/node_environment.test.ts",
      "output": undefined,
      "totalTime": 184,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "Retrieves the snapshot status",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "Shows no snapshot updates if all snapshots matched",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "Retrieves the snapshot status after a snapshot update",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "packages/jest-reporters/src/__tests__/getSnapshotStatus.test.js",
      "output": undefined,
      "totalTime": 28,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "validates yargs special options",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "validates testURL",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails for unknown option",
              "output": undefined,
              "result": "success",
              "time": 4,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails for multiple unknown options",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not show suggestion when unrecognized cli param length <= 1",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "shows suggestion when unrecognized cli param length > 1",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "packages/jest-validate/src/__tests__/validateCLIOptions.test.js",
      "output": undefined,
      "totalTime": 83,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "creates a snapshot summary",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "creates a snapshot summary after an update",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "creates a snapshot summary with multiple snapshot being written/updated",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "returns nothing if there are no updates",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
      ],
      "name": "packages/jest-reporters/src/__tests__/getSnapshotSummary.test.js",
      "output": undefined,
      "totalTime": 49,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "for multiline test name returns",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "test name with highlighted pattern and replaced line breaks",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
          ],
        },
        TestGroupResult {
          "name": "for one line test name with pattern in the head returns",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "test name with highlighted pattern",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "test name with cutted tail and highlighted pattern",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "test name with cutted tail and cutted highlighted pattern",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "for one line test name pattern in the middle",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "test name with highlighted pattern returns",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "test name with cutted tail and highlighted pattern",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "test name with cutted tail and cutted highlighted pattern",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "test name with highlighted cutted",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "for one line test name pattern in the tail returns",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "test name with highlighted pattern",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "test name with cutted tail and cutted highlighted pattern",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "test name with highlighted cutted",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
      ],
      "name": "packages/jest-watcher/src/lib/__tests__/formatTestNameByPattern.test.ts",
      "output": undefined,
      "totalTime": 129,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "shouldInstrument should return true",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "when testRegex is provided and file is not a test file",
              "output": undefined,
              "result": "success",
              "time": 5,
            },
            TestCaseResult {
              "error": undefined,
              "name": "when more than one testRegex is provided and filename is not a test file",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "when testMatch is provided and file is not a test file",
              "output": undefined,
              "result": "success",
              "time": 3,
            },
            TestCaseResult {
              "error": undefined,
              "name": "when testPathIgnorePatterns is provided and file is not a test file",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "when more than one testPathIgnorePatterns is provided and filename is not a test file",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "when testRegex and testPathIgnorePatterns are provided and file is not a test file",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "when testMatch and testPathIgnorePatterns are provided and file is not a test file",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should return true when file is in collectCoverageOnlyFrom when provided",
              "output": undefined,
              "result": "success",
              "time": 32,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should return true when filename matches collectCoverageFrom",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should return true if the file is not in coveragePathIgnorePatterns",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should return true if file is a testfile but forceCoverageMatch is set",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "shouldInstrument should return false",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "if collectCoverage is falsy",
              "output": undefined,
              "result": "success",
              "time": 11,
            },
            TestCaseResult {
              "error": undefined,
              "name": "when testRegex is provided and filename is a test file",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "when more than one testRegex is provided and filename matches one of the patterns",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "when testMatch is provided and file is a test file",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "when testRegex and testPathIgnorePatterns are provided and filename is a test file",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "when testMatch and testPathIgnorePatterns are provided and file is a test file",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "when file is not in collectCoverageOnlyFrom when provided",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "when filename does not match collectCoverageFrom",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "if the file is in coveragePathIgnorePatterns",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "if file is in mock patterns",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "if file is a globalSetup file",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "if file is globalTeardown file",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "if file is in setupFiles",
              "output": undefined,
              "result": "success",
              "time": 11,
            },
            TestCaseResult {
              "error": undefined,
              "name": "if file is in setupFilesAfterEnv",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "packages/jest-transform/src/__tests__/shouldInstrument.test.ts",
      "output": undefined,
      "totalTime": 155,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "ScriptTransformer",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "transforms a file properly",
              "output": undefined,
              "result": "success",
              "time": 204,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not transform Node core modules",
              "output": undefined,
              "result": "success",
              "time": 51,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws an error if \`process\` doesn't return a string or an objectcontaining \`code\` key with processed string",
              "output": undefined,
              "result": "success",
              "time": 79,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws an error if \`process\` doesn't defined",
              "output": undefined,
              "result": "success",
              "time": 42,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws an error if createTransformer returns object without \`process\` method",
              "output": undefined,
              "result": "success",
              "time": 98,
            },
            TestCaseResult {
              "error": undefined,
              "name": "shouldn't throw error without process method. But with corrent createTransformer method",
              "output": undefined,
              "result": "success",
              "time": 66,
            },
            TestCaseResult {
              "error": undefined,
              "name": "uses the supplied preprocessor",
              "output": undefined,
              "result": "success",
              "time": 45,
            },
            TestCaseResult {
              "error": undefined,
              "name": "uses multiple preprocessors",
              "output": undefined,
              "result": "success",
              "time": 35,
            },
            TestCaseResult {
              "error": undefined,
              "name": "writes source map if preprocessor supplies it",
              "output": undefined,
              "result": "success",
              "time": 26,
            },
            TestCaseResult {
              "error": undefined,
              "name": "writes source map if preprocessor inlines it",
              "output": undefined,
              "result": "success",
              "time": 38,
            },
            TestCaseResult {
              "error": undefined,
              "name": "warns of unparseable inlined source maps from the preprocessor",
              "output": undefined,
              "result": "success",
              "time": 67,
            },
            TestCaseResult {
              "error": undefined,
              "name": "writes source maps if given by the transformer",
              "output": undefined,
              "result": "success",
              "time": 32,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not write source map if not given by the transformer",
              "output": undefined,
              "result": "success",
              "time": 75,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should write a source map for the instrumented file when transformed",
              "output": undefined,
              "result": "success",
              "time": 66,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should write a source map for the instrumented file when not transformed",
              "output": undefined,
              "result": "success",
              "time": 66,
            },
            TestCaseResult {
              "error": undefined,
              "name": "passes expected transform options to getCacheKey",
              "output": undefined,
              "result": "success",
              "time": 73,
            },
            TestCaseResult {
              "error": undefined,
              "name": "creates transformer with config",
              "output": undefined,
              "result": "success",
              "time": 35,
            },
            TestCaseResult {
              "error": undefined,
              "name": "reads values from the cache",
              "output": undefined,
              "result": "success",
              "time": 93,
            },
            TestCaseResult {
              "error": undefined,
              "name": "reads values from the cache when the file contains colons",
              "output": undefined,
              "result": "success",
              "time": 84,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should reuse the value from in-memory cache which is set by custom transformer",
              "output": undefined,
              "result": "success",
              "time": 25,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not reuse the in-memory cache between different projects",
              "output": undefined,
              "result": "success",
              "time": 37,
            },
            TestCaseResult {
              "error": undefined,
              "name": "preload transformer when using \`preloadTransformer\`",
              "output": undefined,
              "result": "success",
              "time": 36,
            },
          ],
        },
      ],
      "name": "packages/jest-transform/src/__tests__/ScriptTransformer.test.ts",
      "output": undefined,
      "totalTime": 1660,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "simple test",
              "output": undefined,
              "result": "success",
              "time": 2145,
            },
            TestCaseResult {
              "error": undefined,
              "name": "failures",
              "output": undefined,
              "result": "success",
              "time": 707,
            },
          ],
        },
      ],
      "name": "packages/jest-circus/src/__tests__/baseTest.test.ts",
      "output": undefined,
      "totalTime": 2902,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "moduleMocker getMetadata",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "returns the function \`name\` property",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "mocks constant values",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not retrieve metadata for arrays",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not retrieve metadata for undefined",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not retrieve metadata for null",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "retrieves metadata for ES6 classes",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "retrieves synchronous function metadata",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "retrieves asynchronous function metadata",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "retrieves metadata for object literals and it's members",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "retrieves Date object metadata",
              "output": undefined,
              "result": "success",
              "time": 5,
            },
          ],
        },
        TestGroupResult {
          "name": "moduleMocker generateFromMetadata",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "forwards the function name property",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fixes illegal function name properties",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "special cases the mockConstructor name",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "wont interfere with previous mocks on a shared prototype",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not mock non-enumerable getters",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "mocks getters of ES modules",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "mocks ES2015 non-enumerable methods",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "mocks ES2015 non-enumerable static properties and methods",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "mocks methods in all the prototype chain (null prototype)",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not mock methods from Object.prototype",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not mock methods from Object.prototype (in mock context)",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not mock methods from Function.prototype",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not mock methods from Function.prototype (in mock context)",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not mock methods from RegExp.prototype",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not mock methods from RegExp.prototype (in mock context)",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "mocks methods that are bound multiple times",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "mocks methods that are bound after mocking",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "mocks regexp instances",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "mocks functions with numeric names",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "mocks the method in the passed object itself",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should delete previously inexistent methods when restoring",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports mock value returning undefined",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports mock value once returning undefined",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "mockReturnValueOnce mocks value just once",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports mocking resolvable async functions",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports mocking resolvable async functions only once",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports mocking rejectable async functions",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports mocking rejectable async functions only once",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "tracks thrown errors without interfering with other tracking",
              "output": undefined,
              "result": "success",
              "time": 33,
            },
            TestCaseResult {
              "error": undefined,
              "name": "a call that throws undefined is tracked properly",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "results of recursive calls are tracked properly",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "test results of recursive calls from within the recursive call",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "call mockClear inside recursive mock",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "moduleMocker generateFromMetadata mocked functions",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "tracks calls to mocks",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "tracks instances made by mocks",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports clearing mock calls",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports clearing mocks",
              "output": undefined,
              "result": "success",
              "time": 7,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports clearing all mocks",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports resetting mock return values",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports resetting single use mock return values",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports resetting mock implementations",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports resetting single use mock implementations",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports resetting all mocks",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "maintains function arity",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "moduleMocker generateFromMetadata return values",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "tracks return values",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "tracks mocked return values",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports resetting return values",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "moduleMocker generateFromMetadata invocationCallOrder",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "tracks invocationCallOrder made by mocks",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports clearing mock invocationCallOrder",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports clearing all mocks invocationCallOrder",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "handles a property called \`prototype\`",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "moduleMocker getMockImplementation",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should mock calls to a mock function",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "moduleMocker mockImplementationOnce",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should mock constructor",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should mock single call to a mock function",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should fallback to default mock function when no specific mock is available",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "moduleMocker",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "mockReturnValue does not override mockImplementationOnce",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "mockImplementation resets the mock",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should recognize a mocked function",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "default mockName is jest.fn()",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "mockName sets the mock name",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "mockName gets reset by mockReset",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "mockName gets reset by mockRestore",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "mockName is not reset by mockClear",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "moduleMocker spyOn",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should work",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should throw on invalid input",
              "output": undefined,
              "result": "success",
              "time": 28,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports restoring all spies",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should work with getters",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "moduleMocker spyOnProperty",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should work - getter",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should work - setter",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should throw on invalid input",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports restoring all spies",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should work with getters on the prototype chain",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should work with setters on the prototype chain",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports restoring all spies on the prototype chain",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
      ],
      "name": "packages/jest-mock/src/__tests__/index.test.ts",
      "output": undefined,
      "totalTime": 509,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "beforeEach is executed before each test in current/child describe blocks",
              "output": undefined,
              "result": "success",
              "time": 2304,
            },
            TestCaseResult {
              "error": undefined,
              "name": "multiple before each hooks in one describe are executed in the right order",
              "output": undefined,
              "result": "success",
              "time": 678,
            },
            TestCaseResult {
              "error": undefined,
              "name": "beforeAll is exectued correctly",
              "output": undefined,
              "result": "success",
              "time": 625,
            },
          ],
        },
      ],
      "name": "packages/jest-circus/src/__tests__/hooks.test.ts",
      "output": undefined,
      "totalTime": 3762,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "Runtime requireModule",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "finds haste modules",
              "output": undefined,
              "result": "success",
              "time": 1124,
            },
            TestCaseResult {
              "error": undefined,
              "name": "provides \`module\` to modules",
              "output": undefined,
              "result": "success",
              "time": 26,
            },
            TestCaseResult {
              "error": undefined,
              "name": "provides \`module.parent\` to modules",
              "output": undefined,
              "result": "success",
              "time": 80,
            },
            TestCaseResult {
              "error": undefined,
              "name": "\`module.parent\` should be undefined for entrypoints",
              "output": undefined,
              "result": "success",
              "time": 25,
            },
            TestCaseResult {
              "error": undefined,
              "name": "resolve module.parent.require correctly",
              "output": undefined,
              "result": "success",
              "time": 49,
            },
            TestCaseResult {
              "error": undefined,
              "name": "resolve module.parent.filename correctly",
              "output": undefined,
              "result": "success",
              "time": 23,
            },
            TestCaseResult {
              "error": undefined,
              "name": "provides \`module.loaded\` to modules",
              "output": undefined,
              "result": "success",
              "time": 27,
            },
            TestCaseResult {
              "error": undefined,
              "name": "provides \`module.filename\` to modules",
              "output": undefined,
              "result": "success",
              "time": 36,
            },
            TestCaseResult {
              "error": undefined,
              "name": "provides \`module.paths\` to modules",
              "output": undefined,
              "result": "success",
              "time": 49,
            },
            TestCaseResult {
              "error": undefined,
              "name": "provides \`require.main\` to modules",
              "output": undefined,
              "result": "success",
              "time": 52,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws on non-existent haste modules",
              "output": undefined,
              "result": "success",
              "time": 68,
            },
            TestCaseResult {
              "error": undefined,
              "name": "finds relative-path modules without file extension",
              "output": undefined,
              "result": "success",
              "time": 46,
            },
            TestCaseResult {
              "error": undefined,
              "name": "finds relative-path modules with file extension",
              "output": undefined,
              "result": "success",
              "time": 21,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws on non-existent relative-path modules",
              "output": undefined,
              "result": "success",
              "time": 22,
            },
            TestCaseResult {
              "error": undefined,
              "name": "finds node core built-in modules",
              "output": undefined,
              "result": "success",
              "time": 48,
            },
            TestCaseResult {
              "error": undefined,
              "name": "finds and loads JSON files without file extension",
              "output": undefined,
              "result": "success",
              "time": 27,
            },
            TestCaseResult {
              "error": undefined,
              "name": "finds and loads JSON files with file extension",
              "output": undefined,
              "result": "success",
              "time": 29,
            },
            TestCaseResult {
              "error": undefined,
              "name": "requires a JSON file twice successfully",
              "output": undefined,
              "result": "success",
              "time": 34,
            },
            TestCaseResult {
              "error": undefined,
              "name": "provides manual mock when real module doesnt exist",
              "output": undefined,
              "result": "success",
              "time": 27,
            },
            TestCaseResult {
              "error": undefined,
              "name": "doesn't override real modules with manual mocks when explicitly unmocked",
              "output": undefined,
              "result": "success",
              "time": 166,
            },
            TestCaseResult {
              "error": undefined,
              "name": "resolves haste packages properly",
              "output": undefined,
              "result": "success",
              "time": 30,
            },
            TestCaseResult {
              "error": undefined,
              "name": "resolves platform extensions based on the default platform",
              "output": undefined,
              "result": "success",
              "time": 204,
            },
            TestCaseResult {
              "error": undefined,
              "name": "finds modules encoded in UTF-8 *with BOM*",
              "output": undefined,
              "result": "success",
              "time": 25,
            },
            TestCaseResult {
              "error": undefined,
              "name": "finds and loads JSON files encoded in UTF-8 *with BOM*",
              "output": undefined,
              "result": "success",
              "time": 21,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should export a constructable Module class",
              "output": undefined,
              "result": "success",
              "time": 21,
            },
            TestCaseResult {
              "error": undefined,
              "name": "caches Module correctly",
              "output": undefined,
              "result": "success",
              "time": 23,
            },
          ],
        },
        TestGroupResult {
          "name": "Runtime requireModule on node >=12.12.0",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "overrides module.createRequire",
              "output": undefined,
              "result": "success",
              "time": 28,
            },
          ],
        },
      ],
      "name": "packages/jest-runtime/src/__tests__/runtime_require_module.test.js",
      "output": undefined,
      "totalTime": 2439,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "Runtime jest.mock",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "uses explicitly set mocks instead of automocking",
              "output": undefined,
              "result": "success",
              "time": 635,
            },
            TestCaseResult {
              "error": undefined,
              "name": "sets virtual mock for non-existing module required from same directory",
              "output": undefined,
              "result": "success",
              "time": 29,
            },
            TestCaseResult {
              "error": undefined,
              "name": "sets virtual mock for non-existing module required from different directory",
              "output": undefined,
              "result": "success",
              "time": 18,
            },
          ],
        },
        TestGroupResult {
          "name": "Runtime jest.setMock",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "uses explicitly set mocks instead of automocking",
              "output": undefined,
              "result": "success",
              "time": 21,
            },
          ],
        },
      ],
      "name": "packages/jest-runtime/src/__tests__/runtime_mock.test.js",
      "output": undefined,
      "totalTime": 743,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "test/it error throwing",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "it doesn't throw an error with valid arguments",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "it throws error with missing callback function",
              "output": undefined,
              "result": "success",
              "time": 28,
            },
            TestCaseResult {
              "error": undefined,
              "name": "it throws an error when first argument isn't a string",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "it throws an error when callback function is not a function",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "test doesn't throw an error with valid arguments",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "test throws error with missing callback function",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "test throws an error when first argument isn't a string",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "test throws an error when callback function is not a function",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
      ],
      "name": "packages/jest-circus/src/__tests__/circusItTestError.test.ts",
      "output": undefined,
      "totalTime": 300,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "BaseWorkerPool",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "throws error when createWorker is not defined",
              "output": undefined,
              "result": "success",
              "time": 15,
            },
            TestCaseResult {
              "error": undefined,
              "name": "creates and exposes n workers",
              "output": undefined,
              "result": "success",
              "time": 9,
            },
            TestCaseResult {
              "error": undefined,
              "name": "creates and expoeses n workers",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "creates workers with the right options",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "makes a non-existing relative worker throw",
              "output": undefined,
              "result": "success",
              "time": 3,
            },
            TestCaseResult {
              "error": undefined,
              "name": "create multiple workers with unique worker ids",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "aggregates all stdouts and stderrs from all workers",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works when stdout and stderr are not piped to the parent",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "BaseWorkerPool end",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "ends all workers",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "resolves with forceExited=false if workers exited gracefully",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "force exits workers that do not exit gracefully and resolves with forceExited=true",
              "output": undefined,
              "result": "success",
              "time": 501,
            },
          ],
        },
      ],
      "name": "packages/jest-worker/src/base/__tests__/BaseWorkerPool.test.js",
      "output": undefined,
      "totalTime": 653,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "does not incorrectly match identity-obj-proxy as Immutable object",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "Immutable.OrderedSet",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "supports an empty collection {min: true}",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports an empty collection {min: false}",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports a single string element",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports a single integer element",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports multiple string elements {min: true}",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports multiple string elements {min: false}",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports multiple integer elements {min: true}",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports multiple integer elements {min: false}",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports object elements {min: true}",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports object elements {min: false}",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports React elements {min: true}",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports React elements {min: false}",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "Immutable.List",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "supports an empty collection {min: true}",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports an empty collection {min: false}",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports a single string element",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports a single integer element",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports multiple string elements {min: true}",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports multiple string elements {min: false}",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports multiple integer elements {min: true}",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports multiple integer elements {min: false}",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports object elements {min: true}",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports object elements {min: false}",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports React elements {min: true}",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports React elements {min: false}",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "Immutable.Stack",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "supports an empty collection {min: true}",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports an empty collection {min: false}",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports a single string element",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports a single integer element",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports multiple string elements {min: true}",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports multiple string elements {min: false}",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports multiple integer elements {min: true}",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports multiple integer elements {min: false}",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports object elements {min: true}",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports object elements {min: false}",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports React elements {min: true}",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports React elements {min: false}",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "Immutable.Set",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "supports an empty collection {min: true}",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports an empty collection {min: false}",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports a single string element",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports a single integer element",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports multiple string elements {min: true}",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports multiple string elements {min: false}",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports multiple integer elements {min: true}",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports multiple integer elements {min: false}",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports object elements {min: true}",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports object elements {min: false}",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports React elements {min: true}",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports React elements {min: false}",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "Immutable.Map",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "supports an empty collection {min: true}",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports an empty collection {min: false}",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports an object with single key",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports an object with multiple keys {min: true}",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports an object with multiple keys {min: false}",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports object elements {min: true}",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports object elements {min: false}",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports React elements {min: true}",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports React elements {min: false}",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "Immutable.OrderedMap",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "supports an empty collection {min: true}",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports an empty collection {min: false}",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports an object with single key",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports an object with multiple keys {min: true}",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports an object with multiple keys {min: false}",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports object elements {min: true}",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports object elements {min: false}",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports React elements {min: true}",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports React elements {min: false}",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports non-string keys",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
          ],
        },
        TestGroupResult {
          "name": "Immutable.Record",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "supports an empty record {min: true}",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports an empty record {min: false}",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports a record with descriptive name",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports a record without descriptive name",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports a record with values {min: true}",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports a record with values {min: false}",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports a record with Map value {min: true}",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports a record with Map value {min: false}",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports imbricated Record {min: true}",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports imbricated Record {min: false}",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "indentation of heterogeneous collections",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "empty Immutable.List as child of Object",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "empty Immutable.Map as child of Array",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "non-empty Array as child of Immutable.Map",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "non-empty Object as child of Immutable.List",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "indent option",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "default implicit: 2 spaces",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "default explicit: 2 spaces",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "non-default: 0 spaces",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "non-default: 4 spaces",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "maxDepth option",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "Immutable.List as child of Object",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "Immutable.Map as child of Array",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "Immutable.Seq as child of Immutable.Map",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "Immutable.Map as descendants in immutable collection",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "Immutable.Seq",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "supports an empty sequence from array {min: true}",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports an empty sequence from array {min: false}",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports a non-empty sequence from array {min: true}",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports a non-empty sequence from array {min: false}",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports a non-empty sequence from arguments",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports an empty sequence from object {min: true}",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports an empty sequence from object {min: false}",
              "output": undefined,
              "result": "success",
              "time": 14,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports a non-empty sequence from object {min: true}",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports a non-empty sequence from object {min: false}",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports a sequence of entries from Immutable.Map",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports a sequence of values from ECMAScript Set",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports a sequence of values from Immutable.List",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports a sequence of values from Immutable.Set",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports a sequence of values from Immutable.Stack",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "Immutable.Seq lazy entries",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "from object properties",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "from Immutable.Map entries",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "Immutable.Seq lazy values",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "from Immutable.Range",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "from iterator",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "from array items",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "from Immutable.List values",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "from ECMAScript Set values",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "packages/pretty-format/src/__tests__/Immutable.test.ts",
      "output": undefined,
      "totalTime": 443,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "Runtime requireModule",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "installs source maps if available",
              "output": undefined,
              "result": "success",
              "time": 560,
            },
          ],
        },
      ],
      "name": "packages/jest-runtime/src/__tests__/Runtime-sourceMaps.test.js",
      "output": undefined,
      "totalTime": 584,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "JSDomEnvironment",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should configure setTimeout/setInterval to use the browser api",
              "output": undefined,
              "result": "success",
              "time": 47,
            },
            TestCaseResult {
              "error": undefined,
              "name": "has modern fake timers implementation",
              "output": undefined,
              "result": "success",
              "time": 19,
            },
          ],
        },
      ],
      "name": "packages/jest-environment-jsdom/src/__tests__/jsdom_environment.test.ts",
      "output": undefined,
      "totalTime": 783,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "babel-plugin-jest-hoist",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "automatic react runtime",
              "output": undefined,
              "result": "success",
              "time": 102,
            },
            TestCaseResult {
              "error": undefined,
              "name": "top level mocking",
              "output": undefined,
              "result": "success",
              "time": 18,
            },
            TestCaseResult {
              "error": undefined,
              "name": "within a block",
              "output": undefined,
              "result": "success",
              "time": 10,
            },
            TestCaseResult {
              "error": undefined,
              "name": "within a block with no siblings",
              "output": undefined,
              "result": "success",
              "time": 7,
            },
          ],
        },
      ],
      "name": "packages/babel-plugin-jest-hoist/src/__tests__/hoistPlugin.test.ts",
      "output": undefined,
      "totalTime": 347,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "passes fork options down to child_process.fork, adding the defaults",
              "output": undefined,
              "result": "success",
              "time": 26,
            },
            TestCaseResult {
              "error": undefined,
              "name": "passes workerId to the child process and assign it to 1-indexed env.JEST_WORKER_ID",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "initializes the child process with the given workerPath",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "stops initializing the worker after the amount of retries is exceeded",
              "output": undefined,
              "result": "success",
              "time": 25,
            },
            TestCaseResult {
              "error": undefined,
              "name": "provides stdout and stderr from the child processes",
              "output": undefined,
              "result": "success",
              "time": 5,
            },
            TestCaseResult {
              "error": undefined,
              "name": "sends the task to the child process",
              "output": undefined,
              "result": "success",
              "time": 10,
            },
            TestCaseResult {
              "error": undefined,
              "name": "resends the task to the child process after a retry",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls the onProcessStart method synchronously if the queue is empty",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "can send multiple messages to parent",
              "output": undefined,
              "result": "success",
              "time": 3,
            },
            TestCaseResult {
              "error": undefined,
              "name": "creates error instances for known errors",
              "output": undefined,
              "result": "success",
              "time": 3,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws when the child process returns a strange message",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not restart the child if it cleanly exited",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "resolves waitForExit() after the child process cleanly exited",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "restarts the child when the child process dies",
              "output": undefined,
              "result": "success",
              "time": 13,
            },
            TestCaseResult {
              "error": undefined,
              "name": "sends SIGTERM when forceExit() is called",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "sends SIGKILL some time after SIGTERM",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not send SIGKILL if SIGTERM exited the process",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
          ],
        },
      ],
      "name": "packages/jest-worker/src/workers/__tests__/ChildProcessWorker.test.js",
      "output": undefined,
      "totalTime": 184,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "jest-each .test",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "throws an error when not called with an array",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws an error when called with an empty array",
              "output": undefined,
              "result": "success",
              "time": 9,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title when multiple tests cases exist",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing param values when using printf format",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not call global test with title containing more param values than sprintf placeholders",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global test title with %p placeholder injected at the correct positions",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not calls global test title with %p placeholder when no data is supplied at given position",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with cb function containing all parameters of each test case when given 1d array",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with cb function containing all parameters of each test case 2d array",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given timeout",
              "output": undefined,
              "result": "success",
              "time": 4,
            },
          ],
        },
        TestGroupResult {
          "name": "jest-each .test.concurrent",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "throws an error when not called with an array",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws an error when called with an empty array",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title when multiple tests cases exist",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing param values when using printf format",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not call global test with title containing more param values than sprintf placeholders",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global test title with %p placeholder injected at the correct positions",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not calls global test title with %p placeholder when no data is supplied at given position",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with cb function containing all parameters of each test case when given 1d array",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with cb function containing all parameters of each test case 2d array",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given timeout",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "jest-each .test.concurrent.only",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "throws an error when not called with an array",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws an error when called with an empty array",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title when multiple tests cases exist",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing param values when using printf format",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not call global test with title containing more param values than sprintf placeholders",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global test title with %p placeholder injected at the correct positions",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not calls global test title with %p placeholder when no data is supplied at given position",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with cb function containing all parameters of each test case when given 1d array",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with cb function containing all parameters of each test case 2d array",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given timeout",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "jest-each .test.concurrent.skip",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "throws an error when not called with an array",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws an error when called with an empty array",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title when multiple tests cases exist",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing param values when using printf format",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not call global test with title containing more param values than sprintf placeholders",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global test title with %p placeholder injected at the correct positions",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not calls global test title with %p placeholder when no data is supplied at given position",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with cb function containing all parameters of each test case when given 1d array",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with cb function containing all parameters of each test case 2d array",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given timeout",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title when multiple tests cases exist",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing param values when using sprintf format",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title with placeholder values correctly interpolated",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "jest-each .test.only",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "throws an error when not called with an array",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws an error when called with an empty array",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title",
              "output": undefined,
              "result": "success",
              "time": 6,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title when multiple tests cases exist",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing param values when using printf format",
              "output": undefined,
              "result": "success",
              "time": 4,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not call global test with title containing more param values than sprintf placeholders",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global test title with %p placeholder injected at the correct positions",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not calls global test title with %p placeholder when no data is supplied at given position",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with cb function containing all parameters of each test case when given 1d array",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with cb function containing all parameters of each test case 2d array",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given timeout",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "jest-each .it",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "throws an error when not called with an array",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws an error when called with an empty array",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title when multiple tests cases exist",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing param values when using printf format",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not call global test with title containing more param values than sprintf placeholders",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global test title with %p placeholder injected at the correct positions",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not calls global test title with %p placeholder when no data is supplied at given position",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with cb function containing all parameters of each test case when given 1d array",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with cb function containing all parameters of each test case 2d array",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given timeout",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "jest-each .fit",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "throws an error when not called with an array",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws an error when called with an empty array",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title when multiple tests cases exist",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing param values when using printf format",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not call global test with title containing more param values than sprintf placeholders",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global test title with %p placeholder injected at the correct positions",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not calls global test title with %p placeholder when no data is supplied at given position",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with cb function containing all parameters of each test case when given 1d array",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with cb function containing all parameters of each test case 2d array",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given timeout",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "jest-each .it.only",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "throws an error when not called with an array",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws an error when called with an empty array",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title when multiple tests cases exist",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing param values when using printf format",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not call global test with title containing more param values than sprintf placeholders",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global test title with %p placeholder injected at the correct positions",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not calls global test title with %p placeholder when no data is supplied at given position",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with cb function containing all parameters of each test case when given 1d array",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with cb function containing all parameters of each test case 2d array",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given timeout",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "jest-each .describe",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "throws an error when not called with an array",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws an error when called with an empty array",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title",
              "output": undefined,
              "result": "success",
              "time": 3,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title when multiple tests cases exist",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing param values when using printf format",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not call global test with title containing more param values than sprintf placeholders",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global test title with %p placeholder injected at the correct positions",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not calls global test title with %p placeholder when no data is supplied at given position",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with cb function containing all parameters of each test case when given 1d array",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with cb function containing all parameters of each test case 2d array",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given timeout",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "jest-each .fdescribe",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "throws an error when not called with an array",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws an error when called with an empty array",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title when multiple tests cases exist",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing param values when using printf format",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not call global test with title containing more param values than sprintf placeholders",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global test title with %p placeholder injected at the correct positions",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not calls global test title with %p placeholder when no data is supplied at given position",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with cb function containing all parameters of each test case when given 1d array",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with cb function containing all parameters of each test case 2d array",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given timeout",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "jest-each .describe.only",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "throws an error when not called with an array",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws an error when called with an empty array",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title when multiple tests cases exist",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing param values when using printf format",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not call global test with title containing more param values than sprintf placeholders",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global test title with %p placeholder injected at the correct positions",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not calls global test title with %p placeholder when no data is supplied at given position",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with cb function containing all parameters of each test case when given 1d array",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with cb function containing all parameters of each test case 2d array",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given timeout",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "jest-each done callback",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "calls [ 'test' ] with done when cb function has more args than params of given test row",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls [ 'test', 'only' ] with done when cb function has more args than params of given test row",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls [ 'test', 'concurrent' ] with done when cb function has more args than params of given test row",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls [ 'test', 'concurrent', 'only' ] with done when cb function has more args than params of given test row",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls [ 'it' ] with done when cb function has more args than params of given test row",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls [ 'fit' ] with done when cb function has more args than params of given test row",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls [ 'it', 'only' ] with done when cb function has more args than params of given test row",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not call [ 'describe' ] with done when test function has more args than params of given test row",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not call [ 'fdescribe' ] with done when test function has more args than params of given test row",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not call [ 'describe', 'only' ] with done when test function has more args than params of given test row",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "jest-each .xtest",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title when multiple tests cases exist",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing param values when using sprintf format",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title with placeholder values correctly interpolated",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "jest-each .test.skip",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title",
              "output": undefined,
              "result": "success",
              "time": 6,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title when multiple tests cases exist",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing param values when using sprintf format",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title with placeholder values correctly interpolated",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "jest-each .xit",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title when multiple tests cases exist",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing param values when using sprintf format",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title with placeholder values correctly interpolated",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "jest-each .it.skip",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title when multiple tests cases exist",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing param values when using sprintf format",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title with placeholder values correctly interpolated",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "jest-each .xdescribe",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title when multiple tests cases exist",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing param values when using sprintf format",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title with placeholder values correctly interpolated",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "jest-each .describe.skip",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title when multiple tests cases exist",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing param values when using sprintf format",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title with placeholder values correctly interpolated",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "packages/jest-each/src/__tests__/array.test.ts",
      "output": undefined,
      "totalTime": 192,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "jest-each .test",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "throws error when there are additional words in first column heading",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws error when there are additional words in second column heading",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws error when there are additional words in last column heading",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not throw error when there is additional words in template after heading row",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not throw error when there is only one column",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not throw error when there is only one column with additional words in template after heading",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws error when there are no arguments for given headings",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws error when there are fewer arguments than headings when given one row",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws error when there are fewer arguments than headings over multiple rows",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws an error when called with an empty string",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title when multiple tests cases exist",
              "output": undefined,
              "result": "success",
              "time": 5,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing param values when using $variable format",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing $key in multiple positions",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing $key.path",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing last seen object when $key.path is invalid",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with cb function with object built from table headings and values",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given timeout",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "formats primitive values using .toString()",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "jest-each .test.concurrent",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "throws error when there are additional words in first column heading",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws error when there are additional words in second column heading",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws error when there are additional words in last column heading",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not throw error when there is additional words in template after heading row",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not throw error when there is only one column",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not throw error when there is only one column with additional words in template after heading",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws error when there are no arguments for given headings",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws error when there are fewer arguments than headings when given one row",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws error when there are fewer arguments than headings over multiple rows",
              "output": undefined,
              "result": "success",
              "time": 33,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws an error when called with an empty string",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title when multiple tests cases exist",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing param values when using $variable format",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing $key in multiple positions",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing $key.path",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing last seen object when $key.path is invalid",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with cb function with object built from table headings and values",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given timeout",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "formats primitive values using .toString()",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title when multiple tests cases exist",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing param values when using $variable format",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "jest-each .test.concurrent.only",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "throws error when there are additional words in first column heading",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws error when there are additional words in second column heading",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws error when there are additional words in last column heading",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not throw error when there is additional words in template after heading row",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not throw error when there is only one column",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not throw error when there is only one column with additional words in template after heading",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws error when there are no arguments for given headings",
              "output": undefined,
              "result": "success",
              "time": 12,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws error when there are fewer arguments than headings when given one row",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws error when there are fewer arguments than headings over multiple rows",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws an error when called with an empty string",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title when multiple tests cases exist",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing param values when using $variable format",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing $key in multiple positions",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing $key.path",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing last seen object when $key.path is invalid",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with cb function with object built from table headings and values",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given timeout",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "formats primitive values using .toString()",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "jest-each .test.concurrent.skip",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "throws error when there are additional words in first column heading",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws error when there are additional words in second column heading",
              "output": undefined,
              "result": "success",
              "time": 6,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws error when there are additional words in last column heading",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not throw error when there is additional words in template after heading row",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not throw error when there is only one column",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not throw error when there is only one column with additional words in template after heading",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws error when there are no arguments for given headings",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws error when there are fewer arguments than headings when given one row",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws error when there are fewer arguments than headings over multiple rows",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws an error when called with an empty string",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title when multiple tests cases exist",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing param values when using $variable format",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing $key in multiple positions",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing $key.path",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing last seen object when $key.path is invalid",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with cb function with object built from table headings and values",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given timeout",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "formats primitive values using .toString()",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title when multiple tests cases exist",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing param values when using $variable format",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "jest-each .test.only",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "throws error when there are additional words in first column heading",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws error when there are additional words in second column heading",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws error when there are additional words in last column heading",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not throw error when there is additional words in template after heading row",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not throw error when there is only one column",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not throw error when there is only one column with additional words in template after heading",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws error when there are no arguments for given headings",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws error when there are fewer arguments than headings when given one row",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws error when there are fewer arguments than headings over multiple rows",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws an error when called with an empty string",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title when multiple tests cases exist",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing param values when using $variable format",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing $key in multiple positions",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing $key.path",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing last seen object when $key.path is invalid",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with cb function with object built from table headings and values",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given timeout",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "formats primitive values using .toString()",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "jest-each .it",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "throws error when there are additional words in first column heading",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws error when there are additional words in second column heading",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws error when there are additional words in last column heading",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not throw error when there is additional words in template after heading row",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not throw error when there is only one column",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not throw error when there is only one column with additional words in template after heading",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws error when there are no arguments for given headings",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws error when there are fewer arguments than headings when given one row",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws error when there are fewer arguments than headings over multiple rows",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws an error when called with an empty string",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title when multiple tests cases exist",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing param values when using $variable format",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing $key in multiple positions",
              "output": undefined,
              "result": "success",
              "time": 5,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing $key.path",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing last seen object when $key.path is invalid",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with cb function with object built from table headings and values",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given timeout",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "formats primitive values using .toString()",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "jest-each .fit",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "throws error when there are additional words in first column heading",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws error when there are additional words in second column heading",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws error when there are additional words in last column heading",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not throw error when there is additional words in template after heading row",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not throw error when there is only one column",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not throw error when there is only one column with additional words in template after heading",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws error when there are no arguments for given headings",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws error when there are fewer arguments than headings when given one row",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws error when there are fewer arguments than headings over multiple rows",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws an error when called with an empty string",
              "output": undefined,
              "result": "success",
              "time": 3,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title when multiple tests cases exist",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing param values when using $variable format",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing $key in multiple positions",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing $key.path",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing last seen object when $key.path is invalid",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with cb function with object built from table headings and values",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given timeout",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "formats primitive values using .toString()",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "jest-each .it.only",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "throws error when there are additional words in first column heading",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws error when there are additional words in second column heading",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws error when there are additional words in last column heading",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not throw error when there is additional words in template after heading row",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not throw error when there is only one column",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not throw error when there is only one column with additional words in template after heading",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws error when there are no arguments for given headings",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws error when there are fewer arguments than headings when given one row",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws error when there are fewer arguments than headings over multiple rows",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws an error when called with an empty string",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title when multiple tests cases exist",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing param values when using $variable format",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing $key in multiple positions",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing $key.path",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing last seen object when $key.path is invalid",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with cb function with object built from table headings and values",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given timeout",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "formats primitive values using .toString()",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "jest-each .describe",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "throws error when there are additional words in first column heading",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws error when there are additional words in second column heading",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws error when there are additional words in last column heading",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not throw error when there is additional words in template after heading row",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not throw error when there is only one column",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not throw error when there is only one column with additional words in template after heading",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws error when there are no arguments for given headings",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws error when there are fewer arguments than headings when given one row",
              "output": undefined,
              "result": "success",
              "time": 28,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws error when there are fewer arguments than headings over multiple rows",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws an error when called with an empty string",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title when multiple tests cases exist",
              "output": undefined,
              "result": "success",
              "time": 4,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing param values when using $variable format",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing $key in multiple positions",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing $key.path",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing last seen object when $key.path is invalid",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with cb function with object built from table headings and values",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given timeout",
              "output": undefined,
              "result": "success",
              "time": 17,
            },
            TestCaseResult {
              "error": undefined,
              "name": "formats primitive values using .toString()",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "jest-each .fdescribe",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "throws error when there are additional words in first column heading",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws error when there are additional words in second column heading",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws error when there are additional words in last column heading",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not throw error when there is additional words in template after heading row",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not throw error when there is only one column",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not throw error when there is only one column with additional words in template after heading",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws error when there are no arguments for given headings",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws error when there are fewer arguments than headings when given one row",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws error when there are fewer arguments than headings over multiple rows",
              "output": undefined,
              "result": "success",
              "time": 51,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws an error when called with an empty string",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title when multiple tests cases exist",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing param values when using $variable format",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing $key in multiple positions",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing $key.path",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing last seen object when $key.path is invalid",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with cb function with object built from table headings and values",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given timeout",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "formats primitive values using .toString()",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "jest-each .describe.only",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "throws error when there are additional words in first column heading",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws error when there are additional words in second column heading",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws error when there are additional words in last column heading",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not throw error when there is additional words in template after heading row",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not throw error when there is only one column",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not throw error when there is only one column with additional words in template after heading",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws error when there are no arguments for given headings",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws error when there are fewer arguments than headings when given one row",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws error when there are fewer arguments than headings over multiple rows",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws an error when called with an empty string",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title when multiple tests cases exist",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing param values when using $variable format",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing $key in multiple positions",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing $key.path",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing last seen object when $key.path is invalid",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with cb function with object built from table headings and values",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given timeout",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "formats primitive values using .toString()",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "jest-each done callback",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "calls [ 'test' ] with done when cb function has more args than params of given test row",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls [ 'test', 'only' ] with done when cb function has more args than params of given test row",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls [ 'test', 'concurrent', 'only' ] with done when cb function has more args than params of given test row",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls [ 'it' ] with done when cb function has more args than params of given test row",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls [ 'fit' ] with done when cb function has more args than params of given test row",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls [ 'it', 'only' ] with done when cb function has more args than params of given test row",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not call [ 'describe' ] with done when test function has more args than params of given test row",
              "output": undefined,
              "result": "success",
              "time": 7,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not call [ 'fdescribe' ] with done when test function has more args than params of given test row",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not call [ 'describe', 'only' ] with done when test function has more args than params of given test row",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "jest-each .xtest",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title when multiple tests cases exist",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing param values when using $variable format",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "jest-each .test.skip",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title when multiple tests cases exist",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing param values when using $variable format",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "jest-each .xit",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title when multiple tests cases exist",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing param values when using $variable format",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "jest-each .it.skip",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title when multiple tests cases exist",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing param values when using $variable format",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "jest-each .xdescribe",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title when multiple tests cases exist",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing param values when using $variable format",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "jest-each .describe.skip",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with given title when multiple tests cases exist",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls global with title containing param values when using $variable format",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
      ],
      "name": "packages/jest-each/src/__tests__/template.test.ts",
      "output": undefined,
      "totalTime": 483,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "supports a single element with no props or children",
              "output": undefined,
              "result": "success",
              "time": 5,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports a single element with non-empty string child",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports a single element with empty string child",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports a single element with non-zero number child",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports a single element with zero number child",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports a single element with mixed children",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports props with strings",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports props with multiline strings",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports props with numbers",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports a single element with a function prop",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports a single element with a object prop",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports an element with and object prop and children",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports an element with complex props and mixed children",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "escapes children properly",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports everything all together",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "sorts props in nested components",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports a single element with React elements as props",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports a single element with React elements with props",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports a single element with custom React elements with props",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports a single element with custom React elements with props (using displayName)",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports a single element with custom React elements with props (using anonymous function)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports a single element with custom React elements with a child",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports undefined element type",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports a fragment with no children",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports a fragment with string child",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports a fragment with element child",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports suspense",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports a single element with React elements with a child",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports a single element with React elements with children",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports a single element with React elements with array children",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports array of elements",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "min option",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "ReactElement plugin highlights syntax",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "ReactTestComponent plugin highlights syntax",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws if theme option is null",
              "output": undefined,
              "result": "success",
              "time": 50,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws if theme option is not of type \\"object\\"",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws if theme option has value that is undefined in ansi-styles",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "ReactElement plugin highlights syntax with color from theme option",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "ReactTestComponent plugin highlights syntax with color from theme option",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports forwardRef with a child",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports context Provider with a child",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports context Consumer with a child",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "ReactElement removes undefined props",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "ReactTestComponent removes undefined props",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "test object for subset match",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "undefined props",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "undefined children",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "indent option",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "default implicit: 2 spaces",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "default explicit: 2 spaces",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "non-default: 0 spaces",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "non-default: 4 spaces",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "maxDepth option",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "elements",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "array of elements",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "React.memo without displayName",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "renders the component name",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "React.memo with displayName",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "renders the displayName of component before memoizing",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "renders the displayName of memoized component",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "packages/pretty-format/src/__tests__/react.test.tsx",
      "output": undefined,
      "totalTime": 325,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "tests are not marked done until their parent afterAll runs",
              "output": undefined,
              "result": "success",
              "time": 2231,
            },
            TestCaseResult {
              "error": undefined,
              "name": "describe block cannot have hooks and no tests",
              "output": undefined,
              "result": "success",
              "time": 697,
            },
            TestCaseResult {
              "error": undefined,
              "name": "describe block _can_ have hooks if a child describe block has tests",
              "output": undefined,
              "result": "success",
              "time": 650,
            },
            TestCaseResult {
              "error": undefined,
              "name": "describe block hooks must not run if describe block is skipped",
              "output": undefined,
              "result": "success",
              "time": 599,
            },
            TestCaseResult {
              "error": undefined,
              "name": "child tests marked with todo should not run if describe block is skipped",
              "output": undefined,
              "result": "success",
              "time": 677,
            },
            TestCaseResult {
              "error": undefined,
              "name": "child tests marked with only should not run if describe block is skipped",
              "output": undefined,
              "result": "success",
              "time": 724,
            },
          ],
        },
      ],
      "name": "packages/jest-circus/src/__tests__/afterAll.test.ts",
      "output": undefined,
      "totalTime": 5755,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "prettyFormat()",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "prints empty arguments",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints arguments",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints an empty array",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints an array with items",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints a empty typed array",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints a typed array with items",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints an array buffer",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints a nested array",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints true",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints false",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints an error",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints a typed error with a message",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints a function constructor",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints an anonymous callback function",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints an anonymous assigned function",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints a named function",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints a named generator function",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "can customize function names",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints Infinity",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints -Infinity",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints an empty map",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints a map with values",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints a map with non-string keys",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints NaN",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints null",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints a positive number",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints a negative number",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints zero",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints negative zero",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints a positive bigint",
              "output": undefined,
              "result": "success",
              "time": 7,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints a negative bigint",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints zero bigint",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints negative zero bigint",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints a date",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints an invalid date",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints an empty object",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints an object with properties",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints an object with properties and symbols",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints an object without non-enumerable properties which have string key",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints an object without non-enumerable properties which have symbol key",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints an object with sorted properties",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints regular expressions from constructors",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints regular expressions from literals",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints regular expressions {escapeRegex: false}",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints regular expressions {escapeRegex: true}",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "escapes regular expressions nested inside object",
              "output": undefined,
              "result": "success",
              "time": 4,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints an empty set",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints a set with values",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints a string",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints and escape a string",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "doesn't escape string with {excapeString: false}",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints a string with escapes",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints a multiline string",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints a multiline string as value of object property",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints a symbol",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints undefined",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints a WeakMap",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints a WeakSet",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints deeply nested objects",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints circular references",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints parallel references",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "can customize the max depth",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws on invalid options",
              "output": undefined,
              "result": "success",
              "time": 32,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports plugins",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports plugins that return empty string",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws if plugin does not return a string",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws PrettyFormatPluginError if test throws an error",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws PrettyFormatPluginError if print throws an error",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws PrettyFormatPluginError if serialize throws an error",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports plugins with deeply nested arrays (#24)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should call plugins on nested basic values",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints objects with no constructor",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints identity-obj-proxy with string constructor",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls toJSON and prints its return value",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls toJSON and prints an internal representation.",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls toJSON only on functions",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not call toJSON recursively",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls toJSON on Sets",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "disables toJSON calls through options",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "prettyFormat() indent option",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "default implicit: 2 spaces",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "default explicit: 2 spaces",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "non-default: 0 spaces",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "non-default: 4 spaces",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "prettyFormat() min",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "prints some basic values in min mode",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints some complex values in min mode",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not allow indent !== 0 in min mode",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
      ],
      "name": "packages/pretty-format/src/__tests__/prettyFormat.test.ts",
      "output": undefined,
      "totalTime": 219,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "Farm",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "sends a request to one worker",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "sends four requests to four unique workers",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "handles null computeWorkerKey, sending to first worker",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "sends the same worker key to the same worker",
              "output": undefined,
              "result": "success",
              "time": 9,
            },
            TestCaseResult {
              "error": undefined,
              "name": "returns the result if the call worked",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws if the call failed",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "checks that once a sticked task finishes, next time is sent to that worker",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "checks that even before a sticked task finishes, next time is sent to that worker",
              "output": undefined,
              "result": "success",
              "time": 8,
            },
            TestCaseResult {
              "error": undefined,
              "name": "checks that locking works, and jobs are never lost",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "can receive custom messages from workers",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "packages/jest-worker/src/__tests__/Farm.test.js",
      "output": undefined,
      "totalTime": 158,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "lazily requires the file",
              "output": undefined,
              "result": "success",
              "time": 26,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls initialize with the correct arguments",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "returns results immediately when function is synchronous",
              "output": undefined,
              "result": "success",
              "time": 15,
            },
            TestCaseResult {
              "error": undefined,
              "name": "returns results when it gets resolved if function is asynchronous",
              "output": undefined,
              "result": "success",
              "time": 22,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls the main module if the method call is \\"default\\"",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls the main export if the method call is \\"default\\" and it is a Babel transpiled one",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "removes the message listener on END message",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls the teardown method",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws if an invalid message is detected",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws if child is not forked",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
      ],
      "name": "packages/jest-worker/src/workers/__tests__/threadChild.test.js",
      "output": undefined,
      "totalTime": 120,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "queueRunner",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "runs every function in the queue.",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "exposes \`fail\` to \`next\`.",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "passes errors to \`onException\`.",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "passes an error to \`onException\` on timeout.",
              "output": undefined,
              "result": "success",
              "time": 4,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls \`fail\` with arguments",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls \`fail\` when done(error) is invoked",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "packages/jest-jasmine2/src/__tests__/queueRunner.test.ts",
      "output": undefined,
      "totalTime": 93,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "passes fork options down to child_process.fork, adding the defaults",
              "output": undefined,
              "result": "success",
              "time": 67,
            },
            TestCaseResult {
              "error": undefined,
              "name": "passes workerId to the thread and assign it to env.JEST_WORKER_ID",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "initializes the thread with the given workerPath",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "stops initializing the worker after the amount of retries is exceeded",
              "output": undefined,
              "result": "success",
              "time": 26,
            },
            TestCaseResult {
              "error": undefined,
              "name": "provides stdout and stderr from the threads",
              "output": undefined,
              "result": "success",
              "time": 5,
            },
            TestCaseResult {
              "error": undefined,
              "name": "sends the task to the thread",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "resends the task to the thread after a retry",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls the onProcessStart method synchronously if the queue is empty",
              "output": undefined,
              "result": "success",
              "time": 4,
            },
            TestCaseResult {
              "error": undefined,
              "name": "can send multiple messages to parent",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "creates error instances for known errors",
              "output": undefined,
              "result": "success",
              "time": 5,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws when the thread returns a strange message",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not restart the thread if it cleanly exited",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "resolves waitForExit() after the thread cleanly exited",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "restarts the thread when the thread dies",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "terminates the thread when forceExit() is called",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "packages/jest-worker/src/workers/__tests__/NodeThreadsWorker.test.js",
      "output": undefined,
      "totalTime": 258,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "lazily requires the file",
              "output": undefined,
              "result": "success",
              "time": 28,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls initialize with the correct arguments",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "returns results immediately when function is synchronous",
              "output": undefined,
              "result": "success",
              "time": 13,
            },
            TestCaseResult {
              "error": undefined,
              "name": "returns results when it gets resolved if function is asynchronous",
              "output": undefined,
              "result": "success",
              "time": 23,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls the main module if the method call is \\"default\\"",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls the main export if the method call is \\"default\\" and it is a Babel transpiled one",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "removes the message listener on END message",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls the teardown method",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws if an invalid message is detected",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws if child is not forked",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
      ],
      "name": "packages/jest-worker/src/workers/__tests__/processChild.test.js",
      "output": undefined,
      "totalTime": 135,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "injects the serializable module map into each worker in watch mode",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "assign process.env.JEST_WORKER_ID = 1 when in runInBand mode",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
      ],
      "name": "packages/jest-runner/src/__tests__/testRunner.test.ts",
      "output": undefined,
      "totalTime": 905,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "beforeEach hooks error throwing",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "beforeEach throws an error when \\"String\\" is provided as a first argument to it",
              "output": undefined,
              "result": "success",
              "time": 19,
            },
            TestCaseResult {
              "error": undefined,
              "name": "beforeEach throws an error when 1 is provided as a first argument to it",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "beforeEach throws an error when [] is provided as a first argument to it",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "beforeEach throws an error when {} is provided as a first argument to it",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "beforeEach throws an error when Symbol(hello) is provided as a first argument to it",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "beforeEach throws an error when true is provided as a first argument to it",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "beforeEach throws an error when null is provided as a first argument to it",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "beforeEach throws an error when undefined is provided as a first argument to it",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "beforeAll hooks error throwing",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "beforeAll throws an error when \\"String\\" is provided as a first argument to it",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "beforeAll throws an error when 1 is provided as a first argument to it",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "beforeAll throws an error when [] is provided as a first argument to it",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "beforeAll throws an error when {} is provided as a first argument to it",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "beforeAll throws an error when Symbol(hello) is provided as a first argument to it",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "beforeAll throws an error when true is provided as a first argument to it",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "beforeAll throws an error when null is provided as a first argument to it",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "beforeAll throws an error when undefined is provided as a first argument to it",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "afterEach hooks error throwing",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "afterEach throws an error when \\"String\\" is provided as a first argument to it",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "afterEach throws an error when 1 is provided as a first argument to it",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "afterEach throws an error when [] is provided as a first argument to it",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "afterEach throws an error when {} is provided as a first argument to it",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "afterEach throws an error when Symbol(hello) is provided as a first argument to it",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "afterEach throws an error when true is provided as a first argument to it",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "afterEach throws an error when null is provided as a first argument to it",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "afterEach throws an error when undefined is provided as a first argument to it",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "afterAll hooks error throwing",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "afterAll throws an error when \\"String\\" is provided as a first argument to it",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "afterAll throws an error when 1 is provided as a first argument to it",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "afterAll throws an error when [] is provided as a first argument to it",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "afterAll throws an error when {} is provided as a first argument to it",
              "output": undefined,
              "result": "success",
              "time": 3,
            },
            TestCaseResult {
              "error": undefined,
              "name": "afterAll throws an error when Symbol(hello) is provided as a first argument to it",
              "output": undefined,
              "result": "success",
              "time": 5,
            },
            TestCaseResult {
              "error": undefined,
              "name": "afterAll throws an error when true is provided as a first argument to it",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "afterAll throws an error when null is provided as a first argument to it",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "afterAll throws an error when undefined is provided as a first argument to it",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "packages/jest-circus/src/__tests__/hooksError.test.ts",
      "output": undefined,
      "totalTime": 127,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "Using V8 implementation",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "throws the error with an invalid serialization",
              "output": undefined,
              "result": "success",
              "time": 6,
            },
          ],
        },
        TestGroupResult {
          "name": "Using V8 implementation Object 0",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "serializes/deserializes in memory",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "serializes/deserializes in disk",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "Using V8 implementation Object 1",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "serializes/deserializes in memory",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "serializes/deserializes in disk",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "Using V8 implementation Object 2",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "serializes/deserializes in memory",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "serializes/deserializes in disk",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "Using V8 implementation Object 3",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "serializes/deserializes in memory",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "serializes/deserializes in disk",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "Using V8 implementation Object 4",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "serializes/deserializes in memory",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "serializes/deserializes in disk",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "Using V8 implementation Object 5",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "serializes/deserializes in memory",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "serializes/deserializes in disk",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "Using V8 implementation Object 6",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "serializes/deserializes in memory",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "serializes/deserializes in disk",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "Using V8 implementation Object 7",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "serializes/deserializes in memory",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "serializes/deserializes in disk",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "packages/jest-serializer/src/__tests__/index.test.ts",
      "output": undefined,
      "totalTime": 158,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "CustomConsole assert",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "do not log when the assertion is truthy",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "do not log when the assertion is truthy and there is a message",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "log the assertion error when the assertion is falsy",
              "output": undefined,
              "result": "success",
              "time": 33,
            },
            TestCaseResult {
              "error": undefined,
              "name": "log the assertion error when the assertion is falsy with another message argument",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "CustomConsole count",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "count using the default counter",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "count using the a labeled counter",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "countReset restarts default counter",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "countReset restarts custom counter",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "CustomConsole group",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "group without label",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "group with label",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "groupEnd remove the indentation of the current group",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "groupEnd can not remove the indentation below the starting point",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "CustomConsole time",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should return the time between time() and timeEnd() on default timer",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should return the time between time() and timeEnd() on custom timer",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "CustomConsole dir",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should print the deepest value",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
          ],
        },
        TestGroupResult {
          "name": "CustomConsole timeLog",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should return the time between time() and timeEnd() on default timer",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should return the time between time() and timeEnd() on custom timer",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "default timer with data",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "custom timer with data",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "CustomConsole console",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should be able to initialize console instance",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "packages/jest-console/src/__tests__/bufferedConsole.test.ts",
      "output": undefined,
      "totalTime": 171,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "CustomConsole log",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should print to stdout",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "CustomConsole error",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should print to stderr",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "CustomConsole warn",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should print to stderr",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "CustomConsole assert",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "do not log when the assertion is truthy",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "do not log when the assertion is truthy and there is a message",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "log the assertion error when the assertion is falsy",
              "output": undefined,
              "result": "success",
              "time": 18,
            },
            TestCaseResult {
              "error": undefined,
              "name": "log the assertion error when the assertion is falsy with another message argument",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "CustomConsole count",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "count using the default counter",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "count using the a labeled counter",
              "output": undefined,
              "result": "success",
              "time": 3,
            },
            TestCaseResult {
              "error": undefined,
              "name": "countReset restarts default counter",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "countReset restarts custom counter",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "CustomConsole group",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "group without label",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "group with label",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "groupEnd remove the indentation of the current group",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "groupEnd can not remove the indentation below the starting point",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "CustomConsole time",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should return the time between time() and timeEnd() on default timer",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should return the time between time() and timeEnd() on custom timer",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "CustomConsole dir",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should print the deepest value",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "CustomConsole timeLog",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should return the time between time() and timeEnd() on default timer",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should return the time between time() and timeEnd() on custom timer",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "default timer with data",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "custom timer with data",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "CustomConsole console",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should be able to initialize console instance",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "packages/jest-console/src/__tests__/CustomConsole.test.ts",
      "output": undefined,
      "totalTime": 115,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "DOMCollection plugin for object properties",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "supports DOMStringMap",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports NamedNodeMap",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports config.min option",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "DOMCollection plugin for list items",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "supports HTMLCollection for getElementsByTagName",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports HTMLCollection for children",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports config.maxDepth option",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports NodeList for querySelectorAll",
              "output": undefined,
              "result": "success",
              "time": 4,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports NodeList for childNodes",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports HTMLOptionsCollection for select options",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports HTMLCollection for form elements",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
      ],
      "name": "packages/pretty-format/src/__tests__/DOMCollection.test.ts",
      "output": undefined,
      "totalTime": 64,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "test/it.todo error throwing",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "todo throws error when given no arguments",
              "output": undefined,
              "result": "success",
              "time": 35,
            },
            TestCaseResult {
              "error": undefined,
              "name": "todo throws error when given more than one argument",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "todo throws error when given none string description",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "packages/jest-circus/src/__tests__/circusItTodoTestError.test.ts",
      "output": undefined,
      "totalTime": 81,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "sorts by file size if there is no timing information",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "sorts based on timing information",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "sorts based on failures and timing information",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "sorts based on failures, timing information and file size",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "writes the cache based on results without existing cache",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "returns failed tests in sorted order",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "writes the cache based on the results",
              "output": undefined,
              "result": "success",
              "time": 13,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with multiple contexts",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "packages/jest-test-sequencer/src/__tests__/test_sequencer.test.js",
      "output": undefined,
      "totalTime": 251,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "Suite",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "doesn't throw on addExpectationResult when there are no children",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "packages/jest-jasmine2/src/__tests__/Suite.test.ts",
      "output": undefined,
      "totalTime": 84,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "supports any(String)",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports nested any(String)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports any(Function)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports nested any(Function)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports any(Array)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports nested any(Array)",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports any(Object)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports nested any(Object)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports any(RegExp)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports nested any(RegExp)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports any(Symbol)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports nested any(Symbol)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports any(Function)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports nested any(Function)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports any(<anonymous>)",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports nested any(<anonymous>)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports any(namedFuntction)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports nested any(namedFuntction)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "anything()",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "arrayContaining()",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "arrayNotContaining()",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "objectContaining()",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "objectNotContaining()",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "stringContaining(string)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "not.stringContaining(string)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "stringMatching(string)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "stringMatching(regexp)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "stringMatching(regexp) {escapeRegex: false}",
              "output": undefined,
              "result": "success",
              "time": 3,
            },
            TestCaseResult {
              "error": undefined,
              "name": "stringMatching(regexp) {escapeRegex: true}",
              "output": undefined,
              "result": "success",
              "time": 13,
            },
            TestCaseResult {
              "error": undefined,
              "name": "stringNotMatching(string)",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports multiple nested asymmetric matchers",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "min option",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "indent option",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "default implicit: 2 spaces",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "default explicit: 2 spaces",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "non-default: 0 spaces",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "non-default: 4 spaces",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "maxDepth option",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "matchers as leaf nodes",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "matchers as internal nodes",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
      ],
      "name": "packages/pretty-format/src/__tests__/AsymmetricMatcher.test.ts",
      "output": undefined,
      "totalTime": 137,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "ConvertAnsi plugin",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "supports style.red",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports style.green",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports style.reset",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports style.bold",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports style.dim",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not support other colors",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "packages/pretty-format/src/__tests__/ConvertAnsi.test.ts",
      "output": undefined,
      "totalTime": 43,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "getConsoleOutput",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "takes noStackTrace and pass it on for assert",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "takes noStackTrace and pass it on for count",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "takes noStackTrace and pass it on for debug",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "takes noStackTrace and pass it on for dir",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "takes noStackTrace and pass it on for dirxml",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "takes noStackTrace and pass it on for error",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "takes noStackTrace and pass it on for group",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "takes noStackTrace and pass it on for groupCollapsed",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "takes noStackTrace and pass it on for info",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "takes noStackTrace and pass it on for log",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "takes noStackTrace and pass it on for time",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "takes noStackTrace and pass it on for warn",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "packages/jest-console/src/__tests__/getConsoleOutput.test.ts",
      "output": undefined,
      "totalTime": 56,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "expectationResultFactory",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "returns the result if passed.",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "returns the result if failed.",
              "output": undefined,
              "result": "success",
              "time": 5,
            },
            TestCaseResult {
              "error": undefined,
              "name": "returns the result if failed (with \`message\`).",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "returns the result if failed (with \`error\`).",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "returns the error name if the error message is empty",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "returns the result if failed (with \`error\` as a string).",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "returns the result if failed (with \`error.stack\` not as a string).",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
      ],
      "name": "packages/jest-jasmine2/src/__tests__/expectationResultFactory.test.ts",
      "output": undefined,
      "totalTime": 70,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "array .add",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "returns the result of adding 0 to 0",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "returns the result of adding 0 to 1",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "returns the result of adding 1 to 1",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "concurrent .add",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "returns the result of adding 0 to 0",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "returns the result of adding 0 to 1",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "returns the result of adding 1 to 1",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "template .add",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "returns 0 when given 0 and 0",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "returns 1 when given 0 and 1",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "returns 2 when given 1 and 1",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "throws an error when not called with the right number of arguments",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "packages/jest-each/src/__tests__/index.test.ts",
      "output": undefined,
      "totalTime": 44,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "pretty-format",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "prints global window as constructor name alone",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "DOMElement Plugin",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "supports a single HTML element",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports an HTML element with a class property",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports an HTML element with a title property",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "escapes double quote in attribute value",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports an HTML element with a single attribute",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports an HTML element with multiple attributes",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports an HTML element with attribute and text content",
              "output": undefined,
              "result": "success",
              "time": 3,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports an element with text content",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports nested elements",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports nested elements with attributes",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports nested elements with attribute and text content",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports nested elements with text content",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports siblings",
              "output": undefined,
              "result": "success",
              "time": 4,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports multiline text node in pre",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports multiline text node preceding span in pre",
              "output": undefined,
              "result": "success",
              "time": 8,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports multiline text node in textarea",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports empty text node",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports non-empty text node",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports comment node",
              "output": undefined,
              "result": "success",
              "time": 3,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports fragment node",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports custom elements",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports SVG elements",
              "output": undefined,
              "result": "success",
              "time": 3,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports indentation for array of elements",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports maxDepth option",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "handles \`tagName\` not being a string",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "DOMElement Plugin matches constructor name of SVG elements",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "jsdom 9 and 10",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "jsdom 11",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "packages/pretty-format/src/__tests__/DOMElement.test.ts",
      "output": undefined,
      "totalTime": 148,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "formatTestResults",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "includes test full name",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
      ],
      "name": "packages/jest-test-result/src/__tests__/formatTestResults.test.ts",
      "output": undefined,
      "totalTime": 53,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "exposes the right API using default working",
              "output": undefined,
              "result": "success",
              "time": 85,
            },
            TestCaseResult {
              "error": undefined,
              "name": "exposes the right API using passed worker",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "breaks if any of the forbidden methods is tried to be exposed",
              "output": undefined,
              "result": "success",
              "time": 27,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with minimal options",
              "output": undefined,
              "result": "success",
              "time": 3,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not let make calls after the farm is ended",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not let end the farm after it is ended",
              "output": undefined,
              "result": "success",
              "time": 4,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls doWork",
              "output": undefined,
              "result": "success",
              "time": 9,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls getStderr and getStdout from worker",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
      ],
      "name": "packages/jest-worker/src/__tests__/index.test.js",
      "output": undefined,
      "totalTime": 230,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "beforeEach hooks error throwing",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "beforeEach throws an error when \\"String\\" is provided as a first argument to it",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "beforeEach throws an error when 1 is provided as a first argument to it",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "beforeEach throws an error when [] is provided as a first argument to it",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "beforeEach throws an error when {} is provided as a first argument to it",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "beforeEach throws an error when Symbol(hello) is provided as a first argument to it",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "beforeEach throws an error when true is provided as a first argument to it",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "beforeEach throws an error when null is provided as a first argument to it",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "beforeEach throws an error when undefined is provided as a first argument to it",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "beforeAll hooks error throwing",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "beforeAll throws an error when \\"String\\" is provided as a first argument to it",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "beforeAll throws an error when 1 is provided as a first argument to it",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "beforeAll throws an error when [] is provided as a first argument to it",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "beforeAll throws an error when {} is provided as a first argument to it",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "beforeAll throws an error when Symbol(hello) is provided as a first argument to it",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "beforeAll throws an error when true is provided as a first argument to it",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "beforeAll throws an error when null is provided as a first argument to it",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "beforeAll throws an error when undefined is provided as a first argument to it",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "afterEach hooks error throwing",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "afterEach throws an error when \\"String\\" is provided as a first argument to it",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "afterEach throws an error when 1 is provided as a first argument to it",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "afterEach throws an error when [] is provided as a first argument to it",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "afterEach throws an error when {} is provided as a first argument to it",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "afterEach throws an error when Symbol(hello) is provided as a first argument to it",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "afterEach throws an error when true is provided as a first argument to it",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "afterEach throws an error when null is provided as a first argument to it",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "afterEach throws an error when undefined is provided as a first argument to it",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "afterAll hooks error throwing",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "afterAll throws an error when \\"String\\" is provided as a first argument to it",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "afterAll throws an error when 1 is provided as a first argument to it",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "afterAll throws an error when [] is provided as a first argument to it",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "afterAll throws an error when {} is provided as a first argument to it",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "afterAll throws an error when Symbol(hello) is provided as a first argument to it",
              "output": undefined,
              "result": "success",
              "time": 7,
            },
            TestCaseResult {
              "error": undefined,
              "name": "afterAll throws an error when true is provided as a first argument to it",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "afterAll throws an error when null is provided as a first argument to it",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "afterAll throws an error when undefined is provided as a first argument to it",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "packages/jest-jasmine2/src/__tests__/hooksError.test.ts",
      "output": undefined,
      "totalTime": 51,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "Jasmine2Reporter",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "reports nested suites",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
          ],
        },
      ],
      "name": "packages/jest-jasmine2/src/__tests__/reporter.test.ts",
      "output": undefined,
      "totalTime": 107,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "test/it.todo error throwing",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "it throws error when given no arguments",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "it throws error when given more than one argument",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "it throws error when given none string description",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
      ],
      "name": "packages/jest-jasmine2/src/__tests__/todoError.test.ts",
      "output": undefined,
      "totalTime": 27,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "test/it error throwing",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "it throws error with missing callback function",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "it throws an error when first argument isn't a string",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "it throws an error when callback function is not a function",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "test throws error with missing callback function",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "test throws an error when first argument isn't a string",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "test throws an error when callback function is not a function",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "packages/jest-jasmine2/src/__tests__/itTestError.test.ts",
      "output": undefined,
      "totalTime": 32,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "iterators",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "works for arrays",
              "output": undefined,
              "result": "success",
              "time": 10,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works for custom iterables",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works for Sets",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works for Maps",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
      ],
      "name": "packages/jest-jasmine2/src/__tests__/iterators.test.ts",
      "output": undefined,
      "totalTime": 43,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "pTimeout",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "calls \`clearTimeout\` and resolves when \`promise\` resolves.",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls \`clearTimeout\` and rejects when \`promise\` rejects.",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls \`onTimeout\` on timeout.",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "packages/jest-jasmine2/src/__tests__/pTimeout.test.ts",
      "output": undefined,
      "totalTime": 44,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "creation of a cache key",
              "output": undefined,
              "result": "success",
              "time": 33,
            },
          ],
        },
      ],
      "name": "packages/jest-create-cache-key-function/src/__tests__/index.test.ts",
      "output": undefined,
      "totalTime": 75,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "concurrent",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should add 1 to number",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should add 1 to number",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should add 1 to number",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "packages/jest-jasmine2/src/__tests__/concurrent.test.ts",
      "output": undefined,
      "totalTime": 24,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "global.test",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "packages/jest-jasmine2/src/__tests__/itToTestAlias.test.ts",
      "output": undefined,
      "totalTime": 23,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "ReactElement Plugin",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "serializes forwardRef without displayName",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "serializes forwardRef with displayName",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "serializes forwardRef component with displayName",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "packages/pretty-format/src/__tests__/ReactElement.test.ts",
      "output": undefined,
      "totalTime": 64,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "returns the shared tasks in FIFO ordering",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "returns the worker specific tasks in FIFO ordering",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "maintains global FIFO ordering between worker specific and shared tasks",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
      ],
      "name": "packages/jest-worker/src/__tests__/FifoQueue.test.js",
      "output": undefined,
      "totalTime": 48,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "returns the tasks in order",
              "output": undefined,
              "result": "success",
              "time": 3,
            },
            TestCaseResult {
              "error": undefined,
              "name": "returns the task with the lowest priority value if inserted in reversed order",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "returns the task with the lowest priority value if inserted in correct order",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "uses different queues for each worker",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "process task in the global and shared queue in order",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
      ],
      "name": "packages/jest-worker/src/__tests__/PriorityQueue.test.js",
      "output": undefined,
      "totalTime": 63,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "SearchSource isTestFilePath",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "supports ../ paths and unix separators via testRegex",
              "output": undefined,
              "result": "success",
              "time": 804,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports unix separators",
              "output": undefined,
              "result": "success",
              "time": 265,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports win32 separators",
              "output": undefined,
              "result": "success",
              "time": 277,
            },
          ],
        },
        TestGroupResult {
          "name": "SearchSource testPathsMatching",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "finds tests matching a pattern via testRegex",
              "output": undefined,
              "result": "success",
              "time": 23,
            },
            TestCaseResult {
              "error": undefined,
              "name": "finds tests matching a pattern via testMatch",
              "output": undefined,
              "result": "success",
              "time": 14,
            },
            TestCaseResult {
              "error": undefined,
              "name": "finds tests matching a JS regex pattern",
              "output": undefined,
              "result": "success",
              "time": 12,
            },
            TestCaseResult {
              "error": undefined,
              "name": "finds tests matching a JS glob pattern",
              "output": undefined,
              "result": "success",
              "time": 13,
            },
            TestCaseResult {
              "error": undefined,
              "name": "finds tests matching a JS with overriding glob patterns",
              "output": undefined,
              "result": "success",
              "time": 18,
            },
            TestCaseResult {
              "error": undefined,
              "name": "finds tests with default file extensions using testRegex",
              "output": undefined,
              "result": "success",
              "time": 16,
            },
            TestCaseResult {
              "error": undefined,
              "name": "finds tests with default file extensions using testMatch",
              "output": undefined,
              "result": "success",
              "time": 13,
            },
            TestCaseResult {
              "error": undefined,
              "name": "finds tests with parentheses in their rootDir when using testMatch",
              "output": undefined,
              "result": "success",
              "time": 16,
            },
            TestCaseResult {
              "error": undefined,
              "name": "finds tests with similar but custom file extensions",
              "output": undefined,
              "result": "success",
              "time": 13,
            },
            TestCaseResult {
              "error": undefined,
              "name": "finds tests with totally custom foobar file extensions",
              "output": undefined,
              "result": "success",
              "time": 38,
            },
            TestCaseResult {
              "error": undefined,
              "name": "finds tests with many kinds of file extensions",
              "output": undefined,
              "result": "success",
              "time": 20,
            },
            TestCaseResult {
              "error": undefined,
              "name": "finds tests using a regex only",
              "output": undefined,
              "result": "success",
              "time": 41,
            },
            TestCaseResult {
              "error": undefined,
              "name": "finds tests using a glob only",
              "output": undefined,
              "result": "success",
              "time": 24,
            },
          ],
        },
        TestGroupResult {
          "name": "SearchSource findRelatedTests",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "makes sure a file is related to itself",
              "output": undefined,
              "result": "success",
              "time": 60,
            },
            TestCaseResult {
              "error": undefined,
              "name": "finds tests that depend directly on the path",
              "output": undefined,
              "result": "success",
              "time": 15,
            },
            TestCaseResult {
              "error": undefined,
              "name": "excludes untested files from coverage",
              "output": undefined,
              "result": "success",
              "time": 17,
            },
          ],
        },
        TestGroupResult {
          "name": "SearchSource findRelatedTestsFromPattern",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "returns empty search result for empty input",
              "output": undefined,
              "result": "success",
              "time": 18,
            },
            TestCaseResult {
              "error": undefined,
              "name": "returns empty search result for invalid input",
              "output": undefined,
              "result": "success",
              "time": 14,
            },
            TestCaseResult {
              "error": undefined,
              "name": "returns empty search result if no related tests were found",
              "output": undefined,
              "result": "success",
              "time": 15,
            },
            TestCaseResult {
              "error": undefined,
              "name": "finds tests for a single file",
              "output": undefined,
              "result": "success",
              "time": 24,
            },
            TestCaseResult {
              "error": undefined,
              "name": "finds tests for multiple files",
              "output": undefined,
              "result": "success",
              "time": 15,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not mistake roots folders with prefix names",
              "output": undefined,
              "result": "success",
              "time": 29,
            },
          ],
        },
        TestGroupResult {
          "name": "SearchSource findRelatedSourcesFromTestsInChangedFiles",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "return empty set if no SCM",
              "output": undefined,
              "result": "success",
              "time": 22,
            },
            TestCaseResult {
              "error": undefined,
              "name": "return sources required by tests",
              "output": undefined,
              "result": "success",
              "time": 17,
            },
          ],
        },
      ],
      "name": "packages/jest-core/src/__tests__/SearchSource.test.ts",
      "output": undefined,
      "totalTime": 2596,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should throw if passed two arguments",
              "output": undefined,
              "result": "success",
              "time": 46,
            },
          ],
        },
        TestGroupResult {
          "name": ".rejects",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should reject",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should reject with toThrow",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should reject async function to toThrow",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails non-promise value \\"a\\" synchronously",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails non-promise value \\"a\\"",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails non-promise value [1] synchronously",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails non-promise value [1]",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails non-promise value [Function anonymous] synchronously",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails non-promise value [Function anonymous]",
              "output": undefined,
              "result": "success",
              "time": 7,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails non-promise value {\\"a\\": 1} synchronously",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails non-promise value {\\"a\\": 1}",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails non-promise value 4 synchronously",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails non-promise value 4",
              "output": undefined,
              "result": "success",
              "time": 3,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails non-promise value null synchronously",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails non-promise value null",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails non-promise value true synchronously",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails non-promise value true",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails non-promise value undefined synchronously",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails non-promise value undefined",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails for promise that resolves",
              "output": undefined,
              "result": "success",
              "time": 4,
            },
          ],
        },
        TestGroupResult {
          "name": ".resolves",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should resolve",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails non-promise value \\"a\\" synchronously",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails non-promise value \\"a\\"",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails non-promise value [1] synchronously",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails non-promise value [1]",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails non-promise value [Function anonymous] synchronously",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails non-promise value [Function anonymous]",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails non-promise value {\\"a\\": 1} synchronously",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails non-promise value {\\"a\\": 1}",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails non-promise value 4 synchronously",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails non-promise value 4",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails non-promise value null synchronously",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails non-promise value null",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails non-promise value true synchronously",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails non-promise value true",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails non-promise value undefined synchronously",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails non-promise value undefined",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails for promise that rejects",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": ".toBe()",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "does not throw",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails for: 1 and 2",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails for: true and false",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails for: [Function anonymous] and [Function anonymous]",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails for: {} and {}",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails for: {\\"a\\": 1} and {\\"a\\": 1}",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails for: {\\"a\\": 1} and {\\"a\\": 5}",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails for: {\\"a\\": [Function a], \\"b\\": 2} and {\\"a\\": Any<Function>, \\"b\\": 2}",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails for: {\\"a\\": undefined, \\"b\\": 2} and {\\"b\\": 2}",
              "output": undefined,
              "result": "success",
              "time": 8,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails for: 2020-02-20T00:00:00.000Z and 2020-02-20T00:00:00.000Z",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails for: 2020-02-21T00:00:00.000Z and 2020-02-20T00:00:00.000Z",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails for: /received/ and /expected/",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails for: Symbol(received) and Symbol(expected)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails for: [Error: received] and [Error: expected]",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails for: \\"abc\\" and \\"cde\\"",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails for: \\"painless JavaScript testing\\" and \\"delightful JavaScript testing\\"",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails for: \\"\\" and \\"compare one-line string to empty string\\"",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails for: \\"with 
trailing space\\" and \\"without trailing space\\"",
              "output": undefined,
              "result": "success",
              "time": 8,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails for: \\"four
4
line
string\\" and \\"3
line
string\\"",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails for: [] and []",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails for: null and undefined",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails for: -0 and 0",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails for: 1n and 2n",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails for: {\\"a\\": 1n} and {\\"a\\": 1n}",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails for 'false' with '.not'",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails for '1' with '.not'",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails for '\\"a\\"' with '.not'",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails for 'undefined' with '.not'",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails for 'null' with '.not'",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails for '{}' with '.not'",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails for '[]' with '.not'",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails for '1n' with '.not'",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails for '1n' with '.not'",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not crash on circular references",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "assertion error matcherResult property contains matcher name, expected and actual values",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": ".toStrictEqual()",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "does not ignore keys with undefined values",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not ignore keys with undefined values inside an array",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not ignore keys with undefined values deep inside an object",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "passes when comparing same type",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "matches the expected snapshot when it fails",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "displays substring diff",
              "output": undefined,
              "result": "success",
              "time": 3,
            },
            TestCaseResult {
              "error": undefined,
              "name": "displays substring diff for multiple lines",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not pass for different types",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not simply compare constructor names",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "passes for matching sparse arrays",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not pass when sparseness of arrays do not match",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not pass when equally sparse arrays have different values",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": ".toEqual()",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(true).toEqual(false)",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(1).toEqual(2)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(0).toEqual(-0)",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(0).toEqual(5e-324)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(5e-324).toEqual(0)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(0).toEqual({})",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect({}).toEqual(0)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect({}).toEqual({})",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(\\"abc\\").toEqual({\\"0\\": \\"a\\", \\"1\\": \\"b\\", \\"2\\": \\"c\\"})",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect({\\"0\\": \\"a\\", \\"1\\": \\"b\\", \\"2\\": \\"c\\"}).toEqual(\\"abc\\")",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(/abc/gsy).toEqual(/abc/g)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect({\\"a\\": 1}).toEqual({\\"a\\": 2})",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect({\\"a\\": 5}).toEqual({\\"b\\": 6})",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect({\\"foo\\": {\\"bar\\": 1}}).toEqual({\\"foo\\": {}})",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect({\\"getterAndSetter\\": {}}).toEqual({\\"getterAndSetter\\": {\\"foo\\": \\"bar\\"}})",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect({\\"frozenGetterAndSetter\\": {}}).toEqual({\\"frozenGetterAndSetter\\": {\\"foo\\": \\"bar\\"}})",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect({\\"getter\\": {}}).toEqual({\\"getter\\": {\\"foo\\": \\"bar\\"}})",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect({\\"frozenGetter\\": {}}).toEqual({\\"frozenGetter\\": {\\"foo\\": \\"bar\\"}})",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect({\\"setter\\": undefined}).toEqual({\\"setter\\": {\\"foo\\": \\"bar\\"}})",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect({\\"frozenSetter\\": undefined}).toEqual({\\"frozenSetter\\": {\\"foo\\": \\"bar\\"}})",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(\\"banana\\").toEqual(\\"apple\\")",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(\\"1 234,57 $\\").toEqual(\\"1 234,57 $\\")",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(\\"type TypeName<T> = T extends Function ? \\\\\\"function\\\\\\" : \\\\\\"object\\\\\\";\\").toEqual(\\"type TypeName<T> = T extends Function
? \\\\\\"function\\\\\\"
: \\\\\\"object\\\\\\";\\")",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(null).toEqual(undefined)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect([1]).toEqual([2])",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect([1, 2]).toEqual([2, 1])",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(Immutable.List [1]).toEqual(Immutable.List [2])",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(Immutable.List [1, 2]).toEqual(Immutable.List [2, 1])",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(Map {}).toEqual(Set {})",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(Set {1, 2}).toEqual(Set {})",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(Set {1, 2}).toEqual(Set {1, 2, 3})",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(Set {[1], [2]}).toEqual(Set {[1], [2], [3]})",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(Set {[1], [2]}).toEqual(Set {[1], [2], [2]})",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(Set {Set {1}, Set {2}}).toEqual(Set {Set {1}, Set {3}})",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(Immutable.Set [1, 2]).toEqual(Immutable.Set [])",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(Immutable.Set [1, 2]).toEqual(Immutable.Set [1, 2, 3])",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(Immutable.OrderedSet [1, 2]).toEqual(Immutable.OrderedSet [2, 1])",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(Map {1 => \\"one\\", 2 => \\"two\\"}).toEqual(Map {1 => \\"one\\"})",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(Map {\\"a\\" => 0}).toEqual(Map {\\"b\\" => 0})",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(Map {\\"v\\" => 1}).toEqual(Map {\\"v\\" => 2})",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(Map {[\\"v\\"] => 1}).toEqual(Map {[\\"v\\"] => 2})",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(Map {[1] => Map {[1] => \\"one\\"}}).toEqual(Map {[1] => Map {[1] => \\"two\\"}})",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(Immutable.Map {\\"a\\": 0}).toEqual(Immutable.Map {\\"b\\": 0})",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(Immutable.Map {\\"v\\": 1}).toEqual(Immutable.Map {\\"v\\": 2})",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(Immutable.OrderedMap {1: \\"one\\", 2: \\"two\\"}).toEqual(Immutable.OrderedMap {2: \\"two\\", 1: \\"one\\"})",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(Immutable.Map {\\"1\\": Immutable.Map {\\"2\\": {\\"a\\": 99}}}).toEqual(Immutable.Map {\\"1\\": Immutable.Map {\\"2\\": {\\"a\\": 11}}})",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect([97, 98, 99]).toEqual([97, 98, 100])",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect({\\"a\\": 1, \\"b\\": 2}).toEqual(ObjectContaining {\\"a\\": 2})",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(false).toEqual(ObjectContaining {\\"a\\": 2})",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect([1, 3]).toEqual(ArrayContaining [1, 2])",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(1).toEqual(ArrayContaining [1, 2])",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(\\"abd\\").toEqual(StringContaining \\"bc\\")",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(\\"abd\\").toEqual(StringMatching /bc/i)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(undefined).toEqual(Anything)",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(undefined).toEqual(Any<Function>)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(\\"Eve\\").toEqual({\\"asymmetricMatch\\": [Function asymmetricMatch]})",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect({\\"target\\": {\\"nodeType\\": 1, \\"value\\": \\"a\\"}}).toEqual({\\"target\\": {\\"nodeType\\": 1, \\"value\\": \\"b\\"}})",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect({\\"nodeName\\": \\"div\\", \\"nodeType\\": 1}).toEqual({\\"nodeName\\": \\"p\\", \\"nodeType\\": 1})",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect({Symbol(foo): 1, Symbol(bar): 2}).toEqual({Symbol(foo): Any<Number>, Symbol(bar): 1})",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(1n).toEqual(2n)",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(1n).toEqual(1)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(true).not.toEqual(true)",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(1).not.toEqual(1)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(NaN).not.toEqual(NaN)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(0).not.toEqual(0)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(0).not.toEqual(0)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect({}).not.toEqual({})",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(\\"abc\\").not.toEqual(\\"abc\\")",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(\\"abc\\").not.toEqual(\\"abc\\")",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(\\"abc\\").not.toEqual(\\"abc\\")",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect([1]).not.toEqual([1])",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect([1, 2]).not.toEqual([1, 2])",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(Immutable.List [1]).not.toEqual(Immutable.List [1])",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(Immutable.List [1, 2]).not.toEqual(Immutable.List [1, 2])",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect({}).not.toEqual({})",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect({\\"a\\": 99}).not.toEqual({\\"a\\": 99})",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(Set {}).not.toEqual(Set {})",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(Set {1, 2}).not.toEqual(Set {1, 2})",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(Set {1, 2}).not.toEqual(Set {2, 1})",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(Set {[1], [2]}).not.toEqual(Set {[2], [1]})",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(Set {Set {[1]}, Set {[2]}}).not.toEqual(Set {Set {[2]}, Set {[1]}})",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(Set {[1], [2], [3], [3]}).not.toEqual(Set {[3], [3], [2], [1]})",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(Set {{\\"a\\": 1}, {\\"b\\": 2}}).not.toEqual(Set {{\\"b\\": 2}, {\\"a\\": 1}})",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(Immutable.Set []).not.toEqual(Immutable.Set [])",
              "output": undefined,
              "result": "success",
              "time": 7,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(Immutable.Set [1, 2]).not.toEqual(Immutable.Set [1, 2])",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(Immutable.Set [1, 2]).not.toEqual(Immutable.Set [2, 1])",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(Immutable.OrderedSet []).not.toEqual(Immutable.OrderedSet [])",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(Immutable.OrderedSet [1, 2]).not.toEqual(Immutable.OrderedSet [1, 2])",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(Map {}).not.toEqual(Map {})",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(Map {1 => \\"one\\", 2 => \\"two\\"}).not.toEqual(Map {1 => \\"one\\", 2 => \\"two\\"})",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(Map {1 => \\"one\\", 2 => \\"two\\"}).not.toEqual(Map {2 => \\"two\\", 1 => \\"one\\"})",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(Map {[1] => \\"one\\", [2] => \\"two\\", [3] => \\"three\\", [3] => \\"four\\"}).not.toEqual(Map {[3] => \\"three\\", [3] => \\"four\\", [2] => \\"two\\", [1] => \\"one\\"})",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(Map {[1] => Map {[1] => \\"one\\"}, [2] => Map {[2] => \\"two\\"}}).not.toEqual(Map {[2] => Map {[2] => \\"two\\"}, [1] => Map {[1] => \\"one\\"}})",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(Map {[1] => \\"one\\", [2] => \\"two\\"}).not.toEqual(Map {[2] => \\"two\\", [1] => \\"one\\"})",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(Map {{\\"a\\": 1} => \\"one\\", {\\"b\\": 2} => \\"two\\"}).not.toEqual(Map {{\\"b\\": 2} => \\"two\\", {\\"a\\": 1} => \\"one\\"})",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(Map {1 => [\\"one\\"], 2 => [\\"two\\"]}).not.toEqual(Map {2 => [\\"two\\"], 1 => [\\"one\\"]})",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(Immutable.Map {}).not.toEqual(Immutable.Map {})",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(Immutable.Map {1: \\"one\\", 2: \\"two\\"}).not.toEqual(Immutable.Map {1: \\"one\\", 2: \\"two\\"})",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(Immutable.Map {1: \\"one\\", 2: \\"two\\"}).not.toEqual(Immutable.Map {2: \\"two\\", 1: \\"one\\"})",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(Immutable.OrderedMap {1: \\"one\\", 2: \\"two\\"}).not.toEqual(Immutable.OrderedMap {1: \\"one\\", 2: \\"two\\"})",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(Immutable.Map {\\"1\\": Immutable.Map {\\"2\\": {\\"a\\": 99}}}).not.toEqual(Immutable.Map {\\"1\\": Immutable.Map {\\"2\\": {\\"a\\": 99}}})",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect([97, 98, 99]).not.toEqual([97, 98, 99])",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect({\\"a\\": 1, \\"b\\": 2}).not.toEqual(ObjectContaining {\\"a\\": 1})",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect([1, 2, 3]).not.toEqual(ArrayContaining [2, 3])",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(\\"abcd\\").not.toEqual(StringContaining \\"bc\\")",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(\\"abcd\\").not.toEqual(StringMatching /bc/)",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(true).not.toEqual(Anything)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect([Function anonymous]).not.toEqual(Any<Function>)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect({\\"a\\": 1, \\"b\\": [Function b], \\"c\\": true}).not.toEqual({\\"a\\": 1, \\"b\\": Any<Function>, \\"c\\": Anything})",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(\\"Alice\\").not.toEqual({\\"asymmetricMatch\\": [Function asymmetricMatch]})",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect({\\"nodeName\\": \\"div\\", \\"nodeType\\": 1}).not.toEqual({\\"nodeName\\": \\"div\\", \\"nodeType\\": 1})",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect({Symbol(foo): 1, Symbol(bar): 2}).not.toEqual({Symbol(foo): Any<Number>, Symbol(bar): 2})",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(1n).not.toEqual(1n)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(0n).not.toEqual(0n)",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect([1n]).not.toEqual([1n])",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect([1n, 2]).not.toEqual([1n, 2])",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(Immutable.List [1n]).not.toEqual(Immutable.List [1n])",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect({\\"a\\": 99n}).not.toEqual({\\"a\\": 99n})",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(Set {1n, 2n}).not.toEqual(Set {1n, 2n})",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "assertion error matcherResult property contains matcher name, expected and actual values",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "symbol based keys in arrays are processed correctly",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "non-enumerable members should be skipped during equal",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "non-enumerable symbolic members should be skipped during equal",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": ".toEqual() cyclic object equality",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "properties with the same circularity are equal",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "properties with different circularity are not equal",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "are not equal if circularity is not on the same property",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": ".toBeInstanceOf()",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "passing Map {} and [Function Map]",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "passing [] and [Function Array]",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "passing {} and [Function A]",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "passing {} and [Function B]",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "passing {} and [Function B]",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "passing {} and [Function anonymous]",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "passing {} and [Function B]",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "passing {} and [Function name() {}]",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "failing \\"a\\" and [Function String]",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "failing 1 and [Function Number]",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "failing true and [Function Boolean]",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "failing {} and [Function B]",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "failing {} and [Function A]",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "failing undefined and [Function String]",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "failing null and [Function String]",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "failing /\\\\w+/ and [Function anonymous]",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "failing {} and [Function RegExp]",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws if constructor is not a function",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": ".toBeTruthy(), .toBeFalsy()",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "does not accept arguments",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "'{}' is truthy",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "'[]' is truthy",
              "output": undefined,
              "result": "success",
              "time": 3,
            },
            TestCaseResult {
              "error": undefined,
              "name": "'true' is truthy",
              "output": undefined,
              "result": "success",
              "time": 4,
            },
            TestCaseResult {
              "error": undefined,
              "name": "'1' is truthy",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "'\\"a\\"' is truthy",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "'0.5' is truthy",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "'Map {}' is truthy",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "'[Function anonymous]' is truthy",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "'Infinity' is truthy",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "'1n' is truthy",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "'false' is falsy",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "'null' is falsy",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "'NaN' is falsy",
              "output": undefined,
              "result": "success",
              "time": 3,
            },
            TestCaseResult {
              "error": undefined,
              "name": "'0' is falsy",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "'\\"\\"' is falsy",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "'undefined' is falsy",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "'0n' is falsy",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
          ],
        },
        TestGroupResult {
          "name": ".toBeNaN()",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(NaN).toBeNaN()",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
          ],
        },
        TestGroupResult {
          "name": ".toBeNull()",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "fails for '{}'",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails for '[]'",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails for 'true'",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails for '1'",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails for '\\"a\\"'",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails for '0.5'",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails for 'Map {}'",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails for '[Function anonymous]'",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails for 'Infinity'",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails for null with .not",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "pass for null",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": ".toBeDefined(), .toBeUndefined()",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "'{}' is defined",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "'[]' is defined",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "'true' is defined",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "'1' is defined",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "'\\"a\\"' is defined",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "'0.5' is defined",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "'Map {}' is defined",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "'[Function anonymous]' is defined",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "'Infinity' is defined",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "'1n' is defined",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "undefined is undefined",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": ".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(1).toBeLessThan(2)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(2).toBeLessThan(1)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(2).toBeGreaterThan(1)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(1).toBeGreaterThan(2)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(1).toBeLessThanOrEqual(2)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(2).toBeLessThanOrEqual(1)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(2).toBeGreaterThanOrEqual(1)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(1).toBeGreaterThanOrEqual(2)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws: [1, 2]",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(-Infinity).toBeLessThan(Infinity)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(Infinity).toBeLessThan(-Infinity)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(Infinity).toBeGreaterThan(-Infinity)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(-Infinity).toBeGreaterThan(Infinity)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(-Infinity).toBeLessThanOrEqual(Infinity)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(Infinity).toBeLessThanOrEqual(-Infinity)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(Infinity).toBeGreaterThanOrEqual(-Infinity)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(-Infinity).toBeGreaterThanOrEqual(Infinity)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws: [-Infinity, Infinity]",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(5e-324).toBeLessThan(1.7976931348623157e+308)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(1.7976931348623157e+308).toBeLessThan(5e-324)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(1.7976931348623157e+308).toBeGreaterThan(5e-324)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(5e-324).toBeGreaterThan(1.7976931348623157e+308)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(5e-324).toBeLessThanOrEqual(1.7976931348623157e+308)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(1.7976931348623157e+308).toBeLessThanOrEqual(5e-324)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(1.7976931348623157e+308).toBeGreaterThanOrEqual(5e-324)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(5e-324).toBeGreaterThanOrEqual(1.7976931348623157e+308)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws: [5e-324, 1.7976931348623157e+308]",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(17).toBeLessThan(34)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(34).toBeLessThan(17)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(34).toBeGreaterThan(17)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(17).toBeGreaterThan(34)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(17).toBeLessThanOrEqual(34)",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(34).toBeLessThanOrEqual(17)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(34).toBeGreaterThanOrEqual(17)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(17).toBeGreaterThanOrEqual(34)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws: [17, 34]",
              "output": undefined,
              "result": "success",
              "time": 3,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(3).toBeLessThan(7)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(7).toBeLessThan(3)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(7).toBeGreaterThan(3)",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(3).toBeGreaterThan(7)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(3).toBeLessThanOrEqual(7)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(7).toBeLessThanOrEqual(3)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(7).toBeGreaterThanOrEqual(3)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(3).toBeGreaterThanOrEqual(7)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws: [3, 7]",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(9).toBeLessThan(18)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(18).toBeLessThan(9)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(18).toBeGreaterThan(9)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(9).toBeGreaterThan(18)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(9).toBeLessThanOrEqual(18)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(18).toBeLessThanOrEqual(9)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(18).toBeGreaterThanOrEqual(9)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(9).toBeGreaterThanOrEqual(18)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws: [9, 18]",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(0.1).toBeLessThan(0.2)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(0.2).toBeLessThan(0.1)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(0.2).toBeGreaterThan(0.1)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(0.1).toBeGreaterThan(0.2)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(0.1).toBeLessThanOrEqual(0.2)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(0.2).toBeLessThanOrEqual(0.1)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(0.2).toBeGreaterThanOrEqual(0.1)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(0.1).toBeGreaterThanOrEqual(0.2)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws: [0.1, 0.2]",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "can compare BigInt to Numbers",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(1n).toBeLessThan(2n)",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(2n).toBeLessThan(1n)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(2n).toBeGreaterThan(1n)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(1n).toBeGreaterThan(2n)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(1n).toBeLessThanOrEqual(2n)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(2n).toBeLessThanOrEqual(1n)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(2n).toBeGreaterThanOrEqual(1n)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(1n).toBeGreaterThanOrEqual(2n)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws: [1n, 2n]",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(17n).toBeLessThan(34n)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(34n).toBeLessThan(17n)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(34n).toBeGreaterThan(17n)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(17n).toBeGreaterThan(34n)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(17n).toBeLessThanOrEqual(34n)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(34n).toBeLessThanOrEqual(17n)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(34n).toBeGreaterThanOrEqual(17n)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(17n).toBeGreaterThanOrEqual(34n)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws: [17n, 34n]",
              "output": undefined,
              "result": "success",
              "time": 3,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(-1).toBeLessThan(2n)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(2n).toBeLessThan(-1)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(2n).toBeGreaterThan(-1)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(-1).toBeGreaterThan(2n)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(-1).toBeLessThanOrEqual(2n)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(2n).toBeLessThanOrEqual(-1)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(2n).toBeGreaterThanOrEqual(-1)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(-1).toBeGreaterThanOrEqual(2n)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws: [-1, 2n]",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "equal numbers: [1, 1]",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "equal numbers: [5e-324, 5e-324]",
              "output": undefined,
              "result": "success",
              "time": 8,
            },
            TestCaseResult {
              "error": undefined,
              "name": "equal numbers: [1.7976931348623157e+308, 1.7976931348623157e+308]",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "equal numbers: [Infinity, Infinity]",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "equal numbers: [-Infinity, -Infinity]",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "equal numbers: [1, 1]",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "equal numbers: [9007199254740991, 9007199254740991]",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": ".toContain(), .toContainEqual()",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "iterable",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "'[1, 2, 3, 4]' contains '1'",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "'[\\"a\\", \\"b\\", \\"c\\", \\"d\\"]' contains '\\"a\\"'",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "'[undefined, null]' contains 'null'",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "'[undefined, null]' contains 'undefined'",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "'[Symbol(a)]' contains 'Symbol(a)'",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "'\\"abcdef\\"' contains '\\"abc\\"'",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "'\\"11112111\\"' contains '\\"2\\"'",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "'Set {\\"abc\\", \\"def\\"}' contains '\\"abc\\"'",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "'[0, 1]' contains '1'",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "'[1n, 2n, 3n, 4n]' contains '1n'",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "'[1, 2, 3, 3n, 4]' contains '3n'",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "'[1, 2, 3]' does not contain '4'",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "'[null, undefined]' does not contain '1'",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "'[{}, []]' does not contain '[]'",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "'[{}, []]' does not contain '{}'",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "'[1n, 2n, 3n]' does not contain '3'",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "error cases",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "'[1, 2, 3, 4]' contains a value equal to '1'",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "'[\\"a\\", \\"b\\", \\"c\\", \\"d\\"]' contains a value equal to '\\"a\\"'",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "'[undefined, null]' contains a value equal to 'null'",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "'[undefined, null]' contains a value equal to 'undefined'",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "'[Symbol(a)]' contains a value equal to 'Symbol(a)'",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "'[{\\"a\\": \\"b\\"}, {\\"a\\": \\"c\\"}]' contains a value equal to '{\\"a\\": \\"b\\"}'",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "'Set {1, 2, 3, 4}' contains a value equal to '1'",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "'[0, 1]' contains a value equal to '1'",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "'[{\\"a\\": \\"b\\"}, {\\"a\\": \\"c\\"}]' does not contain a value equal to'{\\"a\\": \\"d\\"}'",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "error cases for toContainEqual",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": ".toBeCloseTo",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(0).toBeCloseTo(0)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(0).toBeCloseTo(0.001)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(1.23).toBeCloseTo(1.229)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(1.23).toBeCloseTo(1.226)",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(1.23).toBeCloseTo(1.225)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(1.23).toBeCloseTo(1.234)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(Infinity).toBeCloseTo(Infinity)",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(-Infinity).toBeCloseTo(-Infinity)",
              "output": undefined,
              "result": "success",
              "time": 3,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(0).toBeCloseTo(0.01)",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(1).toBeCloseTo(1.23)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(1.23).toBeCloseTo(1.2249999)",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(Infinity).toBeCloseTo(-Infinity)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(Infinity).toBeCloseTo(1.23)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(-Infinity).toBeCloseTo(-1.23)",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(3.141592e-7).toBeCloseTo(3e-7, 8)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(56789).toBeCloseTo(51234, -4)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(0).toBeCloseTo(0.1, 0)",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(0).toBeCloseTo(0.0001, 3)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(0).toBeCloseTo(0.000004, 5)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(2.0000002).toBeCloseTo(2, 5)",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": ".toBeCloseTo throws: Matcher error",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "promise empty isNot false received",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "promise empty isNot true expected",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "promise rejects isNot false expected",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "promise rejects isNot true received",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "promise resolves isNot false received",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "promise resolves isNot true expected",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": ".toMatch()",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(foo).toMatch(foo)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(Foo bar).toMatch(/^foo/i)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws: [bar, foo]",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws: [bar, /foo/]",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws if non String actual value passed: [1, \\"foo\\"]",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws if non String actual value passed: [{}, \\"foo\\"]",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws if non String actual value passed: [[], \\"foo\\"]",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws if non String actual value passed: [true, \\"foo\\"]",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws if non String actual value passed: [/foo/i, \\"foo\\"]",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws if non String actual value passed: [[Function anonymous], \\"foo\\"]",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws if non String actual value passed: [undefined, \\"foo\\"]",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws if non String/RegExp expected value passed: [\\"foo\\", 1]",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws if non String/RegExp expected value passed: [\\"foo\\", {}]",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws if non String/RegExp expected value passed: [\\"foo\\", []]",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws if non String/RegExp expected value passed: [\\"foo\\", true]",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws if non String/RegExp expected value passed: [\\"foo\\", [Function anonymous]]",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws if non String/RegExp expected value passed: [\\"foo\\", undefined]",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "escapes strings properly",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not maintain RegExp state between calls",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": ".toHaveLength",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect([1, 2]).toHaveLength(2)",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect([]).toHaveLength(0)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect([\\"a\\", \\"b\\"]).toHaveLength(2)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(\\"abc\\").toHaveLength(3)",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(\\"\\").toHaveLength(0)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect([Function anonymous]).toHaveLength(0)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect([1, 2]).toHaveLength(3)",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect([]).toHaveLength(1)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect([\\"a\\", \\"b\\"]).toHaveLength(99)",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(\\"abc\\").toHaveLength(66)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(\\"\\").toHaveLength(1)",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "error cases",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": ".toHaveLength matcher error expected length",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "not number",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "number Infinity",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "number NaN",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "number float",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "number negative integer",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": ".toHaveProperty()",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect({\\"a\\": {\\"b\\": {\\"c\\": {\\"d\\": 1}}}}).toHaveProperty('a.b.c.d', 1)",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect({\\"a\\": {\\"b\\": {\\"c\\": {\\"d\\": 1}}}}).toHaveProperty('a,b,c,d', 1)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect({\\"a.b.c.d\\": 1}).toHaveProperty('a.b.c.d', 1)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect({\\"a\\": {\\"b\\": [1, 2, 3]}}).toHaveProperty('a,b,1', 2)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect({\\"a\\": {\\"b\\": [1, 2, 3]}}).toHaveProperty('a,b,1', Any<Number>)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect({\\"a\\": 0}).toHaveProperty('a', 0)",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect({\\"a\\": {\\"b\\": undefined}}).toHaveProperty('a.b', undefined)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect({\\"a\\": {}}).toHaveProperty('a.b', undefined)",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect({\\"a\\": {\\"b\\": {\\"c\\": 5}}}).toHaveProperty('a.b', {\\"c\\": 5})",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect({\\"property\\": 1}).toHaveProperty('property', 1)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect({}).toHaveProperty('a', undefined)",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect({}).toHaveProperty('b', \\"b\\")",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect({}).toHaveProperty('setter', undefined)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect({\\"val\\": true}).toHaveProperty('a', undefined)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect({\\"val\\": true}).toHaveProperty('c', \\"c\\")",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect({\\"val\\": true}).toHaveProperty('val', true)",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect({\\"nodeName\\": \\"DIV\\"}).toHaveProperty('nodeType', 1)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(\\"\\").toHaveProperty('length', 0)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect([Function memoized]).toHaveProperty('memo', [])",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect({\\"a\\": {\\"b\\": {\\"c\\": {\\"d\\": 1}}}}).toHaveProperty('a.b.ttt.d', 1)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect({\\"a\\": {\\"b\\": {\\"c\\": {\\"d\\": 1}}}}).toHaveProperty('a.b.c.d', 2)",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect({\\"a.b.c.d\\": 1}).toHaveProperty('a.b.c.d', 2)",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect({\\"a.b.c.d\\": 1}).toHaveProperty('a.b.c.d', 2)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect({\\"children\\": [\\"\\\\\\"That cartoon\\\\\\"\\"], \\"props\\": null, \\"type\\": \\"p\\"}).toHaveProperty('children,0', \\"\\\\\\"That cat cartoon\\\\\\"\\")",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect({\\"children\\": [\\"Roses are red.
Violets are blue.
Testing with Jest is good for you.\\"], \\"props\\": null, \\"type\\": \\"pre\\"}).toHaveProperty('children,0', \\"Roses are red, violets are blue.
Testing with Jest
Is good for you.\\")",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect({\\"a\\": {\\"b\\": {\\"c\\": {\\"d\\": 1}}}}).toHaveProperty('a,b,c,d', 2)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect({\\"a\\": {\\"b\\": {\\"c\\": {}}}}).toHaveProperty('a.b.c.d', 1)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect({\\"a\\": 1}).toHaveProperty('a.b.c.d', 5)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect({}).toHaveProperty('a', \\"test\\")",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect({\\"a\\": {\\"b\\": 3}}).toHaveProperty('a.b', undefined)",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(1).toHaveProperty('a.b.c', \\"test\\")",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(\\"abc\\").toHaveProperty('a.b.c', {\\"a\\": 5})",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect({\\"a\\": {\\"b\\": {\\"c\\": 5}}}).toHaveProperty('a.b', {\\"c\\": 4})",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect({}).toHaveProperty('a', \\"a\\")",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect({}).toHaveProperty('b', undefined)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect({\\"a\\": {\\"b\\": {\\"c\\": {\\"d\\": 1}}}}).toHaveProperty('a.b.c.d')",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect({\\"a\\": {\\"b\\": {\\"c\\": {\\"d\\": 1}}}}).toHaveProperty('a,b,c,d')",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect({\\"a.b.c.d\\": 1}).toHaveProperty('a.b.c.d')",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect({\\"a\\": {\\"b\\": [1, 2, 3]}}).toHaveProperty('a,b,1')",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect({\\"a\\": 0}).toHaveProperty('a')",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect({\\"a\\": {\\"b\\": undefined}}).toHaveProperty('a.b')",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect({\\"a\\": {\\"b\\": {\\"c\\": {}}}}).toHaveProperty('a.b.c.d')",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect({\\"a\\": 1}).toHaveProperty('a.b.c.d')",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect({}).toHaveProperty('a')",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(1).toHaveProperty('a.b.c')",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(\\"abc\\").toHaveProperty('a.b.c')",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(false).toHaveProperty('key')",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(0).toHaveProperty('key')",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(\\"\\").toHaveProperty('key')",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(Symbol()).toHaveProperty('key')",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect({\\"key\\": 1}).toHaveProperty('not')",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{error} expect(null).toHaveProperty('a.b')",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{error} expect(undefined).toHaveProperty('a')",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{error} expect({\\"a\\": {\\"b\\": {}}}).toHaveProperty('undefined')",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{error} expect({\\"a\\": {\\"b\\": {}}}).toHaveProperty('null')",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{error} expect({\\"a\\": {\\"b\\": {}}}).toHaveProperty('1')",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{error} expect({}).toHaveProperty('')",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "toMatchObject() circular references simple circular references",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect({\\"a\\": \\"hello\\", \\"ref\\": [Circular]}).toMatchObject({})",
              "output": undefined,
              "result": "success",
              "time": 3,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect({\\"a\\": \\"hello\\", \\"ref\\": [Circular]}).toMatchObject({\\"a\\": \\"hello\\", \\"ref\\": [Circular]})",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect({}).toMatchObject({\\"a\\": \\"hello\\", \\"ref\\": [Circular]})",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect({\\"a\\": \\"hello\\", \\"ref\\": [Circular]}).toMatchObject({\\"a\\": \\"world\\", \\"ref\\": [Circular]})",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect({\\"ref\\": \\"not a ref\\"}).toMatchObject({\\"a\\": \\"hello\\", \\"ref\\": [Circular]})",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "toMatchObject() circular references transitive circular references",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect({\\"a\\": \\"hello\\", \\"nestedObj\\": {\\"parentObj\\": [Circular]}}).toMatchObject({})",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect({\\"a\\": \\"hello\\", \\"nestedObj\\": {\\"parentObj\\": [Circular]}}).toMatchObject({\\"a\\": \\"hello\\", \\"nestedObj\\": {\\"parentObj\\": [Circular]}})",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect({}).toMatchObject({\\"a\\": \\"hello\\", \\"nestedObj\\": {\\"parentObj\\": [Circular]}})",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect({\\"a\\": \\"world\\", \\"nestedObj\\": {\\"parentObj\\": [Circular]}}).toMatchObject({\\"a\\": \\"hello\\", \\"nestedObj\\": {\\"parentObj\\": [Circular]}})",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect({\\"nestedObj\\": {\\"parentObj\\": \\"not the parent ref\\"}}).toMatchObject({\\"a\\": \\"hello\\", \\"nestedObj\\": {\\"parentObj\\": [Circular]}})",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "toMatchObject()",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect({\\"a\\": \\"b\\", \\"c\\": \\"d\\"}).toMatchObject({\\"a\\": \\"b\\"})",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect({\\"a\\": \\"b\\", \\"c\\": \\"d\\"}).toMatchObject({\\"a\\": \\"b\\", \\"c\\": \\"d\\"})",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect({\\"a\\": \\"b\\", \\"t\\": {\\"x\\": {\\"r\\": \\"r\\"}, \\"z\\": \\"z\\"}}).toMatchObject({\\"a\\": \\"b\\", \\"t\\": {\\"z\\": \\"z\\"}})",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect({\\"a\\": \\"b\\", \\"t\\": {\\"x\\": {\\"r\\": \\"r\\"}, \\"z\\": \\"z\\"}}).toMatchObject({\\"t\\": {\\"x\\": {\\"r\\": \\"r\\"}}})",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect({\\"a\\": [3, 4, 5], \\"b\\": \\"b\\"}).toMatchObject({\\"a\\": [3, 4, 5]})",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect({\\"a\\": [3, 4, 5, \\"v\\"], \\"b\\": \\"b\\"}).toMatchObject({\\"a\\": [3, 4, 5, \\"v\\"]})",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect({\\"a\\": 1, \\"c\\": 2}).toMatchObject({\\"a\\": Any<Number>})",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect({\\"a\\": {\\"x\\": \\"x\\", \\"y\\": \\"y\\"}}).toMatchObject({\\"a\\": {\\"x\\": Any<String>}})",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(Set {1, 2}).toMatchObject(Set {1, 2})",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(Set {1, 2}).toMatchObject(Set {2, 1})",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect(2015-11-30T00:00:00.000Z).toMatchObject(2015-11-30T00:00:00.000Z)",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect({\\"a\\": 2015-11-30T00:00:00.000Z, \\"b\\": \\"b\\"}).toMatchObject({\\"a\\": 2015-11-30T00:00:00.000Z})",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect({\\"a\\": null, \\"b\\": \\"b\\"}).toMatchObject({\\"a\\": null})",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect({\\"a\\": undefined, \\"b\\": \\"b\\"}).toMatchObject({\\"a\\": undefined})",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect({\\"a\\": [{\\"a\\": \\"a\\", \\"b\\": \\"b\\"}]}).toMatchObject({\\"a\\": [{\\"a\\": \\"a\\"}]})",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect([1, 2]).toMatchObject([1, 2])",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect({\\"a\\": undefined}).toMatchObject({\\"a\\": undefined})",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect([]).toMatchObject([])",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect([Error: foo]).toMatchObject([Error: foo])",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect([Error: bar]).toMatchObject({\\"message\\": \\"bar\\"})",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect({}).toMatchObject({\\"a\\": undefined, \\"b\\": \\"b\\"})",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect({\\"a\\": \\"b\\"}).toMatchObject({\\"a\\": \\"b\\"})",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect({\\"a\\": \\"b\\", \\"c\\": \\"d\\", Symbol(jest): \\"jest\\"}).toMatchObject({\\"a\\": \\"b\\", Symbol(jest): \\"jest\\"})",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect({\\"a\\": \\"b\\", \\"c\\": \\"d\\", Symbol(jest): \\"jest\\"}).toMatchObject({\\"a\\": \\"b\\", \\"c\\": \\"d\\", Symbol(jest): \\"jest\\"})",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect({}).toMatchObject({\\"a\\": undefined, \\"b\\": \\"b\\", \\"c\\": \\"c\\"})",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect({}).toMatchObject({\\"d\\": 4})",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: true} expect({\\"a\\": \\"b\\", \\"toString\\": [Function toString]}).toMatchObject({\\"toString\\": Any<Function>})",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect({\\"a\\": \\"b\\", \\"c\\": \\"d\\"}).toMatchObject({\\"e\\": \\"b\\"})",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect({\\"a\\": \\"b\\", \\"c\\": \\"d\\"}).toMatchObject({\\"a\\": \\"b!\\", \\"c\\": \\"d\\"})",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect({\\"a\\": \\"a\\", \\"c\\": \\"d\\"}).toMatchObject({\\"a\\": Any<Number>})",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect({\\"a\\": \\"b\\", \\"t\\": {\\"x\\": {\\"r\\": \\"r\\"}, \\"z\\": \\"z\\"}}).toMatchObject({\\"a\\": \\"b\\", \\"t\\": {\\"z\\": [3]}})",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect({\\"a\\": \\"b\\", \\"t\\": {\\"x\\": {\\"r\\": \\"r\\"}, \\"z\\": \\"z\\"}}).toMatchObject({\\"t\\": {\\"l\\": {\\"r\\": \\"r\\"}}})",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect({\\"a\\": [3, 4, 5], \\"b\\": \\"b\\"}).toMatchObject({\\"a\\": [3, 4, 5, 6]})",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect({\\"a\\": [3, 4, 5], \\"b\\": \\"b\\"}).toMatchObject({\\"a\\": [3, 4]})",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect({\\"a\\": [3, 4, \\"v\\"], \\"b\\": \\"b\\"}).toMatchObject({\\"a\\": [\\"v\\"]})",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect({\\"a\\": [3, 4, 5], \\"b\\": \\"b\\"}).toMatchObject({\\"a\\": {\\"b\\": 4}})",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect({\\"a\\": [3, 4, 5], \\"b\\": \\"b\\"}).toMatchObject({\\"a\\": {\\"b\\": Any<String>}})",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect([1, 2]).toMatchObject([1, 3])",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect([0]).toMatchObject([-0])",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(Set {1, 2}).toMatchObject(Set {2})",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect(2015-11-30T00:00:00.000Z).toMatchObject(2015-10-10T00:00:00.000Z)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect({\\"a\\": 2015-11-30T00:00:00.000Z, \\"b\\": \\"b\\"}).toMatchObject({\\"a\\": 2015-10-10T00:00:00.000Z})",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect({\\"a\\": null, \\"b\\": \\"b\\"}).toMatchObject({\\"a\\": \\"4\\"})",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect({\\"a\\": null, \\"b\\": \\"b\\"}).toMatchObject({\\"a\\": undefined})",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect({\\"a\\": undefined}).toMatchObject({\\"a\\": null})",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect({\\"a\\": [{\\"a\\": \\"a\\", \\"b\\": \\"b\\"}]}).toMatchObject({\\"a\\": [{\\"a\\": \\"c\\"}]})",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect({\\"a\\": 1, \\"b\\": 1, \\"c\\": 1, \\"d\\": {\\"e\\": {\\"f\\": 555}}}).toMatchObject({\\"d\\": {\\"e\\": {\\"f\\": 222}}})",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect({}).toMatchObject({\\"a\\": undefined})",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect([1, 2, 3]).toMatchObject([2, 3, 1])",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect([1, 2, 3]).toMatchObject([1, 2, 2])",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect([Error: foo]).toMatchObject([Error: bar])",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect({\\"a\\": \\"b\\"}).toMatchObject({\\"c\\": \\"d\\"})",
              "output": undefined,
              "result": "success",
              "time": 4,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect({\\"a\\": \\"b\\", \\"c\\": \\"d\\", Symbol(jest): \\"jest\\"}).toMatchObject({\\"a\\": \\"c\\", Symbol(jest): Any<String>})",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{pass: false} expect({\\"a\\": \\"b\\"}).toMatchObject({\\"toString\\": Any<Function>})",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws expect(null).toMatchObject({})",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws expect(4).toMatchObject({})",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws expect(\\"44\\").toMatchObject({})",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws expect(true).toMatchObject({})",
              "output": undefined,
              "result": "success",
              "time": 3,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws expect(undefined).toMatchObject({})",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws expect({}).toMatchObject(null)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws expect({}).toMatchObject(4)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws expect({}).toMatchObject(\\"some string\\")",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws expect({}).toMatchObject(true)",
              "output": undefined,
              "result": "success",
              "time": 7,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws expect({}).toMatchObject(undefined)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not match properties up in the prototype chain",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
      ],
      "name": "packages/expect/src/__tests__/matchers.test.js",
      "output": undefined,
      "totalTime": 862,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "understands dependencies using jest.requireActual",
              "output": undefined,
              "result": "success",
              "time": 1614,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/jestRequireActual.test.ts",
      "output": undefined,
      "totalTime": 1665,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "Watch mode flows",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "Correctly passing test path pattern",
              "output": undefined,
              "result": "success",
              "time": 582,
            },
            TestCaseResult {
              "error": undefined,
              "name": "Correctly passing test name pattern",
              "output": undefined,
              "result": "success",
              "time": 73,
            },
            TestCaseResult {
              "error": undefined,
              "name": "Runs Jest once by default and shows usage",
              "output": undefined,
              "result": "success",
              "time": 60,
            },
            TestCaseResult {
              "error": undefined,
              "name": "Runs Jest in a non-interactive environment not showing usage",
              "output": undefined,
              "result": "success",
              "time": 125,
            },
            TestCaseResult {
              "error": undefined,
              "name": "resolves relative to the package root",
              "output": undefined,
              "result": "success",
              "time": 77,
            },
            TestCaseResult {
              "error": undefined,
              "name": "shows prompts for WatchPlugins in alphabetical order",
              "output": undefined,
              "result": "success",
              "time": 72,
            },
            TestCaseResult {
              "error": undefined,
              "name": "shows update snapshot prompt (without interactive)",
              "output": undefined,
              "result": "success",
              "time": 57,
            },
            TestCaseResult {
              "error": undefined,
              "name": "shows update snapshot prompt (with interactive)",
              "output": undefined,
              "result": "success",
              "time": 60,
            },
            TestCaseResult {
              "error": undefined,
              "name": "allows WatchPlugins to hook into JestHook",
              "output": undefined,
              "result": "success",
              "time": 69,
            },
            TestCaseResult {
              "error": undefined,
              "name": "allows WatchPlugins to override eligible internal plugins",
              "output": undefined,
              "result": "success",
              "time": 61,
            },
            TestCaseResult {
              "error": undefined,
              "name": "allows WatchPlugins to be configured",
              "output": undefined,
              "result": "success",
              "time": 70,
            },
            TestCaseResult {
              "error": undefined,
              "name": "allows WatchPlugins to hook into file system changes",
              "output": undefined,
              "result": "success",
              "time": 68,
            },
            TestCaseResult {
              "error": undefined,
              "name": "makes watch plugin initialization errors look nice",
              "output": undefined,
              "result": "success",
              "time": 104,
            },
            TestCaseResult {
              "error": undefined,
              "name": "allows WatchPlugins to modify only white-listed global config keys",
              "output": undefined,
              "result": "success",
              "time": 114,
            },
            TestCaseResult {
              "error": undefined,
              "name": "allows WatchPlugins to modify only white-listed global config keys",
              "output": undefined,
              "result": "success",
              "time": 72,
            },
            TestCaseResult {
              "error": undefined,
              "name": "allows WatchPlugins to modify only white-listed global config keys",
              "output": undefined,
              "result": "success",
              "time": 174,
            },
            TestCaseResult {
              "error": undefined,
              "name": "allows WatchPlugins to modify only white-listed global config keys",
              "output": undefined,
              "result": "success",
              "time": 63,
            },
            TestCaseResult {
              "error": undefined,
              "name": "allows WatchPlugins to modify only white-listed global config keys",
              "output": undefined,
              "result": "success",
              "time": 66,
            },
            TestCaseResult {
              "error": undefined,
              "name": "allows WatchPlugins to modify only white-listed global config keys",
              "output": undefined,
              "result": "success",
              "time": 65,
            },
            TestCaseResult {
              "error": undefined,
              "name": "allows WatchPlugins to modify only white-listed global config keys",
              "output": undefined,
              "result": "success",
              "time": 68,
            },
            TestCaseResult {
              "error": undefined,
              "name": "allows WatchPlugins to modify only white-listed global config keys",
              "output": undefined,
              "result": "success",
              "time": 64,
            },
            TestCaseResult {
              "error": undefined,
              "name": "allows WatchPlugins to modify only white-listed global config keys",
              "output": undefined,
              "result": "success",
              "time": 65,
            },
            TestCaseResult {
              "error": undefined,
              "name": "allows WatchPlugins to modify only white-listed global config keys",
              "output": undefined,
              "result": "success",
              "time": 65,
            },
            TestCaseResult {
              "error": undefined,
              "name": "allows WatchPlugins to modify only white-listed global config keys",
              "output": undefined,
              "result": "success",
              "time": 65,
            },
            TestCaseResult {
              "error": undefined,
              "name": "allows WatchPlugins to modify only white-listed global config keys",
              "output": undefined,
              "result": "success",
              "time": 62,
            },
            TestCaseResult {
              "error": undefined,
              "name": "allows WatchPlugins to modify only white-listed global config keys",
              "output": undefined,
              "result": "success",
              "time": 60,
            },
            TestCaseResult {
              "error": undefined,
              "name": "allows WatchPlugins to modify only white-listed global config keys",
              "output": undefined,
              "result": "success",
              "time": 70,
            },
            TestCaseResult {
              "error": undefined,
              "name": "allows WatchPlugins to modify only white-listed global config keys",
              "output": undefined,
              "result": "success",
              "time": 61,
            },
            TestCaseResult {
              "error": undefined,
              "name": "allows WatchPlugins to modify only white-listed global config keys",
              "output": undefined,
              "result": "success",
              "time": 64,
            },
            TestCaseResult {
              "error": undefined,
              "name": "allows WatchPlugins to modify only white-listed global config keys",
              "output": undefined,
              "result": "success",
              "time": 63,
            },
            TestCaseResult {
              "error": undefined,
              "name": "allows WatchPlugins to modify only white-listed global config keys",
              "output": undefined,
              "result": "success",
              "time": 71,
            },
            TestCaseResult {
              "error": undefined,
              "name": "allows WatchPlugins to modify only white-listed global config keys",
              "output": undefined,
              "result": "success",
              "time": 76,
            },
            TestCaseResult {
              "error": undefined,
              "name": "allows WatchPlugins to modify only white-listed global config keys",
              "output": undefined,
              "result": "success",
              "time": 66,
            },
            TestCaseResult {
              "error": undefined,
              "name": "allows WatchPlugins to modify only white-listed global config keys",
              "output": undefined,
              "result": "success",
              "time": 78,
            },
            TestCaseResult {
              "error": undefined,
              "name": "allows WatchPlugins to modify only white-listed global config keys",
              "output": undefined,
              "result": "success",
              "time": 57,
            },
            TestCaseResult {
              "error": undefined,
              "name": "allows WatchPlugins to modify only white-listed global config keys",
              "output": undefined,
              "result": "success",
              "time": 68,
            },
            TestCaseResult {
              "error": undefined,
              "name": "allows WatchPlugins to modify only white-listed global config keys",
              "output": undefined,
              "result": "success",
              "time": 52,
            },
            TestCaseResult {
              "error": undefined,
              "name": "allows WatchPlugins to modify only white-listed global config keys",
              "output": undefined,
              "result": "success",
              "time": 65,
            },
            TestCaseResult {
              "error": undefined,
              "name": "allows WatchPlugins to modify only white-listed global config keys",
              "output": undefined,
              "result": "success",
              "time": 58,
            },
            TestCaseResult {
              "error": undefined,
              "name": "allows WatchPlugins to modify only white-listed global config keys",
              "output": undefined,
              "result": "success",
              "time": 62,
            },
            TestCaseResult {
              "error": undefined,
              "name": "allows WatchPlugins to modify only white-listed global config keys",
              "output": undefined,
              "result": "success",
              "time": 73,
            },
            TestCaseResult {
              "error": undefined,
              "name": "allows WatchPlugins to modify only white-listed global config keys",
              "output": undefined,
              "result": "success",
              "time": 69,
            },
            TestCaseResult {
              "error": undefined,
              "name": "allows WatchPlugins to modify only white-listed global config keys",
              "output": undefined,
              "result": "success",
              "time": 61,
            },
            TestCaseResult {
              "error": undefined,
              "name": "allows WatchPlugins to modify only white-listed global config keys",
              "output": undefined,
              "result": "success",
              "time": 65,
            },
            TestCaseResult {
              "error": undefined,
              "name": "allows WatchPlugins to modify only white-listed global config keys",
              "output": undefined,
              "result": "success",
              "time": 65,
            },
            TestCaseResult {
              "error": undefined,
              "name": "allows WatchPlugins to modify only white-listed global config keys",
              "output": undefined,
              "result": "success",
              "time": 70,
            },
            TestCaseResult {
              "error": undefined,
              "name": "allows WatchPlugins to modify only white-listed global config keys",
              "output": undefined,
              "result": "success",
              "time": 66,
            },
            TestCaseResult {
              "error": undefined,
              "name": "allows WatchPlugins to modify only white-listed global config keys",
              "output": undefined,
              "result": "success",
              "time": 65,
            },
            TestCaseResult {
              "error": undefined,
              "name": "allows WatchPlugins to modify only white-listed global config keys",
              "output": undefined,
              "result": "success",
              "time": 110,
            },
            TestCaseResult {
              "error": undefined,
              "name": "allows WatchPlugins to modify only white-listed global config keys",
              "output": undefined,
              "result": "success",
              "time": 84,
            },
            TestCaseResult {
              "error": undefined,
              "name": "allows WatchPlugins to modify only white-listed global config keys",
              "output": undefined,
              "result": "success",
              "time": 69,
            },
            TestCaseResult {
              "error": undefined,
              "name": "allows WatchPlugins to modify only white-listed global config keys",
              "output": undefined,
              "result": "success",
              "time": 78,
            },
            TestCaseResult {
              "error": undefined,
              "name": "allows WatchPlugins to modify only white-listed global config keys",
              "output": undefined,
              "result": "success",
              "time": 87,
            },
            TestCaseResult {
              "error": undefined,
              "name": "allows WatchPlugins to modify only white-listed global config keys",
              "output": undefined,
              "result": "success",
              "time": 93,
            },
            TestCaseResult {
              "error": undefined,
              "name": "allows WatchPlugins to modify only white-listed global config keys",
              "output": undefined,
              "result": "success",
              "time": 82,
            },
            TestCaseResult {
              "error": undefined,
              "name": "allows WatchPlugins to modify only white-listed global config keys",
              "output": undefined,
              "result": "success",
              "time": 131,
            },
            TestCaseResult {
              "error": undefined,
              "name": "allows WatchPlugins to modify only white-listed global config keys",
              "output": undefined,
              "result": "success",
              "time": 248,
            },
            TestCaseResult {
              "error": undefined,
              "name": "allows WatchPlugins to modify only white-listed global config keys",
              "output": undefined,
              "result": "success",
              "time": 77,
            },
            TestCaseResult {
              "error": undefined,
              "name": "allows WatchPlugins to modify only white-listed global config keys",
              "output": undefined,
              "result": "success",
              "time": 64,
            },
            TestCaseResult {
              "error": undefined,
              "name": "allows WatchPlugins to modify only white-listed global config keys",
              "output": undefined,
              "result": "success",
              "time": 86,
            },
            TestCaseResult {
              "error": undefined,
              "name": "allows WatchPlugins to modify only white-listed global config keys",
              "output": undefined,
              "result": "success",
              "time": 72,
            },
            TestCaseResult {
              "error": undefined,
              "name": "allows WatchPlugins to modify only white-listed global config keys",
              "output": undefined,
              "result": "success",
              "time": 74,
            },
            TestCaseResult {
              "error": undefined,
              "name": "allows WatchPlugins to modify only white-listed global config keys",
              "output": undefined,
              "result": "success",
              "time": 60,
            },
            TestCaseResult {
              "error": undefined,
              "name": "triggers enter on a WatchPlugin when its key is pressed",
              "output": undefined,
              "result": "success",
              "time": 73,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prevents Jest from handling keys when active and returns control when end is called",
              "output": undefined,
              "result": "success",
              "time": 68,
            },
            TestCaseResult {
              "error": undefined,
              "name": "Pressing \\"o\\" runs test in \\"only changed files\\" mode",
              "output": undefined,
              "result": "success",
              "time": 69,
            },
            TestCaseResult {
              "error": undefined,
              "name": "Pressing \\"a\\" runs test in \\"watch all\\" mode",
              "output": undefined,
              "result": "success",
              "time": 62,
            },
            TestCaseResult {
              "error": undefined,
              "name": "Pressing \\"ENTER\\" reruns the tests",
              "output": undefined,
              "result": "success",
              "time": 108,
            },
            TestCaseResult {
              "error": undefined,
              "name": "Pressing \\"t\\" reruns the tests in \\"test name pattern\\" mode",
              "output": undefined,
              "result": "success",
              "time": 93,
            },
            TestCaseResult {
              "error": undefined,
              "name": "Pressing \\"p\\" reruns the tests in \\"filename pattern\\" mode",
              "output": undefined,
              "result": "success",
              "time": 80,
            },
            TestCaseResult {
              "error": undefined,
              "name": "Can combine \\"p\\" and \\"t\\" filters",
              "output": undefined,
              "result": "success",
              "time": 68,
            },
            TestCaseResult {
              "error": undefined,
              "name": "Pressing \\"u\\" reruns the tests in \\"update snapshot\\" mode",
              "output": undefined,
              "result": "success",
              "time": 67,
            },
            TestCaseResult {
              "error": undefined,
              "name": "passWithNoTest should be set to true in watch mode",
              "output": undefined,
              "result": "success",
              "time": 65,
            },
            TestCaseResult {
              "error": undefined,
              "name": "shows the correct usage for the f key in \\"only failed tests\\" mode",
              "output": undefined,
              "result": "success",
              "time": 62,
            },
          ],
        },
        TestGroupResult {
          "name": "Watch mode flows when dealing with potential watch plugin key conflicts",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "forbids WatchPlugins overriding reserved internal plugins",
              "output": undefined,
              "result": "success",
              "time": 70,
            },
            TestCaseResult {
              "error": undefined,
              "name": "forbids WatchPlugins overriding reserved internal plugins",
              "output": undefined,
              "result": "success",
              "time": 58,
            },
            TestCaseResult {
              "error": undefined,
              "name": "forbids WatchPlugins overriding reserved internal plugins",
              "output": undefined,
              "result": "success",
              "time": 62,
            },
            TestCaseResult {
              "error": undefined,
              "name": "allows WatchPlugins to override non-reserved internal plugins",
              "output": undefined,
              "result": "success",
              "time": 68,
            },
            TestCaseResult {
              "error": undefined,
              "name": "allows WatchPlugins to override non-reserved internal plugins",
              "output": undefined,
              "result": "success",
              "time": 62,
            },
            TestCaseResult {
              "error": undefined,
              "name": "forbids third-party WatchPlugins overriding each other",
              "output": undefined,
              "result": "success",
              "time": 78,
            },
          ],
        },
      ],
      "name": "packages/jest-core/src/__tests__/watch.test.js",
      "output": undefined,
      "totalTime": 6755,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "transitive dependencies",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "mocks a manually mocked and mapped module",
              "output": undefined,
              "result": "success",
              "time": 618,
            },
            TestCaseResult {
              "error": undefined,
              "name": "unmocks transitive dependencies in node_modules by default",
              "output": undefined,
              "result": "success",
              "time": 357,
            },
            TestCaseResult {
              "error": undefined,
              "name": "unmocks transitive dependencies in node_modules when using unmock",
              "output": undefined,
              "result": "success",
              "time": 360,
            },
            TestCaseResult {
              "error": undefined,
              "name": "unmocks transitive dependencies in node_modules by default when using both patterns and unmock",
              "output": undefined,
              "result": "success",
              "time": 415,
            },
            TestCaseResult {
              "error": undefined,
              "name": "mocks deep dependencies when using unmock",
              "output": undefined,
              "result": "success",
              "time": 299,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not mock deep dependencies when using deepUnmock",
              "output": undefined,
              "result": "success",
              "time": 258,
            },
          ],
        },
      ],
      "name": "packages/jest-runtime/src/__tests__/runtime_require_module_or_mock_transitive_deps.test.js",
      "output": undefined,
      "totalTime": 2366,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "Watch mode flows with changed files",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should correct require new files without legacy cache",
              "output": undefined,
              "result": "success",
              "time": 1430,
            },
          ],
        },
      ],
      "name": "packages/jest-core/src/__tests__/watchFileChanges.test.ts",
      "output": undefined,
      "totalTime": 1514,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "HasteMap",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "exports constants",
              "output": undefined,
              "result": "success",
              "time": 272,
            },
            TestCaseResult {
              "error": undefined,
              "name": "creates valid cache file paths",
              "output": undefined,
              "result": "success",
              "time": 9,
            },
            TestCaseResult {
              "error": undefined,
              "name": "creates different cache file paths for different roots",
              "output": undefined,
              "result": "success",
              "time": 9,
            },
            TestCaseResult {
              "error": undefined,
              "name": "creates different cache file paths for different dependency extractor cache keys",
              "output": undefined,
              "result": "success",
              "time": 14,
            },
            TestCaseResult {
              "error": undefined,
              "name": "creates different cache file paths for different hasteImplModulePath cache keys",
              "output": undefined,
              "result": "success",
              "time": 10,
            },
            TestCaseResult {
              "error": undefined,
              "name": "creates different cache file paths for different projects",
              "output": undefined,
              "result": "success",
              "time": 22,
            },
            TestCaseResult {
              "error": undefined,
              "name": "matches files against a pattern",
              "output": undefined,
              "result": "success",
              "time": 10,
            },
            TestCaseResult {
              "error": undefined,
              "name": "ignores files given a pattern",
              "output": undefined,
              "result": "success",
              "time": 6,
            },
            TestCaseResult {
              "error": undefined,
              "name": "ignores vcs directories without ignore pattern",
              "output": undefined,
              "result": "success",
              "time": 6,
            },
            TestCaseResult {
              "error": undefined,
              "name": "ignores vcs directories with ignore pattern regex",
              "output": undefined,
              "result": "success",
              "time": 5,
            },
            TestCaseResult {
              "error": undefined,
              "name": "warn on ignore pattern except for regex",
              "output": undefined,
              "result": "success",
              "time": 6,
            },
            TestCaseResult {
              "error": undefined,
              "name": "builds a haste map on a fresh cache",
              "output": undefined,
              "result": "success",
              "time": 7,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not crawl native files even if requested to do so",
              "output": undefined,
              "result": "success",
              "time": 5,
            },
            TestCaseResult {
              "error": undefined,
              "name": "retains all files if \`retainAllFiles\` is specified",
              "output": undefined,
              "result": "success",
              "time": 9,
            },
            TestCaseResult {
              "error": undefined,
              "name": "warns on duplicate mock files",
              "output": undefined,
              "result": "success",
              "time": 5,
            },
            TestCaseResult {
              "error": undefined,
              "name": "warns on duplicate module ids",
              "output": undefined,
              "result": "success",
              "time": 6,
            },
            TestCaseResult {
              "error": undefined,
              "name": "warns on duplicate module ids only once",
              "output": undefined,
              "result": "success",
              "time": 5,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws on duplicate module ids if \\"throwOnModuleCollision\\" is set to true",
              "output": undefined,
              "result": "success",
              "time": 5,
            },
            TestCaseResult {
              "error": undefined,
              "name": "splits up modules by platform",
              "output": undefined,
              "result": "success",
              "time": 5,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not access the file system on a warm cache with no changes",
              "output": undefined,
              "result": "success",
              "time": 11,
            },
            TestCaseResult {
              "error": undefined,
              "name": "only does minimal file system access when files change",
              "output": undefined,
              "result": "success",
              "time": 6,
            },
            TestCaseResult {
              "error": undefined,
              "name": "correctly handles file deletions",
              "output": undefined,
              "result": "success",
              "time": 6,
            },
            TestCaseResult {
              "error": undefined,
              "name": "correctly handles platform-specific file additions",
              "output": undefined,
              "result": "success",
              "time": 8,
            },
            TestCaseResult {
              "error": undefined,
              "name": "correctly handles platform-specific file deletions",
              "output": undefined,
              "result": "success",
              "time": 5,
            },
            TestCaseResult {
              "error": undefined,
              "name": "correctly handles platform-specific file renames",
              "output": undefined,
              "result": "success",
              "time": 5,
            },
            TestCaseResult {
              "error": undefined,
              "name": "discards the cache when configuration changes",
              "output": undefined,
              "result": "success",
              "time": 6,
            },
            TestCaseResult {
              "error": undefined,
              "name": "ignores files that do not exist",
              "output": undefined,
              "result": "success",
              "time": 53,
            },
            TestCaseResult {
              "error": undefined,
              "name": "distributes work across workers",
              "output": undefined,
              "result": "success",
              "time": 5,
            },
            TestCaseResult {
              "error": undefined,
              "name": "tries to crawl using node as a fallback",
              "output": undefined,
              "result": "success",
              "time": 7,
            },
            TestCaseResult {
              "error": undefined,
              "name": "tries to crawl using node as a fallback when promise fails once",
              "output": undefined,
              "result": "success",
              "time": 10,
            },
            TestCaseResult {
              "error": undefined,
              "name": "stops crawling when both crawlers fail",
              "output": undefined,
              "result": "success",
              "time": 5,
            },
          ],
        },
        TestGroupResult {
          "name": "HasteMap builds a haste map on a fresh cache with SHA-1s",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "uses watchman: false",
              "output": undefined,
              "result": "success",
              "time": 6,
            },
            TestCaseResult {
              "error": undefined,
              "name": "uses watchman: true",
              "output": undefined,
              "result": "success",
              "time": 15,
            },
          ],
        },
        TestGroupResult {
          "name": "HasteMap duplicate modules",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "recovers when a duplicate file is deleted",
              "output": undefined,
              "result": "success",
              "time": 6,
            },
            TestCaseResult {
              "error": undefined,
              "name": "recovers with the correct type when a duplicate file is deleted",
              "output": undefined,
              "result": "success",
              "time": 6,
            },
            TestCaseResult {
              "error": undefined,
              "name": "recovers when a duplicate module is renamed",
              "output": undefined,
              "result": "success",
              "time": 12,
            },
          ],
        },
        TestGroupResult {
          "name": "HasteMap file system changes processing",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "provides a new set of hasteHS and moduleMap",
              "output": undefined,
              "result": "success",
              "time": 41,
            },
            TestCaseResult {
              "error": undefined,
              "name": "handles several change events at once",
              "output": undefined,
              "result": "success",
              "time": 35,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not emit duplicate change events",
              "output": undefined,
              "result": "success",
              "time": 43,
            },
            TestCaseResult {
              "error": undefined,
              "name": "emits a change even if a file in node_modules has changed",
              "output": undefined,
              "result": "success",
              "time": 36,
            },
            TestCaseResult {
              "error": undefined,
              "name": "correctly tracks changes to both platform-specific versions of a single module name",
              "output": undefined,
              "result": "success",
              "time": 35,
            },
          ],
        },
        TestGroupResult {
          "name": "HasteMap file system changes processing recovery from duplicate module IDs",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "recovers when the oldest version of the duplicates is fixed",
              "output": undefined,
              "result": "success",
              "time": 66,
            },
            TestCaseResult {
              "error": undefined,
              "name": "recovers when the most recent duplicate is fixed",
              "output": undefined,
              "result": "success",
              "time": 90,
            },
            TestCaseResult {
              "error": undefined,
              "name": "ignore directories",
              "output": undefined,
              "result": "success",
              "time": 37,
            },
          ],
        },
      ],
      "name": "packages/jest-haste-map/src/__tests__/index.test.js",
      "output": undefined,
      "totalTime": 1145,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "code coverage for Handlebars",
              "output": undefined,
              "result": "success",
              "time": 1830,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/coverageHandlebars.test.ts",
      "output": undefined,
      "totalTime": 1873,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "does not crash when expect involving a DOM node fails",
              "output": undefined,
              "result": "success",
              "time": 1355,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/compareDomNodes.test.ts",
      "output": undefined,
      "totalTime": 1407,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "check is not leaking memory",
              "output": undefined,
              "result": "success",
              "time": 1702,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/jestEnvironmentJsdom.test.ts",
      "output": undefined,
      "totalTime": 1744,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "resolve platform modules",
              "output": undefined,
              "result": "success",
              "time": 1764,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/resolve.test.ts",
      "output": undefined,
      "totalTime": 1863,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "Snapshot",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "stores new snapshots on the first run",
              "output": undefined,
              "result": "success",
              "time": 959,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with escaped characters",
              "output": undefined,
              "result": "success",
              "time": 2154,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with escaped regex",
              "output": undefined,
              "result": "success",
              "time": 1375,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with template literal substitutions",
              "output": undefined,
              "result": "success",
              "time": 1520,
            },
          ],
        },
        TestGroupResult {
          "name": "Snapshot Validation",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "does not save snapshots in CI mode by default",
              "output": undefined,
              "result": "success",
              "time": 890,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works on subsequent runs without \`-u\`",
              "output": undefined,
              "result": "success",
              "time": 1752,
            },
            TestCaseResult {
              "error": undefined,
              "name": "deletes the snapshot if the test suite has been removed",
              "output": undefined,
              "result": "success",
              "time": 1549,
            },
            TestCaseResult {
              "error": undefined,
              "name": "deletes a snapshot when a test does removes all the snapshots",
              "output": undefined,
              "result": "success",
              "time": 1766,
            },
            TestCaseResult {
              "error": undefined,
              "name": "updates the snapshot when a test removes some snapshots",
              "output": undefined,
              "result": "success",
              "time": 1800,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/snapshot.test.ts",
      "output": undefined,
      "totalTime": 13899,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "mocks modules by default when using automocking",
              "output": undefined,
              "result": "success",
              "time": 338,
            },
            TestCaseResult {
              "error": undefined,
              "name": "doesn't mock modules when explicitly unmocked when using automocking",
              "output": undefined,
              "result": "success",
              "time": 100,
            },
            TestCaseResult {
              "error": undefined,
              "name": "doesn't mock modules when explicitly unmocked via a different name",
              "output": undefined,
              "result": "success",
              "time": 45,
            },
            TestCaseResult {
              "error": undefined,
              "name": "doesn't mock modules when disableAutomock() has been called",
              "output": undefined,
              "result": "success",
              "time": 90,
            },
            TestCaseResult {
              "error": undefined,
              "name": "uses manual mock when automocking on and mock is available",
              "output": undefined,
              "result": "success",
              "time": 29,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not use manual mock when automocking is off and a real module is available",
              "output": undefined,
              "result": "success",
              "time": 20,
            },
            TestCaseResult {
              "error": undefined,
              "name": "resolves mapped module names and unmocks them by default",
              "output": undefined,
              "result": "success",
              "time": 88,
            },
            TestCaseResult {
              "error": undefined,
              "name": "automocking is disabled by default",
              "output": undefined,
              "result": "success",
              "time": 21,
            },
            TestCaseResult {
              "error": undefined,
              "name": "unmocks modules in config.unmockedModulePathPatterns for tests with automock enabled when automock is false",
              "output": undefined,
              "result": "success",
              "time": 96,
            },
            TestCaseResult {
              "error": undefined,
              "name": "unmocks virtual mocks after they have been mocked previously",
              "output": undefined,
              "result": "success",
              "time": 116,
            },
          ],
        },
        TestGroupResult {
          "name": "resetModules",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "resets all the modules",
              "output": undefined,
              "result": "success",
              "time": 22,
            },
          ],
        },
        TestGroupResult {
          "name": "isolateModules",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "keeps it's registry isolated from global one",
              "output": undefined,
              "result": "success",
              "time": 22,
            },
            TestCaseResult {
              "error": undefined,
              "name": "resets all modules after the block",
              "output": undefined,
              "result": "success",
              "time": 26,
            },
            TestCaseResult {
              "error": undefined,
              "name": "resets module after failing",
              "output": undefined,
              "result": "success",
              "time": 48,
            },
            TestCaseResult {
              "error": undefined,
              "name": "cannot nest isolateModules blocks",
              "output": undefined,
              "result": "success",
              "time": 50,
            },
            TestCaseResult {
              "error": undefined,
              "name": "can call resetModules within a isolateModules block",
              "output": undefined,
              "result": "success",
              "time": 25,
            },
          ],
        },
        TestGroupResult {
          "name": "isolateModules can use isolateModules from a beforeEach block",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "can use the required module from beforeEach and re-require it",
              "output": undefined,
              "result": "success",
              "time": 9,
            },
          ],
        },
      ],
      "name": "packages/jest-runtime/src/__tests__/runtime_require_module_or_mock.test.js",
      "output": undefined,
      "totalTime": 1223,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "Runtime requireMock",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "uses manual mocks before attempting to automock",
              "output": undefined,
              "result": "success",
              "time": 281,
            },
            TestCaseResult {
              "error": undefined,
              "name": "can resolve modules that are only referenced from mocks",
              "output": undefined,
              "result": "success",
              "time": 38,
            },
            TestCaseResult {
              "error": undefined,
              "name": "stores and re-uses manual mock exports",
              "output": undefined,
              "result": "success",
              "time": 36,
            },
            TestCaseResult {
              "error": undefined,
              "name": "automocks haste modules without a manual mock",
              "output": undefined,
              "result": "success",
              "time": 77,
            },
            TestCaseResult {
              "error": undefined,
              "name": "automocks relative-path modules without a file extension",
              "output": undefined,
              "result": "success",
              "time": 43,
            },
            TestCaseResult {
              "error": undefined,
              "name": "automocks relative-path modules with a file extension",
              "output": undefined,
              "result": "success",
              "time": 36,
            },
            TestCaseResult {
              "error": undefined,
              "name": "just falls back when loading a native module",
              "output": undefined,
              "result": "success",
              "time": 31,
            },
            TestCaseResult {
              "error": undefined,
              "name": "stores and re-uses automocked haste exports",
              "output": undefined,
              "result": "success",
              "time": 31,
            },
            TestCaseResult {
              "error": undefined,
              "name": "stores and re-uses automocked relative-path modules",
              "output": undefined,
              "result": "success",
              "time": 102,
            },
            TestCaseResult {
              "error": undefined,
              "name": "multiple node core modules returns correct module",
              "output": undefined,
              "result": "success",
              "time": 74,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws on non-existent haste modules",
              "output": undefined,
              "result": "success",
              "time": 69,
            },
            TestCaseResult {
              "error": undefined,
              "name": "uses manual mocks when using a custom resolver",
              "output": undefined,
              "result": "success",
              "time": 49,
            },
            TestCaseResult {
              "error": undefined,
              "name": "provides \`require.main\` in mock",
              "output": undefined,
              "result": "success",
              "time": 33,
            },
          ],
        },
      ],
      "name": "packages/jest-runtime/src/__tests__/runtime_require_mock.test.js",
      "output": undefined,
      "totalTime": 962,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "Runtime",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "uses NODE_PATH to find modules",
              "output": undefined,
              "result": "success",
              "time": 303,
            },
            TestCaseResult {
              "error": undefined,
              "name": "uses modulePaths to find modules",
              "output": undefined,
              "result": "success",
              "time": 231,
            },
            TestCaseResult {
              "error": undefined,
              "name": "finds modules in NODE_PATH containing multiple paths",
              "output": undefined,
              "result": "success",
              "time": 248,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not find modules if NODE_PATH is relative",
              "output": undefined,
              "result": "success",
              "time": 260,
            },
          ],
        },
      ],
      "name": "packages/jest-runtime/src/__tests__/runtime_node_path.test.js",
      "output": undefined,
      "totalTime": 1088,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "Runtime require.resolve",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "resolves a module path",
              "output": undefined,
              "result": "success",
              "time": 292,
            },
            TestCaseResult {
              "error": undefined,
              "name": "resolves a module path with moduleNameMapper",
              "output": undefined,
              "result": "success",
              "time": 74,
            },
          ],
        },
        TestGroupResult {
          "name": "Runtime require.resolve with the jest-resolve-outside-vm-option",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "forwards to the real Node require in an internal context",
              "output": undefined,
              "result": "success",
              "time": 87,
            },
            TestCaseResult {
              "error": undefined,
              "name": "ignores the option in an external context",
              "output": undefined,
              "result": "success",
              "time": 127,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not understand a self-constructed outsideJestVmPath in an external context",
              "output": undefined,
              "result": "success",
              "time": 87,
            },
          ],
        },
      ],
      "name": "packages/jest-runtime/src/__tests__/runtime_require_resolve.test.ts",
      "output": undefined,
      "totalTime": 707,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "complains if the value is a primitive",
              "output": undefined,
              "result": "success",
              "time": 3,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not show the GC if hidden",
              "output": undefined,
              "result": "success",
              "time": 80,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not hide the GC if visible",
              "output": undefined,
              "result": "success",
              "time": 34,
            },
            TestCaseResult {
              "error": undefined,
              "name": "correctly checks simple leaks",
              "output": undefined,
              "result": "success",
              "time": 108,
            },
            TestCaseResult {
              "error": undefined,
              "name": "tests different objects",
              "output": undefined,
              "result": "success",
              "time": 445,
            },
            TestCaseResult {
              "error": undefined,
              "name": "correctly checks more complex leaks",
              "output": undefined,
              "result": "success",
              "time": 240,
            },
          ],
        },
      ],
      "name": "packages/jest-leak-detector/src/__tests__/index.test.ts",
      "output": undefined,
      "totalTime": 986,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "async jasmine with pending during test",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "does not work on jest-circus",
              "output": undefined,
              "result": "success",
              "time": 18,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should be reported as a pending test",
              "output": undefined,
              "result": "skipped",
              "time": 0,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/jasmineAsyncWithPendingDuringTest.ts",
      "output": undefined,
      "totalTime": 72,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "config for reporters supports \`default\`",
              "output": undefined,
              "result": "success",
              "time": 14,
            },
            TestCaseResult {
              "error": undefined,
              "name": ".addReporter() .removeReporter()",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "schedule tests run in parallel per default",
              "output": undefined,
              "result": "success",
              "time": 4,
            },
            TestCaseResult {
              "error": undefined,
              "name": "schedule tests run in serial if the runner flags them",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should bail after \`n\` failures",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should not bail if less than \`n\` failures",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should set runInBand to run in serial",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should set runInBand to not run in serial",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
          ],
        },
      ],
      "name": "packages/jest-core/src/__tests__/TestScheduler.test.js",
      "output": undefined,
      "totalTime": 520,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "expect works correctly with RegExps created inside a VM",
              "output": undefined,
              "result": "success",
              "time": 1477,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/expectInVm.test.ts",
      "output": undefined,
      "totalTime": 1527,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "Runtime requireActual",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "requires node module when manual mock exists",
              "output": undefined,
              "result": "success",
              "time": 314,
            },
            TestCaseResult {
              "error": undefined,
              "name": "requireActual with moduleNameMapper",
              "output": undefined,
              "result": "success",
              "time": 51,
            },
          ],
        },
      ],
      "name": "packages/jest-runtime/src/__tests__/runtime_require_actual.test.js",
      "output": undefined,
      "totalTime": 478,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "Runtime require.cache",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "require.cache returns loaded module list as native Nodejs require does",
              "output": undefined,
              "result": "success",
              "time": 388,
            },
            TestCaseResult {
              "error": undefined,
              "name": "require.cache is tolerant readonly",
              "output": undefined,
              "result": "success",
              "time": 31,
            },
          ],
        },
      ],
      "name": "packages/jest-runtime/src/__tests__/runtime_require_cache.test.js",
      "output": undefined,
      "totalTime": 454,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "Runtime",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "uses configured moduleDirectories",
              "output": undefined,
              "result": "success",
              "time": 288,
            },
            TestCaseResult {
              "error": undefined,
              "name": "resolves packages",
              "output": undefined,
              "result": "success",
              "time": 47,
            },
            TestCaseResult {
              "error": undefined,
              "name": "finds closest module from moduleDirectories",
              "output": undefined,
              "result": "success",
              "time": 44,
            },
            TestCaseResult {
              "error": undefined,
              "name": "only checks the configured directories",
              "output": undefined,
              "result": "success",
              "time": 103,
            },
          ],
        },
      ],
      "name": "packages/jest-runtime/src/__tests__/runtime_module_directories.test.js",
      "output": undefined,
      "totalTime": 525,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "Runtime internalModule",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "loads modules and applies transforms",
              "output": undefined,
              "result": "success",
              "time": 170,
            },
            TestCaseResult {
              "error": undefined,
              "name": "loads internal modules without applying transforms",
              "output": undefined,
              "result": "success",
              "time": 162,
            },
            TestCaseResult {
              "error": undefined,
              "name": "loads JSON modules and applies transforms",
              "output": undefined,
              "result": "success",
              "time": 189,
            },
            TestCaseResult {
              "error": undefined,
              "name": "loads internal JSON modules without applying transforms",
              "output": undefined,
              "result": "success",
              "time": 123,
            },
          ],
        },
      ],
      "name": "packages/jest-runtime/src/__tests__/runtime_internal_module.test.js",
      "output": undefined,
      "totalTime": 727,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "check",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "returns true if the arguments are valid",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "raises an exception if runInBand and maxWorkers are both specified",
              "output": undefined,
              "result": "success",
              "time": 23,
            },
            TestCaseResult {
              "error": undefined,
              "name": "raises an exception if onlyChanged and watchAll are both specified",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "raises an exception if onlyFailures and watchAll are both specified",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "raises an exception when lastCommit and watchAll are both specified",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "raises an exception if findRelatedTests is specified with no file paths",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "raises an exception if maxWorkers is specified with no number",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "allows maxWorkers to be a %",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "allows using \\"js\\" file for --config option",
              "output": undefined,
              "result": "success",
              "time": 10,
            },
            TestCaseResult {
              "error": undefined,
              "name": "allows using \\"ts\\" file for --config option",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "allows using \\"mjs\\" file for --config option",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "allows using \\"cjs\\" file for --config option",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "allows using \\"json\\" file for --config option",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "raises an exception if selectProjects is not provided any project names",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "raises an exception if config is not a valid JSON string",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "raises an exception if config is not a supported file type",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "buildArgv",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should return only camelcased args",
              "output": undefined,
              "result": "success",
              "time": 14,
            },
          ],
        },
      ],
      "name": "packages/jest-cli/src/__tests__/cli/args.test.ts",
      "output": undefined,
      "totalTime": 345,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "Runtime jest.spyOn",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "calls the original function",
              "output": undefined,
              "result": "success",
              "time": 395,
            },
          ],
        },
        TestGroupResult {
          "name": "Runtime jest.spyOnProperty",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "calls the original function",
              "output": undefined,
              "result": "success",
              "time": 43,
            },
          ],
        },
      ],
      "name": "packages/jest-runtime/src/__tests__/runtime_jest_spy_on.test.js",
      "output": undefined,
      "totalTime": 521,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "resolves no dependencies for non-existent path",
              "output": undefined,
              "result": "success",
              "time": 72,
            },
            TestCaseResult {
              "error": undefined,
              "name": "resolves dependencies for existing path",
              "output": undefined,
              "result": "success",
              "time": 30,
            },
            TestCaseResult {
              "error": undefined,
              "name": "includes the mocks of dependencies as dependencies",
              "output": undefined,
              "result": "success",
              "time": 67,
            },
            TestCaseResult {
              "error": undefined,
              "name": "resolves dependencies for scoped packages",
              "output": undefined,
              "result": "success",
              "time": 41,
            },
            TestCaseResult {
              "error": undefined,
              "name": "resolves no inverse dependencies for empty paths set",
              "output": undefined,
              "result": "success",
              "time": 51,
            },
            TestCaseResult {
              "error": undefined,
              "name": "resolves no inverse dependencies for set of non-existent paths",
              "output": undefined,
              "result": "success",
              "time": 41,
            },
            TestCaseResult {
              "error": undefined,
              "name": "resolves inverse dependencies for existing path",
              "output": undefined,
              "result": "success",
              "time": 27,
            },
            TestCaseResult {
              "error": undefined,
              "name": "resolves inverse dependencies of mock",
              "output": undefined,
              "result": "success",
              "time": 26,
            },
            TestCaseResult {
              "error": undefined,
              "name": "resolves inverse dependencies from available snapshot",
              "output": undefined,
              "result": "success",
              "time": 47,
            },
            TestCaseResult {
              "error": undefined,
              "name": "resolves dependencies correctly when dependency resolution fails",
              "output": undefined,
              "result": "success",
              "time": 41,
            },
            TestCaseResult {
              "error": undefined,
              "name": "resolves dependencies correctly when mock dependency resolution fails",
              "output": undefined,
              "result": "success",
              "time": 27,
            },
          ],
        },
      ],
      "name": "packages/jest-resolve-dependencies/src/__tests__/dependency_resolver.test.ts",
      "output": undefined,
      "totalTime": 666,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should exclude jasmine from stack trace for Unix paths.",
              "output": undefined,
              "result": "success",
              "time": 4,
            },
            TestCaseResult {
              "error": undefined,
              "name": ".formatExecError()",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "formatStackTrace should strip node internals",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should not exclude vendor from stack trace",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "retains message in babel code frame error",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "codeframe",
              "output": undefined,
              "result": "success",
              "time": 3,
            },
            TestCaseResult {
              "error": undefined,
              "name": "no codeframe",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "no stack",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "formatStackTrace",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "prints code frame and stacktrace",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not print code frame when noCodeFrame = true",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not print codeframe when noStackTrace = true",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "packages/jest-message-util/src/__tests__/messages.test.ts",
      "output": undefined,
      "totalTime": 205,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "different types",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "'1' and 'a'",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "'[object Object]' and 'a'",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "'' and '2'",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "'null' and 'undefined'",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "'() => {}' and '3'",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "no visual difference",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "'\\"a\\"' and '\\"a\\"'",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "'{}' and '{}'",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "'[]' and '[]'",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "'[1,2]' and '[1,2]'",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "'11' and '11'",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "'null' and 'null'",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "'null' and 'null'",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "'undefined' and 'undefined'",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "'null' and 'null'",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "'undefined' and 'undefined'",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "'false' and 'false'",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "'{\\"a\\":1}' and '{\\"a\\":1}'",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "'{\\"a\\":{\\"b\\":5}}' and '{\\"a\\":{\\"b\\":5}}'",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "Map key order should be irrelevant",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "Set value order should be irrelevant",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "oneline strings",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "numbers",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "-0 and 0",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "booleans",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "collapses big diffs to patch format",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "falls back to not call toJSON if serialization has no differences",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "but then objects have differences",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "and then objects have no differences",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "falls back to not call toJSON if it throws",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "and then objects have differences",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "and then objects have no differences",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "multiline strings",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "(unexpanded)",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "(expanded)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "objects",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "(unexpanded)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "(expanded)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "multiline string non-snapshot",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "(unexpanded)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "(expanded)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "multiline string snapshot",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "(unexpanded)",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "(expanded)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "React elements",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "(unexpanded)",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "(expanded)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "multiline string as value of object property (non-snapshot)",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "(unexpanded)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "(expanded)",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "multiline string as value of object property (snapshot)",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "(unexpanded)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "(expanded)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "indentation in JavaScript structures from less to more",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "(unexpanded)",
              "output": undefined,
              "result": "success",
              "time": 7,
            },
            TestCaseResult {
              "error": undefined,
              "name": "(expanded)",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "indentation in JavaScript structures from more to less",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "(unexpanded)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "(expanded)",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "color of text",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "(expanded)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "(unexpanded)",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "indentation in React elements (non-snapshot) from less to more",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "(unexpanded)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "(expanded)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "indentation in React elements (non-snapshot) from more to less",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "(unexpanded)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "(expanded)",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "indentation in React elements (snapshot) from less to more",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "(unexpanded)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "(expanded)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "indentation in React elements (snapshot) from more to less",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "(unexpanded)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "(expanded)",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "outer React element (non-snapshot) from less to more",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "(unexpanded)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "(expanded)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "outer React element (non-snapshot) from more to less",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "(unexpanded)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "(expanded)",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "trailing newline in multiline string not enclosed in quotes from less to more",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "(unexpanded)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "(expanded)",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "trailing newline in multiline string not enclosed in quotes from more to less",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "(unexpanded)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "(expanded)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "context",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "number of lines: -1 (5 default)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "number of lines: 0",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "number of lines: 1",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "number of lines: 2",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "number of lines: 3.1 (5 default)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "number of lines: undefined (5 default)",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "diffLinesUnified edge cases",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "a empty string b empty string",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "a empty string b one line",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "a multiple lines b empty string",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "a one line b multiple lines",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "diffLinesUnified2 edge cases",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "a empty string b empty string",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "a empty string b one line",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "a multiple lines b empty string",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "a one line b multiple lines",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "diffLinesUnified2 edge cases lengths not equal",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "a",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "b",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "diffStringsUnified edge cases",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "empty both a and b",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "empty only a",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "empty only b",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "equal both non-empty",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "multiline has no common after clean up chaff",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "one-line has no common after clean up chaff",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "options 7980",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "diff",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "diffStringsUnified",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "options change indicators",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "diff",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "options change color",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "diffStringsUnified",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "no diff",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "options common",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "diff",
              "output": undefined,
              "result": "success",
              "time": 5,
            },
            TestCaseResult {
              "error": undefined,
              "name": "no diff",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "options includeChangeCounts false",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "diffLinesUnified",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "diffStringsUnified",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "options includeChangeCounts true padding",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "diffLinesUnified a has 2 digits",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "diffLinesUnified b has 2 digits",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "diffStringsUnified",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "options omitAnnotationLines true",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "diff",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "diffStringsUnified and includeChangeCounts true",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "diffStringsUnified empty strings",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "options trailingSpaceFormatter",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "diffDefault default no color",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "diffDefault middle dot",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "diffDefault yellowish common",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "options emptyFirstOrLastLinePlaceholder default empty string",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "diffDefault",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "diffStringsUnified",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "packages/jest-diff/src/__tests__/diff.test.ts",
      "output": undefined,
      "totalTime": 625,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "Watch mode flows",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "Pressing \\"T\\" enters pattern mode",
              "output": undefined,
              "result": "success",
              "time": 8,
            },
          ],
        },
      ],
      "name": "packages/jest-core/src/__tests__/watchTestNamePatternMode.test.js",
      "output": undefined,
      "totalTime": 246,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "toBeCalled",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "works only on spies or jest.fn",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "passes when called",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": ".not passes when called",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails with any argument passed",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": ".not fails with any argument passed",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "includes the custom mock name in the error message",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "toHaveBeenCalled",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "works only on spies or jest.fn",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "passes when called",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": ".not passes when called",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails with any argument passed",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": ".not fails with any argument passed",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "includes the custom mock name in the error message",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "toBeCalledTimes",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": ".not works only on spies or jest.fn",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "only accepts a number argument",
              "output": undefined,
              "result": "success",
              "time": 5,
            },
            TestCaseResult {
              "error": undefined,
              "name": ".not only accepts a number argument",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "passes if function called equal to expected times",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": ".not passes if function called more than expected times",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": ".not passes if function called less than expected times",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "includes the custom mock name in the error message",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "toHaveBeenCalledTimes",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": ".not works only on spies or jest.fn",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "only accepts a number argument",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": ".not only accepts a number argument",
              "output": undefined,
              "result": "success",
              "time": 4,
            },
            TestCaseResult {
              "error": undefined,
              "name": "passes if function called equal to expected times",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": ".not passes if function called more than expected times",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": ".not passes if function called less than expected times",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "includes the custom mock name in the error message",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "lastCalledWith",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "works only on spies or jest.fn",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works when not called",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with no arguments",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with arguments that don't match",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with arguments that match",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with trailing undefined arguments",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with Map",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with Set",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with Immutable.js objects",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with many arguments",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with many arguments that don't match",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "includes the custom mock name in the error message",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "toHaveBeenLastCalledWith",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "works only on spies or jest.fn",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works when not called",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with no arguments",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with arguments that don't match",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with arguments that match",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with trailing undefined arguments",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with Map",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with Set",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with Immutable.js objects",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with many arguments",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with many arguments that don't match",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "includes the custom mock name in the error message",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "nthCalledWith",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "works only on spies or jest.fn",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works when not called",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with no arguments",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with arguments that don't match",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with arguments that match",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with trailing undefined arguments",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with Map",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with Set",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with Immutable.js objects",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with three calls",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "positive throw matcher error for n that is not positive integer",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "positive throw matcher error for n that is not integer",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "negative throw matcher error for n that is not integer",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "includes the custom mock name in the error message",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "toHaveBeenNthCalledWith",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "works only on spies or jest.fn",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works when not called",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with no arguments",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with arguments that don't match",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with arguments that match",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with trailing undefined arguments",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with Map",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with Set",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with Immutable.js objects",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with three calls",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "positive throw matcher error for n that is not positive integer",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "positive throw matcher error for n that is not integer",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "negative throw matcher error for n that is not integer",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "includes the custom mock name in the error message",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "toBeCalledWith",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "works only on spies or jest.fn",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works when not called",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with no arguments",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with arguments that don't match",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with arguments that match",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with trailing undefined arguments",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with Map",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with Set",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with Immutable.js objects",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with many arguments",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with many arguments that don't match",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "includes the custom mock name in the error message",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "toHaveBeenCalledWith",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "works only on spies or jest.fn",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works when not called",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with no arguments",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with arguments that don't match",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with arguments that match",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with trailing undefined arguments",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with Map",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with Set",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with Immutable.js objects",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with many arguments",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with many arguments that don't match",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "includes the custom mock name in the error message",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "toReturn",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": ".not works only on jest.fn",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throw matcher error if received is spy",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "passes when returned",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "passes when undefined is returned",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "passes when at least one call does not throw",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": ".not passes when not returned",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": ".not passes when all calls throw",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": ".not passes when a call throws undefined",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails with any argument passed",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": ".not fails with any argument passed",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "includes the custom mock name in the error message",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "incomplete recursive calls are handled properly",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "toHaveReturned",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": ".not works only on jest.fn",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throw matcher error if received is spy",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "passes when returned",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "passes when undefined is returned",
              "output": undefined,
              "result": "success",
              "time": 3,
            },
            TestCaseResult {
              "error": undefined,
              "name": "passes when at least one call does not throw",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": ".not passes when not returned",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": ".not passes when all calls throw",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": ".not passes when a call throws undefined",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails with any argument passed",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": ".not fails with any argument passed",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "includes the custom mock name in the error message",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "incomplete recursive calls are handled properly",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "toReturnTimes",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "throw matcher error if received is spy",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "only accepts a number argument",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": ".not only accepts a number argument",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "passes if function returned equal to expected times",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls that return undefined are counted as returns",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": ".not passes if function returned more than expected times",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": ".not passes if function called less than expected times",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls that throw are not counted",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls that throw undefined are not counted",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "includes the custom mock name in the error message",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "incomplete recursive calls are handled properly",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "toHaveReturnedTimes",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "throw matcher error if received is spy",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "only accepts a number argument",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": ".not only accepts a number argument",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "passes if function returned equal to expected times",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls that return undefined are counted as returns",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": ".not passes if function returned more than expected times",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": ".not passes if function called less than expected times",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls that throw are not counted",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls that throw undefined are not counted",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "includes the custom mock name in the error message",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "incomplete recursive calls are handled properly",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "lastReturnedWith",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "works only on spies or jest.fn",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works when not called",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with no arguments",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with argument that does not match",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with argument that does match",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with undefined",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with Map",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with Set",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with Immutable.js objects directly created",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with Immutable.js objects indirectly created",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "a call that throws is not considered to have returned",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "a call that throws undefined is not considered to have returned",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "includes the custom mock name in the error message",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "lastReturnedWith lastReturnedWith",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "works with three calls",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "incomplete recursive calls are handled properly",
              "output": undefined,
              "result": "success",
              "time": 5,
            },
          ],
        },
        TestGroupResult {
          "name": "toHaveLastReturnedWith",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "works only on spies or jest.fn",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works when not called",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with no arguments",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with argument that does not match",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with argument that does match",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with undefined",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with Map",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with Set",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with Immutable.js objects directly created",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with Immutable.js objects indirectly created",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "a call that throws is not considered to have returned",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "a call that throws undefined is not considered to have returned",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "includes the custom mock name in the error message",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "toHaveLastReturnedWith lastReturnedWith",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "works with three calls",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "incomplete recursive calls are handled properly",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "nthReturnedWith",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "works only on spies or jest.fn",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works when not called",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with no arguments",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with argument that does not match",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with argument that does match",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with undefined",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with Map",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with Set",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with Immutable.js objects directly created",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with Immutable.js objects indirectly created",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "a call that throws is not considered to have returned",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "a call that throws undefined is not considered to have returned",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "includes the custom mock name in the error message",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "nthReturnedWith nthReturnedWith",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "works with three calls",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should replace 1st, 2nd, 3rd with first, second, third",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "positive throw matcher error for n that is not positive integer",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should reject nth value greater than number of calls",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "positive throw matcher error for n that is not integer",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "negative throw matcher error for n that is not number",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "incomplete recursive calls are handled properly",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
          ],
        },
        TestGroupResult {
          "name": "toHaveNthReturnedWith",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "works only on spies or jest.fn",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works when not called",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with no arguments",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with argument that does not match",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with argument that does match",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with undefined",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with Map",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with Set",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with Immutable.js objects directly created",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with Immutable.js objects indirectly created",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "a call that throws is not considered to have returned",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "a call that throws undefined is not considered to have returned",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "includes the custom mock name in the error message",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "toHaveNthReturnedWith nthReturnedWith",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "works with three calls",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should replace 1st, 2nd, 3rd with first, second, third",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "positive throw matcher error for n that is not positive integer",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should reject nth value greater than number of calls",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "positive throw matcher error for n that is not integer",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "negative throw matcher error for n that is not number",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "incomplete recursive calls are handled properly",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "toReturnWith",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "works only on spies or jest.fn",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works when not called",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with no arguments",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with argument that does not match",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with argument that does match",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with undefined",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with Map",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with Set",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with Immutable.js objects directly created",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with Immutable.js objects indirectly created",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "a call that throws is not considered to have returned",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "a call that throws undefined is not considered to have returned",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "includes the custom mock name in the error message",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "toReturnWith returnedWith",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "works with more calls than the limit",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "incomplete recursive calls are handled properly",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "toHaveReturnedWith",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "works only on spies or jest.fn",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works when not called",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with no arguments",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with argument that does not match",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with argument that does match",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with undefined",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with Map",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with Set",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with Immutable.js objects directly created",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with Immutable.js objects indirectly created",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "a call that throws is not considered to have returned",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "a call that throws undefined is not considered to have returned",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "includes the custom mock name in the error message",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "toHaveReturnedWith returnedWith",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "works with more calls than the limit",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "incomplete recursive calls are handled properly",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "packages/expect/src/__tests__/spyMatchers.test.ts",
      "output": undefined,
      "totalTime": 395,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "gets hg SCM roots and dedupes them",
              "output": undefined,
              "result": "success",
              "time": 559,
            },
            TestCaseResult {
              "error": undefined,
              "name": "gets git SCM roots and dedupes them",
              "output": undefined,
              "result": "success",
              "time": 416,
            },
            TestCaseResult {
              "error": undefined,
              "name": "gets mixed git and hg SCM roots and dedupes them",
              "output": undefined,
              "result": "success",
              "time": 467,
            },
            TestCaseResult {
              "error": undefined,
              "name": "gets changed files for git",
              "output": undefined,
              "result": "success",
              "time": 2298,
            },
            TestCaseResult {
              "error": undefined,
              "name": "monitors only root paths for git",
              "output": undefined,
              "result": "success",
              "time": 151,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not find changes in files with no diff, for git",
              "output": undefined,
              "result": "success",
              "time": 628,
            },
            TestCaseResult {
              "error": undefined,
              "name": "handles a bad revision for \\"changedSince\\", for git",
              "output": undefined,
              "result": "success",
              "time": 878,
            },
            TestCaseResult {
              "error": Object {
                "details": "Error: abort: empty revision range
    at makeError (/home/dorny/dorny/jest/node_modules/execa/lib/error.js:59:11)
    at handlePromise (/home/dorny/dorny/jest/node_modules/execa/index.js:114:26)
    at runMicrotasks (<anonymous>)
    at processTicksAndRejections (internal/process/task_queues.js:97:5)
    at Object.findChangedFiles (/home/dorny/dorny/jest/packages/jest-changed-files/build/hg.js:99:16)
    at async Promise.all (index 0)
    at getChangedFilesForRoots (/home/dorny/dorny/jest/packages/jest-changed-files/build/index.js:57:5)
    at Object.<anonymous> (/home/dorny/dorny/jest/e2e/__tests__/jestChangedFiles.test.ts:418:28)
    at _callCircusTest (/home/dorny/dorny/jest/packages/jest-circus/build/run.js:218:5)
    at _runTest (/home/dorny/dorny/jest/packages/jest-circus/build/run.js:155:3)",
                "line": 418,
                "path": "e2e/__tests__/jestChangedFiles.test.ts",
              },
              "name": "gets changed files for hg",
              "output": undefined,
              "result": "failed",
              "time": 2219,
            },
            TestCaseResult {
              "error": undefined,
              "name": "monitors only root paths for hg",
              "output": undefined,
              "result": "success",
              "time": 281,
            },
            TestCaseResult {
              "error": undefined,
              "name": "handles a bad revision for \\"changedSince\\", for hg",
              "output": undefined,
              "result": "success",
              "time": 949,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/jestChangedFiles.test.ts",
      "output": undefined,
      "totalTime": 9045,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "stringify()",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "[]",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{}",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "1",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "0",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "1.5",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "null",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "undefined",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "\\"abc\\"",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "Symbol(abc)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "NaN",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "Infinity",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "-Infinity",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "/ab\\\\.c/gi",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "1n",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "0n",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "circular references",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "toJSON error",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "toJSON errors when comparing two objects",
              "output": undefined,
              "result": "success",
              "time": 3,
            },
            TestCaseResult {
              "error": undefined,
              "name": "reduces maxDepth if stringifying very large objects",
              "output": undefined,
              "result": "success",
              "time": 96,
            },
          ],
        },
        TestGroupResult {
          "name": "ensureNumbers()",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "dont throw error when variables are numbers",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws error when expected is not a number (backward compatibility)",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws error when received is not a number (backward compatibility)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "ensureNumbers() with options",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "promise empty isNot false received",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "promise empty isNot true expected",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "promise rejects isNot false expected",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "promise rejects isNot true received",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "promise resolves isNot false received",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "promise resolves isNot true expected",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "ensureNoExpected()",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "dont throw error when undefined",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws error when expected is not undefined with matcherName",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws error when expected is not undefined with matcherName and options",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "diff",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "forwards to jest-diff",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "two booleans",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "two numbers",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "two bigints",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "pluralize()",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "one",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "two",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "20",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "getLabelPrinter",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "0 args",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "1 empty string",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "1 non-empty string",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "2 equal lengths",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "2 unequal lengths",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "returns incorrect padding if inconsistent arg is shorter",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws if inconsistent arg is longer",
              "output": undefined,
              "result": "success",
              "time": 26,
            },
          ],
        },
        TestGroupResult {
          "name": "matcherHint",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "expectedColor",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "receivedColor",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "secondArgumentColor",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "packages/jest-matcher-utils/src/__tests__/index.test.ts",
      "output": undefined,
      "totalTime": 391,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "Watch mode flows",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "Pressing \\"P\\" enters pattern mode",
              "output": undefined,
              "result": "success",
              "time": 7,
            },
            TestCaseResult {
              "error": undefined,
              "name": "Pressing \\"c\\" clears the filters",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
      ],
      "name": "packages/jest-core/src/__tests__/watchFilenamePatternMode.test.js",
      "output": undefined,
      "totalTime": 165,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "Runtime createMockFromModule",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "does not cause side effects in the rest of the module system when generating a mock",
              "output": undefined,
              "result": "success",
              "time": 408,
            },
            TestCaseResult {
              "error": undefined,
              "name": "resolves mapped modules correctly",
              "output": undefined,
              "result": "success",
              "time": 94,
            },
          ],
        },
        TestGroupResult {
          "name": "Runtime",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "creates mock objects in the right environment",
              "output": undefined,
              "result": "success",
              "time": 37,
            },
          ],
        },
      ],
      "name": "packages/jest-runtime/src/__tests__/runtime_create_mock_from_module.test.js",
      "output": undefined,
      "totalTime": 606,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "Runtime requireModule",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "emulates a node stack trace during module load",
              "output": undefined,
              "result": "success",
              "time": 398,
            },
            TestCaseResult {
              "error": undefined,
              "name": "emulates a node stack trace during function execution",
              "output": undefined,
              "result": "success",
              "time": 70,
            },
          ],
        },
      ],
      "name": "packages/jest-runtime/src/__tests__/runtime_environment.test.js",
      "output": undefined,
      "totalTime": 497,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "watchman crawler and node crawler both include dotfiles",
              "output": undefined,
              "result": "success",
              "time": 77,
            },
          ],
        },
      ],
      "name": "packages/jest-haste-map/src/__tests__/includes_dotfiles.test.ts",
      "output": undefined,
      "totalTime": 337,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "watchman watch",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "returns a list of all files when there are no clocks",
              "output": undefined,
              "result": "success",
              "time": 7,
            },
            TestCaseResult {
              "error": undefined,
              "name": "updates file map and removedFiles when the clock is given",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "resets the file map and tracks removedFiles when watchman is fresh",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "properly resets the file map when only one watcher is reset",
              "output": undefined,
              "result": "success",
              "time": 6,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not add directory filters to query when watching a ROOT",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "SHA-1 requested and available",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "SHA-1 requested and NOT available",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "source control query",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
      ],
      "name": "packages/jest-haste-map/src/crawlers/__tests__/watchman.test.js",
      "output": undefined,
      "totalTime": 153,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "FakeTimers construction",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "installs setTimeout mock",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "accepts to promisify setTimeout mock",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "installs clearTimeout mock",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "installs setInterval mock",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "installs clearInterval mock",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "mocks process.nextTick if it exists on global",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "mocks setImmediate if it exists on global",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "mocks clearImmediate if setImmediate is on global",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "FakeTimers runAllTicks",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "runs all ticks, in order",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does nothing when no ticks have been scheduled",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "only runs a scheduled callback once",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "cancels a callback even from native nextTick",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "cancels a callback even from native setImmediate",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "doesnt run a tick callback if native nextTick already did",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "doesnt run immediate if native setImmediate already did",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "native doesnt run immediate if fake already did",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws before allowing infinite recursion",
              "output": undefined,
              "result": "success",
              "time": 43,
            },
          ],
        },
        TestGroupResult {
          "name": "FakeTimers runAllTimers",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "runs all timers in order",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "warns when trying to advance timers while real timers are used",
              "output": undefined,
              "result": "success",
              "time": 3,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does nothing when no timers have been scheduled",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "only runs a setTimeout callback once (ever)",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "runs callbacks with arguments after the interval",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "doesnt pass the callback to native setTimeout",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws before allowing infinite recursion",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "also clears ticks",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "FakeTimers advanceTimersByTime",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "runs timers in order",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does nothing when no timers have been scheduled",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws before allowing infinite recursion",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "FakeTimers advanceTimersToNextTimer",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "runs timers in order",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "run correct amount of steps",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "setTimeout inside setTimeout",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does nothing when no timers have been scheduled",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "FakeTimers reset",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "resets all pending setTimeouts",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "resets all pending setIntervals",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "resets all pending ticks callbacks & immediates",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "resets current advanceTimersByTime time cursor",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "FakeTimers runOnlyPendingTimers",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "runs all timers in order",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not run timers that were cleared in another timer",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "FakeTimers runWithRealTimers",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "executes callback with native timers",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "resets mock timers after executing callback",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "resets mock timer functions even if callback throws",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
          ],
        },
        TestGroupResult {
          "name": "FakeTimers useRealTimers",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "resets native timer APIs",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "resets native process.nextTick when present",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "resets native setImmediate when present",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "FakeTimers useFakeTimers",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "resets mock timer APIs",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "resets mock process.nextTick when present",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "resets mock setImmediate when present",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "FakeTimers getTimerCount",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "returns the correct count",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "includes immediates and ticks",
              "output": undefined,
              "result": "success",
              "time": 10,
            },
            TestCaseResult {
              "error": undefined,
              "name": "not includes cancelled immediates",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
      ],
      "name": "packages/jest-fake-timers/src/__tests__/legacyFakeTimers.test.ts",
      "output": undefined,
      "totalTime": 302,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "Runtime jest.fn",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "creates mock functions",
              "output": undefined,
              "result": "success",
              "time": 330,
            },
            TestCaseResult {
              "error": undefined,
              "name": "creates mock functions with mock implementations",
              "output": undefined,
              "result": "success",
              "time": 31,
            },
          ],
        },
        TestGroupResult {
          "name": "Runtime jest.isMockFunction",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "recognizes a mocked function",
              "output": undefined,
              "result": "success",
              "time": 35,
            },
          ],
        },
        TestGroupResult {
          "name": "Runtime jest.clearAllMocks",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "clears all mocks",
              "output": undefined,
              "result": "success",
              "time": 29,
            },
          ],
        },
      ],
      "name": "packages/jest-runtime/src/__tests__/runtime_jest_fn.js",
      "output": undefined,
      "totalTime": 479,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "toStrictEqual",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should be reflexive",
              "output": undefined,
              "result": "success",
              "time": 44,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should be symmetric",
              "output": undefined,
              "result": "success",
              "time": 92,
            },
          ],
        },
        TestGroupResult {
          "name": "toStrictEqual on node >=9",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should be equivalent to Node deepStrictEqual",
              "output": undefined,
              "result": "success",
              "time": 113,
            },
          ],
        },
      ],
      "name": "packages/expect/src/__tests__/matchers-toStrictEqual.property.test.ts",
      "output": undefined,
      "totalTime": 394,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should be reflexive",
              "output": undefined,
              "result": "success",
              "time": 45,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should find the same number of common items when switching the inputs",
              "output": undefined,
              "result": "success",
              "time": 29,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should have at most the length of its inputs",
              "output": undefined,
              "result": "success",
              "time": 20,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should have at most the same number of each character as its inputs",
              "output": undefined,
              "result": "success",
              "time": 17,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should be a subsequence of its inputs",
              "output": undefined,
              "result": "success",
              "time": 22,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should be no-op when passing common items",
              "output": undefined,
              "result": "success",
              "time": 30,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should find the exact common items when one array is subarray of the other",
              "output": undefined,
              "result": "success",
              "time": 22,
            },
          ],
        },
      ],
      "name": "packages/diff-sequences/src/__tests__/index.property.test.ts",
      "output": undefined,
      "totalTime": 357,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "FakeTimers construction",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "installs setTimeout mock",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "installs clearTimeout mock",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "installs setInterval mock",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "installs clearInterval mock",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "mocks process.nextTick if it exists on global",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "mocks setImmediate if it exists on global",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "mocks clearImmediate if setImmediate is on global",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "FakeTimers runAllTicks",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "runs all ticks, in order",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does nothing when no ticks have been scheduled",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "only runs a scheduled callback once",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws before allowing infinite recursion",
              "output": undefined,
              "result": "success",
              "time": 25,
            },
          ],
        },
        TestGroupResult {
          "name": "FakeTimers runAllTimers",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "runs all timers in order",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "warns when trying to advance timers while real timers are used",
              "output": undefined,
              "result": "success",
              "time": 4,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does nothing when no timers have been scheduled",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "only runs a setTimeout callback once (ever)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "runs callbacks with arguments after the interval",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "doesn't pass the callback to native setTimeout",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws before allowing infinite recursion",
              "output": undefined,
              "result": "success",
              "time": 7,
            },
            TestCaseResult {
              "error": undefined,
              "name": "also clears ticks",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "FakeTimers advanceTimersByTime",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "runs timers in order",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does nothing when no timers have been scheduled",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "FakeTimers advanceTimersToNextTimer",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "runs timers in order",
              "output": undefined,
              "result": "success",
              "time": 4,
            },
            TestCaseResult {
              "error": undefined,
              "name": "run correct amount of steps",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "setTimeout inside setTimeout",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does nothing when no timers have been scheduled",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "FakeTimers reset",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "resets all pending setTimeouts",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "resets all pending setIntervals",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "resets all pending ticks callbacks",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "resets current advanceTimersByTime time cursor",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "FakeTimers runOnlyPendingTimers",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "runs all timers in order",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not run timers that were cleared in another timer",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "FakeTimers useRealTimers",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "resets native timer APIs",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "resets native process.nextTick when present",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "resets native setImmediate when present",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "FakeTimers useFakeTimers",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "resets mock timer APIs",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "resets mock process.nextTick when present",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "resets mock setImmediate when present",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "FakeTimers getTimerCount",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "returns the correct count",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "includes immediates and ticks",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "not includes cancelled immediates",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
      ],
      "name": "packages/jest-fake-timers/src/__tests__/modernFakeTimers.test.ts",
      "output": undefined,
      "totalTime": 317,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "toContain",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should always find the value when inside the array",
              "output": undefined,
              "result": "success",
              "time": 122,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should not find the value if it has been cloned into the array",
              "output": undefined,
              "result": "success",
              "time": 56,
            },
          ],
        },
      ],
      "name": "packages/expect/src/__tests__/matchers-toContain.property.test.ts",
      "output": undefined,
      "totalTime": 236,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "Runtime wrapCodeInModuleWrapper",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "generates the correct args for the module wrapper",
              "output": undefined,
              "result": "success",
              "time": 194,
            },
            TestCaseResult {
              "error": undefined,
              "name": "injects \\"extra globals\\"",
              "output": undefined,
              "result": "success",
              "time": 43,
            },
          ],
        },
      ],
      "name": "packages/jest-runtime/src/__tests__/runtime_wrap.js",
      "output": undefined,
      "totalTime": 263,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "toContainEqual",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should always find the value when inside the array",
              "output": undefined,
              "result": "success",
              "time": 91,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should always find the value when cloned inside the array",
              "output": undefined,
              "result": "success",
              "time": 52,
            },
          ],
        },
      ],
      "name": "packages/expect/src/__tests__/matchers-toContainEqual.property.test.ts",
      "output": undefined,
      "totalTime": 287,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "invalid arg length",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "is not a number",
              "output": undefined,
              "result": "success",
              "time": 40,
            },
            TestCaseResult {
              "error": undefined,
              "name": "Infinity is not a safe integer",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "Not a Number is not a safe integer",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "MAX_SAFE_INTEGER + 1 is not a safe integer",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "MIN_SAFE_INTEGER - 1 is not a safe integer",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "is a negative integer",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "invalid arg callback",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "null is not a function",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "undefined is not a function",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "input callback encapsulates comparison zero and negative zero",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "are not common according to Object.is method",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "are common according to === operator",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "input callback encapsulates comparison Not a Number",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "is common according to Object.is method",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "is not common according to === operator",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "input callback encapsulates sequences",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "arrays of strings",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "string and array of strings",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "strings",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "no common items negative zero is equivalent to zero for length",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "of a",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "of b",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "of a and b",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "no common items",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "a empty and b empty",
              "output": undefined,
              "result": "success",
              "time": 3,
            },
            TestCaseResult {
              "error": undefined,
              "name": "a empty and b non-empty",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "a non-empty and b empty",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "no common items a non-empty and b non-empty",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "baDeltaLength 0 even",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "baDeltaLength 1 odd",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "baDeltaLength 2 even",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "baDeltaLength 7 odd",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "only common items",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "length 1",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "length 2",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "all common items outside",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "preceding changes",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "following change",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "preceding and following changes in one sequence",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "some common items inside and outside",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "preceding changes adjacent to common in both sequences",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "following changes adjacent to common in both sequences",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "all common items inside non-recursive",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "move from start to end relative to change",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "move from start to end relative to common",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "move from start to end relative to change and common",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "reverse relative to change",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "preceding middle",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "following middle",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "all common items inside recursive",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "prev reverse at depth 1 and preceding at depth 2",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "last forward at depth 1 and following at depth 2",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "preceding at depth 2 and both at depth 3 of following",
              "output": undefined,
              "result": "success",
              "time": 7,
            },
            TestCaseResult {
              "error": undefined,
              "name": "interleaved single change",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "interleaved double changes",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "optimization decreases iMaxF",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "optimization decreases iMaxR",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "common substrings",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "progress",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "regression",
              "output": undefined,
              "result": "success",
              "time": 12,
            },
            TestCaseResult {
              "error": undefined,
              "name": "wrapping",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
      ],
      "name": "packages/diff-sequences/src/__tests__/index.test.ts",
      "output": undefined,
      "totalTime": 195,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": ".getType()",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "null",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "undefined",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "object",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "array",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "number",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "string",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "function",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "boolean",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "symbol",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "regexp",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "map",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "set",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "date",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "bigint",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
      ],
      "name": "packages/jest-get-type/src/__tests__/getType.test.ts",
      "output": undefined,
      "totalTime": 45,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "init project with package.json and no jest config all questions answered with answer: \\"No\\"",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should return the default configuration (an empty config)",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should generate empty config with mjs extension",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "init project with package.json and no jest config some questions answered with answer: \\"Yes\\"",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should create configuration for {clearMocks: true}",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should create configuration for {coverage: true}",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should create configuration for {coverageProvider: \\"babel\\"}",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should create configuration for {coverageProvider: \\"v8\\"}",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should create configuration for {environment: \\"jsdom\\"}",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should create configuration for {environment: \\"node\\"}",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should create package.json with configured test command when {scripts: true}",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "init no package json",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should throw an error if there is no package.json file",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "init has-jest-config-file-js ask the user whether to override config or not",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "user answered with \\"Yes\\"",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "user answered with \\"No\\"",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "init has-jest-config-file-ts ask the user whether to override config or not",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "user answered with \\"Yes\\"",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "user answered with \\"No\\"",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "init has-jest-config-file-mjs ask the user whether to override config or not",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "user answered with \\"Yes\\"",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "user answered with \\"No\\"",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "init has-jest-config-file-cjs ask the user whether to override config or not",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "user answered with \\"Yes\\"",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "user answered with \\"No\\"",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "init has-jest-config-file-json ask the user whether to override config or not",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "user answered with \\"Yes\\"",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "user answered with \\"No\\"",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "init project using jest.config.ts ask the user whether he wants to use Typescript or not",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "user answered with \\"Yes\\"",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "user answered with \\"No\\"",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "init has jest config in package.json",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should ask the user whether to override config or not",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "init already has \\"jest\\" in packageJson.scripts.test",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should not ask \\"test script question\\"",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "packages/jest-cli/src/init/__tests__/init.test.js",
      "output": undefined,
      "totalTime": 119,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "Runtime requireModule with no extension",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "throws error pointing out file with extension",
              "output": undefined,
              "result": "success",
              "time": 204,
            },
          ],
        },
      ],
      "name": "packages/jest-runtime/src/__tests__/runtime_require_module_no_ext.test.js",
      "output": undefined,
      "totalTime": 261,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "returns the same value for primitive or function values",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not execute getters/setters, but copies them",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "copies symbols",
              "output": undefined,
              "result": "success",
              "time": 10,
            },
            TestCaseResult {
              "error": undefined,
              "name": "copies arrays as array objects",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "handles cyclic dependencies",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "uses the blacklist to avoid copying properties on the first level",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not keep the prototype by default when top level is object",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not keep the prototype by default when top level is array",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not keep the prototype of arrays when keepPrototype = false",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "keeps the prototype of arrays when keepPrototype = true",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not keep the prototype for objects when keepPrototype = false",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "keeps the prototype for objects when keepPrototype = true",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
      ],
      "name": "packages/jest-util/src/__tests__/deepCyclicCopy.test.ts",
      "output": undefined,
      "totalTime": 86,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "works with jest.config.js",
              "output": undefined,
              "result": "success",
              "time": 94,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/version.test.ts",
      "output": undefined,
      "totalTime": 138,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "creates a process object that looks like the original one",
              "output": undefined,
              "result": "success",
              "time": 32,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fakes require(\\"process\\") so it is equal to \\"global.process\\"",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "checks that process.env works as expected on Linux platforms",
              "output": undefined,
              "result": "success",
              "time": 5,
            },
            TestCaseResult {
              "error": undefined,
              "name": "checks that process.env works as expected in Windows platforms",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
          ],
        },
      ],
      "name": "packages/jest-util/src/__tests__/createProcessObject.test.ts",
      "output": undefined,
      "totalTime": 81,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "instruments files",
              "output": undefined,
              "result": "success",
              "time": 239,
            },
          ],
        },
      ],
      "name": "packages/jest-runtime/src/__tests__/instrumentation.test.ts",
      "output": undefined,
      "totalTime": 275,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "runJest",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "when watch is set then exit process",
              "output": undefined,
              "result": "success",
              "time": 18,
            },
            TestCaseResult {
              "error": undefined,
              "name": "when watch is set then an error message is printed",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
      ],
      "name": "packages/jest-core/src/__tests__/runJest.test.js",
      "output": undefined,
      "totalTime": 261,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "Replaceable constructor",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "init with object",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "init with array",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "init with Map",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "init with other type should throw error",
              "output": undefined,
              "result": "success",
              "time": 16,
            },
          ],
        },
        TestGroupResult {
          "name": "Replaceable get",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "get object item",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "get array item",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "get Map item",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "Replaceable set",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "set object item",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "set array item",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "set Map item",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "Replaceable forEach",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "object forEach",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "array forEach",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "map forEach",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "forEach should ignore nonenumerable property",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "Replaceable isReplaceable",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should return true if two object types equal and support",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should return false if two object types not equal",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should return false if object types not support",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "packages/jest-matcher-utils/src/__tests__/Replaceable.test.ts",
      "output": undefined,
      "totalTime": 111,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "defaults to milliseconds",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "formats seconds properly",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "formats milliseconds properly",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "formats microseconds properly",
              "output": undefined,
              "result": "success",
              "time": 30,
            },
            TestCaseResult {
              "error": undefined,
              "name": "formats nanoseconds properly",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "interprets lower than lowest powers as nanoseconds",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "interprets higher than highest powers as seconds",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "interprets non-multiple-of-3 powers as next higher prefix",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "formats the quantity properly when pad length is lower",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "formats the quantity properly when pad length is equal",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "left pads the quantity properly when pad length is higher",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "packages/jest-util/src/__tests__/formatTime.test.ts",
      "output": undefined,
      "totalTime": 82,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "Jest Worker Process Integration",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "calls a single method from the worker",
              "output": undefined,
              "result": "success",
              "time": 25,
            },
            TestCaseResult {
              "error": undefined,
              "name": "distributes sequential calls across child processes",
              "output": undefined,
              "result": "success",
              "time": 6,
            },
            TestCaseResult {
              "error": undefined,
              "name": "schedules the task on the first available child processes if the scheduling policy is in-order",
              "output": undefined,
              "result": "success",
              "time": 3,
            },
            TestCaseResult {
              "error": undefined,
              "name": "schedules the task on the first available child processes",
              "output": undefined,
              "result": "success",
              "time": 4,
            },
            TestCaseResult {
              "error": undefined,
              "name": "distributes concurrent calls across child processes",
              "output": undefined,
              "result": "success",
              "time": 6,
            },
            TestCaseResult {
              "error": undefined,
              "name": "sticks parallel calls to children",
              "output": undefined,
              "result": "success",
              "time": 15,
            },
          ],
        },
      ],
      "name": "packages/jest-worker/src/__tests__/thread-integration.test.js",
      "output": undefined,
      "totalTime": 114,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "worker",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "parses JavaScript files and extracts module information",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "accepts a custom dependency extractor",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "delegates to hasteImplModulePath for getting the id",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "parses package.json files as haste packages",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "returns an error when a file cannot be accessed",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "simply computes SHA-1s when requested (works well with binary data)",
              "output": undefined,
              "result": "success",
              "time": 12,
            },
            TestCaseResult {
              "error": undefined,
              "name": "avoids computing dependencies if not requested and Haste does not need it",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "packages/jest-haste-map/src/__tests__/worker.test.js",
      "output": undefined,
      "totalTime": 100,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "printDiffOrStringify",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "expected is empty and received is single line",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "expected is multi line and received is empty",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "expected and received are single line with multiple changes",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "expected and received are multi line with trailing spaces",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "has no common after clean up chaff multiline",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "has no common after clean up chaff one-line",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "object contain readonly symbol key object",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "printDiffOrStringify MAX_DIFF_STRING_LENGTH",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "both are less",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "expected is more",
              "output": undefined,
              "result": "success",
              "time": 4,
            },
            TestCaseResult {
              "error": undefined,
              "name": "received is more",
              "output": undefined,
              "result": "success",
              "time": 8,
            },
          ],
        },
        TestGroupResult {
          "name": "printDiffOrStringify asymmetricMatcher",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "minimal test",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "jest asymmetricMatcher",
              "output": undefined,
              "result": "success",
              "time": 5,
            },
            TestCaseResult {
              "error": undefined,
              "name": "custom asymmetricMatcher",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "nested object",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "array",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "object in array",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "map",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "circular object",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "transitive circular",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "circular array",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "circular map",
              "output": undefined,
              "result": "success",
              "time": 5,
            },
          ],
        },
      ],
      "name": "packages/jest-matcher-utils/src/__tests__/printDiffOrStringify.test.ts",
      "output": undefined,
      "totalTime": 114,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "getPath()",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "property exists",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "property doesnt exist",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "property exist but undefined",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "property is a getter on class instance",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "property is inherited",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "path breaks",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "empty object at the end",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "getObjectSubset",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "expect(getObjectSubset({\\"a\\": \\"b\\", \\"c\\": \\"d\\"}, {\\"a\\": \\"d\\"})).toEqual({\\"a\\": \\"b\\"})",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "expect(getObjectSubset({\\"a\\": [1, 2], \\"b\\": \\"b\\"}, {\\"a\\": [3, 4]})).toEqual({\\"a\\": [1, 2]})",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "expect(getObjectSubset([{\\"a\\": \\"b\\", \\"c\\": \\"d\\"}], [{\\"a\\": \\"z\\"}])).toEqual([{\\"a\\": \\"b\\"}])",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "expect(getObjectSubset([1, 2], [1, 2, 3])).toEqual([1, 2])",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "expect(getObjectSubset({\\"a\\": [1]}, {\\"a\\": [1, 2]})).toEqual({\\"a\\": [1]})",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "expect(getObjectSubset(2015-11-30T00:00:00.000Z, 2016-12-30T00:00:00.000Z)).toEqual(2015-11-30T00:00:00.000Z)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "getObjectSubset returns the object instance if the subset has no extra properties",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "Date",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "getObjectSubset returns the subset instance if its property values are equal",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "Object",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "getObjectSubset returns the subset instance if its property values are equal Uint8Array",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "expected",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "received",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "getObjectSubset calculating subsets of objects with circular references",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "simple circular references",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "transitive circular references",
              "output": undefined,
              "result": "success",
              "time": 7,
            },
          ],
        },
        TestGroupResult {
          "name": "emptyObject()",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "matches an empty object",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not match an object with keys",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not match a non-object",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "subsetEquality()",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "matching object returns true",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "object without keys is undefined",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "objects to not match",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "null does not return errors",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "undefined does not return errors",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "subsetEquality() matching subsets with circular references",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "simple circular references",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "referenced object on same level should not regarded as circular reference",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "transitive circular references",
              "output": undefined,
              "result": "success",
              "time": 9,
            },
          ],
        },
        TestGroupResult {
          "name": "iterableEquality",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "returns true when given circular iterators",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "returns true when given circular Set",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "returns true when given nested Sets",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "returns false when given inequal set within a set",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "returns false when given inequal map within a set",
              "output": undefined,
              "result": "success",
              "time": 5,
            },
            TestCaseResult {
              "error": undefined,
              "name": "returns false when given inequal set within a map",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "returns true when given circular Set shape",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "returns true when given circular key in Map",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "returns true when given nested Maps",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "returns true when given circular key and value in Map",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "returns true when given circular value in Map",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "packages/expect/src/__tests__/utils.test.ts",
      "output": undefined,
      "totalTime": 147,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "returns the same value for primitive or function values",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "convert accessor descriptor into value descriptor",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "shuold not skips non-enumerables",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "copies symbols",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "copies arrays as array objects",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "handles cyclic dependencies",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "Copy Map",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "Copy cyclic Map",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "return same value for built-in object type except array, map and object",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should copy object symbol key property",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should set writable, configurable to true",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
      ],
      "name": "packages/jest-matcher-utils/src/__tests__/deepCyclicCopyReplaceable.test.ts",
      "output": undefined,
      "totalTime": 49,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "isError",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should not assume objects are errors",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should detect simple error instances",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should detect errors from another context",
              "output": undefined,
              "result": "success",
              "time": 12,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should detect DOMException errors from another context",
              "output": undefined,
              "result": "success",
              "time": 7,
            },
          ],
        },
      ],
      "name": "packages/expect/src/__tests__/isError.test.ts",
      "output": undefined,
      "totalTime": 43,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": ".isPrimitive()",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "returns true when given primitive value of: null",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "returns true when given primitive value of: undefined",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "returns true when given primitive value of: 100",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "returns true when given primitive value of: hello world",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "returns true when given primitive value of: true",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "returns true when given primitive value of: Symbol(a)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "returns true when given primitive value of: 0",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "returns true when given primitive value of: NaN",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "returns true when given primitive value of: Infinity",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "returns true when given primitive value of: 1n",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "returns false when given non primitive value of: {}",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "returns false when given non primitive value of: []",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "returns false when given non primitive value of: undefined",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "returns false when given non primitive value of: {}",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "returns false when given non primitive value of: {}",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "returns false when given non primitive value of: {}",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "returns false when given non primitive value of: \\"2021-01-24T19:22:19.272Z\\"",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "returns false when given non primitive value of: {}",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "packages/jest-get-type/src/__tests__/isPrimitive.test.ts",
      "output": undefined,
      "totalTime": 36,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "node crawler",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "crawls for files based on patterns",
              "output": undefined,
              "result": "success",
              "time": 12,
            },
            TestCaseResult {
              "error": undefined,
              "name": "updates only changed files",
              "output": undefined,
              "result": "success",
              "time": 7,
            },
            TestCaseResult {
              "error": undefined,
              "name": "returns removed files",
              "output": undefined,
              "result": "success",
              "time": 13,
            },
            TestCaseResult {
              "error": undefined,
              "name": "uses node fs APIs with incompatible find binary",
              "output": undefined,
              "result": "success",
              "time": 9,
            },
            TestCaseResult {
              "error": undefined,
              "name": "uses node fs APIs without find binary",
              "output": undefined,
              "result": "success",
              "time": 8,
            },
            TestCaseResult {
              "error": undefined,
              "name": "uses node fs APIs if \\"forceNodeFilesystemAPI\\" is set to true, regardless of platform",
              "output": undefined,
              "result": "success",
              "time": 6,
            },
            TestCaseResult {
              "error": undefined,
              "name": "completes with empty roots",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "completes with fs.readdir throwing an error",
              "output": undefined,
              "result": "success",
              "time": 11,
            },
          ],
        },
        TestGroupResult {
          "name": "node crawler readdir withFileTypes support",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "calls lstat for directories and symlinks if readdir withFileTypes is not supported",
              "output": undefined,
              "result": "success",
              "time": 7,
            },
            TestCaseResult {
              "error": undefined,
              "name": "avoids calling lstat for directories and symlinks if readdir withFileTypes is supported",
              "output": undefined,
              "result": "success",
              "time": 8,
            },
          ],
        },
      ],
      "name": "packages/jest-haste-map/src/crawlers/__tests__/node.test.js",
      "output": undefined,
      "totalTime": 170,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "run for \\"onlyChanged\\" and \\"changedSince\\"",
              "output": undefined,
              "result": "success",
              "time": 1464,
            },
            TestCaseResult {
              "error": undefined,
              "name": "run only changed files",
              "output": undefined,
              "result": "success",
              "time": 5196,
            },
            TestCaseResult {
              "error": undefined,
              "name": "report test coverage for only changed files",
              "output": undefined,
              "result": "success",
              "time": 1889,
            },
            TestCaseResult {
              "error": undefined,
              "name": "report test coverage of source on test file change under only changed files",
              "output": undefined,
              "result": "success",
              "time": 822,
            },
            TestCaseResult {
              "error": undefined,
              "name": "do not pickup non-tested files when reporting coverage on only changed files",
              "output": undefined,
              "result": "success",
              "time": 861,
            },
            TestCaseResult {
              "error": undefined,
              "name": "collect test coverage when using onlyChanged",
              "output": undefined,
              "result": "success",
              "time": 1058,
            },
            TestCaseResult {
              "error": undefined,
              "name": "onlyChanged in config is overwritten by --all or testPathPattern",
              "output": undefined,
              "result": "success",
              "time": 7023,
            },
            TestCaseResult {
              "error": Object {
                "details": "Error: expect(received).toMatch(expected)

Expected pattern: /PASS __tests__(\\\\/|\\\\\\\\)file2.test.js/
Received string:  \\"·
  ● Test suite failed to run·
    abort: empty revision range
\\"
    at Object.toMatch (/home/dorny/dorny/jest/e2e/__tests__/onlyChanged.test.ts:360:18)
    at Promise.then.completed (/home/dorny/dorny/jest/packages/jest-circus/build/utils.js:307:28)
    at new Promise (<anonymous>)
    at callAsyncCircusFn (/home/dorny/dorny/jest/packages/jest-circus/build/utils.js:229:10)
    at _callCircusTest (/home/dorny/dorny/jest/packages/jest-circus/build/run.js:218:40)
    at processTicksAndRejections (internal/process/task_queues.js:97:5)
    at _runTest (/home/dorny/dorny/jest/packages/jest-circus/build/run.js:155:3)
    at _runTestsForDescribeBlock (/home/dorny/dorny/jest/packages/jest-circus/build/run.js:66:9)
    at run (/home/dorny/dorny/jest/packages/jest-circus/build/run.js:25:3)
    at runAndTransformResultsToJestFormat (/home/dorny/dorny/jest/packages/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:163:21)",
                "line": 360,
                "path": "e2e/__tests__/onlyChanged.test.ts",
              },
              "name": "gets changed files for hg",
              "output": undefined,
              "result": "failed",
              "time": 3765,
            },
            TestCaseResult {
              "error": undefined,
              "name": "path on Windows is case-insensitive",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/onlyChanged.test.ts",
      "output": undefined,
      "totalTime": 22281,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "joinAlignedDiffsExpand",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "first line is empty common",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "joinAlignedDiffsNoExpand",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "patch 0 with context 1 and change at start and end",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "patch 0 with context 5 and first line is empty common",
              "output": undefined,
              "result": "success",
              "time": 7,
            },
            TestCaseResult {
              "error": undefined,
              "name": "patch 1 with context 4 and last line is empty common",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "patch 2 with context 3",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "patch 3 with context 2 and omit excess common at start",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "packages/jest-diff/src/__tests__/joinAlignedDiffs.test.ts",
      "output": undefined,
      "totalTime": 44,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "SnapshotInteractiveMode",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "is inactive at construction",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "call to run process the first file",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "call to abort",
              "output": undefined,
              "result": "success",
              "time": 11,
            },
            TestCaseResult {
              "error": undefined,
              "name": "call to reset",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "press Q or ESC triggers an abort",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "press ENTER trigger a run",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "skip 1 test, then restart",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "skip 1 test, then quit",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "update 1 test, then finish and return",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "skip 2 tests, then finish and restart",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "update 2 tests, then finish and return",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "update 1 test, skip 1 test, then finish and restart",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "skip 1 test, update 1 test, then finish and restart",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
          ],
        },
      ],
      "name": "packages/jest-core/src/__tests__/SnapshotInteractiveMode.test.js",
      "output": undefined,
      "totalTime": 89,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "Runtime statics",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "Runtime.createHasteMap passes correct ignore files to HasteMap",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "Runtime.createHasteMap passes correct ignore files to HasteMap in watch mode",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
      ],
      "name": "packages/jest-runtime/src/__tests__/Runtime-statics.test.js",
      "output": undefined,
      "totalTime": 162,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "getAlignedDiffs lines",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "change preceding and following common",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "common preceding and following change",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "common at end when both current change lines are empty",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "common between delete and insert",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "common between insert and delete",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "getAlignedDiffs newline",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "delete only",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "insert only",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "delete with adjacent change",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "insert with adjacent changes",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "change from space",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "change to space",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "getAlignedDiffs substrings first",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "common when both current change lines are empty",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "common when either current change line is non-empty",
              "output": undefined,
              "result": "success",
              "time": 13,
            },
            TestCaseResult {
              "error": undefined,
              "name": "delete completes the current line",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "insert completes the current line",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "getAlignedDiffs substrings middle",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "is empty in delete between common",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "is empty in insert at start",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "is non-empty in delete at end",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "is non-empty in insert between common",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "getAlignedDiffs substrings last",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "is empty in delete at end",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "is empty in insert at end",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "is non-empty in common not at end",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "getAlignedDiffs strings",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "change at start and delete or insert at end",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "delete or insert at start and change at end",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
      ],
      "name": "packages/jest-diff/src/__tests__/getAlignedDiffs.test.ts",
      "output": undefined,
      "totalTime": 72,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": ".assertions()",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "does not throw",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "redeclares different assertion count",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "expects no assertions",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": ".hasAssertions()",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "does not throw if there is an assertion",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws if expected is not undefined",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "hasAssertions not leaking to global state",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "packages/expect/src/__tests__/assertionCounts.test.ts",
      "output": undefined,
      "totalTime": 60,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "getPlatformExtension",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should get platform ext",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
      ],
      "name": "packages/jest-haste-map/src/lib/__tests__/getPlatformExtension.test.js",
      "output": undefined,
      "totalTime": 35,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "isRegExpSupported",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should return true when passing valid regular expression",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should return false when passing an invalid regular expression",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
      ],
      "name": "packages/jest-haste-map/src/lib/__tests__/isRegExpSupported.test.js",
      "output": undefined,
      "totalTime": 31,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "stack trace points to correct location when using matchers",
              "output": undefined,
              "result": "success",
              "time": 4,
            },
            TestCaseResult {
              "error": undefined,
              "name": "stack trace points to correct location when using nested matchers",
              "output": undefined,
              "result": "success",
              "time": 21,
            },
            TestCaseResult {
              "error": undefined,
              "name": "stack trace points to correct location when throwing from a custom matcher",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "packages/expect/src/__tests__/stacktrace.test.ts",
      "output": undefined,
      "totalTime": 69,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "Jest Worker Integration",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "calls a single method from the worker",
              "output": undefined,
              "result": "success",
              "time": 3,
            },
            TestCaseResult {
              "error": undefined,
              "name": "distributes sequential calls across child processes",
              "output": undefined,
              "result": "success",
              "time": 3,
            },
            TestCaseResult {
              "error": undefined,
              "name": "schedules the task on the first available child processes if the scheduling policy is in-order",
              "output": undefined,
              "result": "success",
              "time": 15,
            },
            TestCaseResult {
              "error": undefined,
              "name": "distributes concurrent calls across child processes",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "sticks parallel calls to children",
              "output": undefined,
              "result": "success",
              "time": 7,
            },
          ],
        },
      ],
      "name": "packages/jest-worker/src/__tests__/process-integration.test.js",
      "output": undefined,
      "totalTime": 62,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "is valid when it is a file inside roots",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "is not valid when it is a snapshot file",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "is not valid when it is a file in the coverage dir",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
      ],
      "name": "packages/jest-core/src/lib/__tests__/isValidPath.test.ts",
      "output": undefined,
      "totalTime": 166,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "ErrorWithStack",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "calls Error.captureStackTrace with given callsite when capture exists",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
          ],
        },
      ],
      "name": "packages/jest-util/src/__tests__/errorWithStack.test.ts",
      "output": undefined,
      "totalTime": 41,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "Returns true when running on interactive environment",
              "output": undefined,
              "result": "success",
              "time": 7,
            },
            TestCaseResult {
              "error": undefined,
              "name": "Returns false when running on a non-interactive environment",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
      ],
      "name": "packages/jest-util/src/__tests__/isInteractive.test.ts",
      "output": undefined,
      "totalTime": 35,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "diffStringsRaw",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "one-line with cleanup",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "one-line without cleanup",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
      ],
      "name": "packages/jest-diff/src/__tests__/diffStringsRaw.test.ts",
      "output": undefined,
      "totalTime": 55,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "works like micromatch with only positive globs",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works like micromatch with a mix of overlapping positive and negative globs",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works like micromatch with only negative globs",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works like micromatch with empty globs",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "packages/jest-util/src/__tests__/globsToMatcher.test.ts",
      "output": undefined,
      "totalTime": 56,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "shouldRunInBand() - should return true for runInBand mode",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "shouldRunInBand() - should return true for runInBand mode",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "shouldRunInBand() - should return false for runInBand mode",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "shouldRunInBand() - should return false for runInBand mode",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "shouldRunInBand() - should return false for runInBand mode",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "shouldRunInBand() - should return true for runInBand mode",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "shouldRunInBand() - should return false for runInBand mode",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "shouldRunInBand() - should return true for runInBand mode",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "shouldRunInBand() - should return true for runInBand mode",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "shouldRunInBand() - should return false for runInBand mode",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "shouldRunInBand() - should return false for runInBand mode",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "shouldRunInBand() - should return true for runInBand mode",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
      ],
      "name": "packages/jest-core/src/__tests__/testSchedulerHelper.test.js",
      "output": undefined,
      "totalTime": 48,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "returns the passed object",
              "output": undefined,
              "result": "success",
              "time": 28,
            },
            TestCaseResult {
              "error": undefined,
              "name": "turns a V8 global object into a Node global object",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
      ],
      "name": "packages/jest-util/src/__tests__/installCommonGlobals.test.ts",
      "output": undefined,
      "totalTime": 68,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "getMockName",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "extracts mock name from file path",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "packages/jest-haste-map/src/__tests__/get_mock_name.test.js",
      "output": undefined,
      "totalTime": 22,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "WorkerPool",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should create a ChildProcessWorker and send to it",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should create a NodeThreadWorker and send to it",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should avoid NodeThreadWorker if not passed enableWorkerThreads",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
      ],
      "name": "packages/jest-worker/src/__tests__/WorkerPool.test.js",
      "output": undefined,
      "totalTime": 51,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "dependencyExtractor",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should not extract dependencies inside comments",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should not extract dependencies inside comments (windows line endings)",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should not extract dependencies inside comments (unicode line endings)",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should extract dependencies from \`import\` statements",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should extract dependencies from side-effect only \`import\` statements",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should not extract dependencies from \`import type/typeof\` statements",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should extract dependencies from \`export\` statements",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should extract dependencies from \`export-from\` statements",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should not extract dependencies from \`export type/typeof\` statements",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should extract dependencies from dynamic \`import\` calls",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should extract dependencies from \`require\` calls",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should extract dependencies from \`jest.requireActual\` calls",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should extract dependencies from \`jest.requireMock\` calls",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should extract dependencies from \`jest.genMockFromModule\` calls",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should extract dependencies from \`jest.createMockFromModule\` calls",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "packages/jest-haste-map/src/lib/__tests__/dependencyExtractor.test.js",
      "output": undefined,
      "totalTime": 56,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "normalizePathSep",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "does nothing on posix",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "replace slashes on windows",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
      ],
      "name": "packages/jest-haste-map/src/lib/__tests__/normalizePathSep.test.js",
      "output": undefined,
      "totalTime": 35,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "fastPath.relative",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should get relative paths inside the root",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should get relative paths outside the root",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should get relative paths outside the root when start with same word",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "fastPath.resolve",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should get the absolute path for paths inside the root",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should get the absolute path for paths outside the root",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "packages/jest-haste-map/src/lib/__tests__/fast_path.test.js",
      "output": undefined,
      "totalTime": 29,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "FailedTestsCache",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should filter tests",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
      ],
      "name": "packages/jest-core/src/__tests__/FailedTestsCache.test.js",
      "output": undefined,
      "totalTime": 25,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "getNoTestsFoundMessage",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "returns correct message when monitoring only failures",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "returns correct message when monitoring only changed",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "returns correct message with verbose option",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "returns correct message without options",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "returns correct message with passWithNoTests",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
      ],
      "name": "packages/jest-core/src/__tests__/getNoTestsFoundMessage.test.js",
      "output": undefined,
      "totalTime": 61,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "Common globals",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "check process",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
      ],
      "name": "packages/jest-core/src/__tests__/globals.test.ts",
      "output": undefined,
      "totalTime": 22,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "prints the jest version",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints the test framework name",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints the config object",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
      ],
      "name": "packages/jest-core/src/lib/__tests__/logDebugMessages.test.ts",
      "output": undefined,
      "totalTime": 48,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "not a Promise: ",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "undefined",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "null",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "true",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "42",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "\\"1337\\"",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "Symbol()",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "[]",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "{}",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "a resolved Promise",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "a rejected Promise",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "packages/jest-util/src/__tests__/isPromise.test.ts",
      "output": undefined,
      "totalTime": 30,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should remove jest config if exists",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should add test script when there are no scripts",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should add test script when there are scripts",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should not add test script when { shouldModifyScripts: false }",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "packages/jest-cli/src/init/__tests__/modifyPackageJson.test.ts",
      "output": undefined,
      "totalTime": 30,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "Symbol in objects",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should compare objects with Symbol keys",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should compare objects with mixed keys and Symbol",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should compare objects with different Symbol keys",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "packages/expect/src/__tests__/symbolInObjects.test.ts",
      "output": undefined,
      "totalTime": 33,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "stub",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
      ],
      "name": "e2e/test-in-root/test.js",
      "output": undefined,
      "totalTime": 37,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "stub",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
      ],
      "name": "e2e/test-in-root/spec.js",
      "output": undefined,
      "totalTime": 19,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "dummy-test",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "e2e/v8-coverage/empty-sourcemap/test.ts",
      "output": undefined,
      "totalTime": 31,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should copy dom element",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should copy complex element",
              "output": undefined,
              "result": "success",
              "time": 3,
            },
          ],
        },
      ],
      "name": "packages/jest-matcher-utils/src/__tests__/deepCyclicCopyReplaceableDom.test.ts",
      "output": undefined,
      "totalTime": 48,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "on node ^12.16.0 || >=13.7.0",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "runs TS test with native ESM",
              "output": undefined,
              "result": "success",
              "time": 923,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/nativeEsmTypescript.test.ts",
      "output": undefined,
      "totalTime": 956,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "maps code coverage against original source",
              "output": undefined,
              "result": "success",
              "time": 12660,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/coverageRemapping.test.ts",
      "output": undefined,
      "totalTime": 12701,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "globalTeardown is triggered once after all test suites",
              "output": undefined,
              "result": "success",
              "time": 2025.9999999999998,
            },
            TestCaseResult {
              "error": undefined,
              "name": "jest throws an error when globalTeardown does not export a function",
              "output": undefined,
              "result": "success",
              "time": 1144,
            },
            TestCaseResult {
              "error": undefined,
              "name": "globalTeardown function gets jest config object as a parameter",
              "output": undefined,
              "result": "success",
              "time": 959,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should call globalTeardown function of multiple projects",
              "output": undefined,
              "result": "success",
              "time": 1711,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should not call a globalTeardown of a project if there are no tests to run from this project",
              "output": undefined,
              "result": "success",
              "time": 882,
            },
            TestCaseResult {
              "error": undefined,
              "name": "globalTeardown works with default export",
              "output": undefined,
              "result": "success",
              "time": 1045,
            },
            TestCaseResult {
              "error": undefined,
              "name": "globalTeardown throws with named export",
              "output": undefined,
              "result": "success",
              "time": 1041,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/globalTeardown.test.ts",
      "output": undefined,
      "totalTime": 11886,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "--listTests doesn't duplicate the test files",
              "output": undefined,
              "result": "success",
              "time": 445,
            },
            TestCaseResult {
              "error": undefined,
              "name": "can pass projects or global config",
              "output": undefined,
              "result": "success",
              "time": 3379,
            },
            TestCaseResult {
              "error": undefined,
              "name": "\\"No tests found\\" message for projects",
              "output": undefined,
              "result": "success",
              "time": 977,
            },
            TestCaseResult {
              "error": undefined,
              "name": "allows a single non-root project",
              "output": undefined,
              "result": "success",
              "time": 1215,
            },
            TestCaseResult {
              "error": undefined,
              "name": "allows a single non-root project",
              "output": undefined,
              "result": "success",
              "time": 751,
            },
            TestCaseResult {
              "error": undefined,
              "name": "correctly runs a single non-root project",
              "output": undefined,
              "result": "success",
              "time": 805,
            },
            TestCaseResult {
              "error": undefined,
              "name": "correctly runs a single non-root project",
              "output": undefined,
              "result": "success",
              "time": 839,
            },
            TestCaseResult {
              "error": undefined,
              "name": "projects can be workspaces with non-JS/JSON files",
              "output": undefined,
              "result": "success",
              "time": 1371,
            },
            TestCaseResult {
              "error": undefined,
              "name": "objects in project configuration",
              "output": undefined,
              "result": "success",
              "time": 869,
            },
            TestCaseResult {
              "error": undefined,
              "name": "allows a single project",
              "output": undefined,
              "result": "success",
              "time": 822,
            },
            TestCaseResult {
              "error": undefined,
              "name": "resolves projects and their <rootDir> properly",
              "output": undefined,
              "result": "success",
              "time": 1938,
            },
            TestCaseResult {
              "error": undefined,
              "name": "Does transform files with the corresponding project transformer",
              "output": undefined,
              "result": "success",
              "time": 737,
            },
          ],
        },
        TestGroupResult {
          "name": "doesn't bleed module file extensions resolution with multiple workers",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "external config files",
              "output": undefined,
              "result": "success",
              "time": 1025,
            },
            TestCaseResult {
              "error": undefined,
              "name": "inline config files",
              "output": undefined,
              "result": "success",
              "time": 1101,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/multiProjectRunner.test.ts",
      "output": undefined,
      "totalTime": 16360,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "basic support",
              "output": undefined,
              "result": "success",
              "time": 3007,
            },
            TestCaseResult {
              "error": undefined,
              "name": "error thrown before snapshot",
              "output": undefined,
              "result": "success",
              "time": 2377,
            },
            TestCaseResult {
              "error": undefined,
              "name": "first snapshot fails, second passes",
              "output": undefined,
              "result": "success",
              "time": 1373,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not mark snapshots as obsolete in skipped tests",
              "output": undefined,
              "result": "success",
              "time": 1244,
            },
            TestCaseResult {
              "error": undefined,
              "name": "accepts custom snapshot name",
              "output": undefined,
              "result": "success",
              "time": 821,
            },
            TestCaseResult {
              "error": undefined,
              "name": "handles property matchers",
              "output": undefined,
              "result": "success",
              "time": 1917,
            },
            TestCaseResult {
              "error": undefined,
              "name": "handles invalid property matchers",
              "output": undefined,
              "result": "success",
              "time": 1906,
            },
            TestCaseResult {
              "error": undefined,
              "name": "handles property matchers with hint",
              "output": undefined,
              "result": "success",
              "time": 1752,
            },
            TestCaseResult {
              "error": undefined,
              "name": "handles property matchers with deep properties",
              "output": undefined,
              "result": "success",
              "time": 2528,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/toMatchSnapshot.test.ts",
      "output": undefined,
      "totalTime": 17025,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "prints message about flag on slow tests",
              "output": undefined,
              "result": "success",
              "time": 1993,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints message about flag on forceExit",
              "output": undefined,
              "result": "success",
              "time": 678,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints out info about open handlers",
              "output": undefined,
              "result": "success",
              "time": 868,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not report promises",
              "output": undefined,
              "result": "success",
              "time": 728,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints out info about open handlers from inside tests",
              "output": undefined,
              "result": "success",
              "time": 903,
            },
          ],
        },
        TestGroupResult {
          "name": "on node >=11.10.0",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "does not report ELD histograms",
              "output": undefined,
              "result": "success",
              "time": 729,
            },
          ],
        },
        TestGroupResult {
          "name": "notify",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "does not report --notify flag",
              "output": undefined,
              "result": "success",
              "time": 789,
            },
          ],
        },
        TestGroupResult {
          "name": "on node >=11",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "does not report timeouts using unref",
              "output": undefined,
              "result": "success",
              "time": 763,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/detectOpenHandles.ts",
      "output": undefined,
      "totalTime": 7528,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "not throwing Error objects",
              "output": undefined,
              "result": "success",
              "time": 4615,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with node assert",
              "output": undefined,
              "result": "success",
              "time": 854,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with assertions in separate files",
              "output": undefined,
              "result": "success",
              "time": 765,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with async failures",
              "output": undefined,
              "result": "success",
              "time": 983,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with snapshot failures",
              "output": undefined,
              "result": "success",
              "time": 782,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with snapshot failures with hint",
              "output": undefined,
              "result": "success",
              "time": 784,
            },
            TestCaseResult {
              "error": undefined,
              "name": "errors after test has completed",
              "output": undefined,
              "result": "success",
              "time": 782,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/failures.test.ts",
      "output": undefined,
      "totalTime": 10353,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "console printing",
              "output": undefined,
              "result": "success",
              "time": 755,
            },
            TestCaseResult {
              "error": undefined,
              "name": "console printing with --verbose",
              "output": undefined,
              "result": "success",
              "time": 943,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not print to console with --silent",
              "output": undefined,
              "result": "success",
              "time": 855,
            },
            TestCaseResult {
              "error": undefined,
              "name": "respects --noStackTrace",
              "output": undefined,
              "result": "success",
              "time": 974,
            },
            TestCaseResult {
              "error": undefined,
              "name": "respects noStackTrace in config",
              "output": undefined,
              "result": "success",
              "time": 1008,
            },
            TestCaseResult {
              "error": undefined,
              "name": "the jsdom console is the same as the test console",
              "output": undefined,
              "result": "success",
              "time": 1429,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not error out when using winston",
              "output": undefined,
              "result": "success",
              "time": 2049,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/console.test.ts",
      "output": undefined,
      "totalTime": 8071.999999999999,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "basic test constructs",
              "output": undefined,
              "result": "success",
              "time": 762,
            },
            TestCaseResult {
              "error": undefined,
              "name": "interleaved describe and test children order",
              "output": undefined,
              "result": "success",
              "time": 704,
            },
            TestCaseResult {
              "error": undefined,
              "name": "skips",
              "output": undefined,
              "result": "success",
              "time": 685,
            },
            TestCaseResult {
              "error": undefined,
              "name": "only",
              "output": undefined,
              "result": "success",
              "time": 827,
            },
            TestCaseResult {
              "error": undefined,
              "name": "cannot have describe with no implementation",
              "output": undefined,
              "result": "success",
              "time": 682,
            },
            TestCaseResult {
              "error": undefined,
              "name": "cannot test with no implementation",
              "output": undefined,
              "result": "success",
              "time": 701,
            },
            TestCaseResult {
              "error": undefined,
              "name": "skips with expand arg",
              "output": undefined,
              "result": "success",
              "time": 683,
            },
            TestCaseResult {
              "error": undefined,
              "name": "only with expand arg",
              "output": undefined,
              "result": "success",
              "time": 701,
            },
            TestCaseResult {
              "error": undefined,
              "name": "cannot test with no implementation with expand arg",
              "output": undefined,
              "result": "success",
              "time": 663,
            },
            TestCaseResult {
              "error": undefined,
              "name": "function as descriptor",
              "output": undefined,
              "result": "success",
              "time": 752,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/globals.test.ts",
      "output": undefined,
      "totalTime": 7505,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "exits with 1 if coverage threshold is not met",
              "output": undefined,
              "result": "success",
              "time": 963,
            },
            TestCaseResult {
              "error": undefined,
              "name": "exits with 1 if path threshold group is not found in coverage data",
              "output": undefined,
              "result": "success",
              "time": 962,
            },
            TestCaseResult {
              "error": undefined,
              "name": "exits with 0 if global threshold group is not found in coverage data",
              "output": undefined,
              "result": "success",
              "time": 847,
            },
            TestCaseResult {
              "error": undefined,
              "name": "excludes tests matched by path threshold groups from global group",
              "output": undefined,
              "result": "success",
              "time": 1174,
            },
            TestCaseResult {
              "error": undefined,
              "name": "file is matched by all path and glob threshold groups",
              "output": undefined,
              "result": "success",
              "time": 836,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/coverageThreshold.test.ts",
      "output": undefined,
      "totalTime": 4868,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "prints a message with path pattern at the end",
              "output": undefined,
              "result": "success",
              "time": 3030,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/testPathPatternReporterMessage.test.ts",
      "output": undefined,
      "totalTime": 3076,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "Dynamic test filtering",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "uses the default JSON option",
              "output": undefined,
              "result": "success",
              "time": 1044,
            },
            TestCaseResult {
              "error": undefined,
              "name": "uses the CLI option",
              "output": undefined,
              "result": "success",
              "time": 786,
            },
            TestCaseResult {
              "error": undefined,
              "name": "ignores the filter if requested to do so",
              "output": undefined,
              "result": "success",
              "time": 880,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws when you return clowny stuff",
              "output": undefined,
              "result": "success",
              "time": 361,
            },
            TestCaseResult {
              "error": undefined,
              "name": "will call setup on filter before filtering",
              "output": undefined,
              "result": "success",
              "time": 1544,
            },
            TestCaseResult {
              "error": undefined,
              "name": "will print error when filter throws",
              "output": undefined,
              "result": "success",
              "time": 369,
            },
            TestCaseResult {
              "error": undefined,
              "name": "will return no results when setup hook throws",
              "output": undefined,
              "result": "success",
              "time": 354,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/filter.test.ts",
      "output": undefined,
      "totalTime": 5422,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "Given a config with two named projects, first-project and second-project when Jest is started with \`--selectProjects first-project\`",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "runs the tests in the first project only",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints that only first-project will run",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "Given a config with two named projects, first-project and second-project when Jest is started with \`--selectProjects second-project\`",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "runs the tests in the second project only",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints that only second-project will run",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "Given a config with two named projects, first-project and second-project when Jest is started with \`--selectProjects first-project second-project\`",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "runs the tests in the first and second projects",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints that both first-project and second-project will run",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "Given a config with two named projects, first-project and second-project when Jest is started without providing \`--selectProjects\`",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "runs the tests in the first and second projects",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not print which projects are run",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "Given a config with two named projects, first-project and second-project when Jest is started with \`--selectProjects third-project\`",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "fails",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints that no project was found",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "Given a config with two projects, first-project and an unnamed project when Jest is started with \`--selectProjects first-project\`",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "runs the tests in the first project only",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints that a project does not have a name",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints that only first-project will run",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "Given a config with two projects, first-project and an unnamed project when Jest is started without providing \`--selectProjects\`",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "runs the tests in the first and second projects",
              "output": undefined,
              "result": "success",
              "time": 4,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not print that a project has no name",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
        TestGroupResult {
          "name": "Given a config with two projects, first-project and an unnamed project when Jest is started with \`--selectProjects third-project\`",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "fails",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints that a project does not have a name",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints that no project was found",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/selectProjects.test.ts",
      "output": undefined,
      "totalTime": 5236,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "suite without mock name, mock called",
              "output": undefined,
              "result": "success",
              "time": 872,
            },
            TestCaseResult {
              "error": undefined,
              "name": "suite without mock name, mock not called",
              "output": undefined,
              "result": "success",
              "time": 864,
            },
            TestCaseResult {
              "error": undefined,
              "name": "suite with mock name, expect mock not called",
              "output": undefined,
              "result": "success",
              "time": 755,
            },
            TestCaseResult {
              "error": undefined,
              "name": "suite with mock name, mock called, expect fail",
              "output": undefined,
              "result": "success",
              "time": 721,
            },
            TestCaseResult {
              "error": undefined,
              "name": "suite with mock name, mock called 5 times",
              "output": undefined,
              "result": "success",
              "time": 766,
            },
            TestCaseResult {
              "error": undefined,
              "name": "suite with mock name, mock not called 5 times, expect fail",
              "output": undefined,
              "result": "success",
              "time": 948,
            },
            TestCaseResult {
              "error": undefined,
              "name": "suite with mock name, mock called",
              "output": undefined,
              "result": "success",
              "time": 848,
            },
            TestCaseResult {
              "error": undefined,
              "name": "suite with mock name, mock not called",
              "output": undefined,
              "result": "success",
              "time": 948,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/mockNames.test.ts",
      "output": undefined,
      "totalTime": 6771,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "Stack Trace",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "prints a stack trace for runtime errors",
              "output": undefined,
              "result": "success",
              "time": 958,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not print a stack trace for runtime errors when --noStackTrace is given",
              "output": undefined,
              "result": "success",
              "time": 606,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints a stack trace for matching errors",
              "output": undefined,
              "result": "success",
              "time": 714,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not print a stack trace for matching errors when --noStackTrace is given",
              "output": undefined,
              "result": "success",
              "time": 599,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints a stack trace for errors",
              "output": undefined,
              "result": "success",
              "time": 643,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints a stack trace for errors without message in stack trace",
              "output": undefined,
              "result": "success",
              "time": 602,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not print a stack trace for errors when --noStackTrace is given",
              "output": undefined,
              "result": "success",
              "time": 520,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/stackTrace.test.ts",
      "output": undefined,
      "totalTime": 4725,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "works with passing tests",
              "output": undefined,
              "result": "success",
              "time": 882,
            },
            TestCaseResult {
              "error": undefined,
              "name": "shows error message when not enough arguments are supplied to tests",
              "output": undefined,
              "result": "success",
              "time": 597,
            },
            TestCaseResult {
              "error": undefined,
              "name": "shows the correct errors in stderr when failing tests",
              "output": undefined,
              "result": "success",
              "time": 769,
            },
            TestCaseResult {
              "error": undefined,
              "name": "shows only the tests with .only as being ran",
              "output": undefined,
              "result": "success",
              "time": 653,
            },
            TestCaseResult {
              "error": undefined,
              "name": "shows only the tests without .skip as being ran",
              "output": undefined,
              "result": "success",
              "time": 612,
            },
            TestCaseResult {
              "error": undefined,
              "name": "runs only the describe.only.each tests",
              "output": undefined,
              "result": "success",
              "time": 562,
            },
            TestCaseResult {
              "error": undefined,
              "name": "formats args with pretty format when given %p",
              "output": undefined,
              "result": "success",
              "time": 580,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/each.test.ts",
      "output": undefined,
      "totalTime": 4721,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "works fine when function throws error",
              "output": undefined,
              "result": "success",
              "time": 1138,
            },
            TestCaseResult {
              "error": undefined,
              "name": "updates existing snapshot",
              "output": undefined,
              "result": "success",
              "time": 844,
            },
            TestCaseResult {
              "error": undefined,
              "name": "cannot be used with .not",
              "output": undefined,
              "result": "success",
              "time": 680,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should support rejecting promises",
              "output": undefined,
              "result": "success",
              "time": 808,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/toThrowErrorMatchingInlineSnapshot.test.ts",
      "output": undefined,
      "totalTime": 3562,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "does not re-run tests when only access time is modified",
              "output": undefined,
              "result": "success",
              "time": 4313,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/watchModeNoAccess.test.ts",
      "output": undefined,
      "totalTime": 4370,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "successfully runs the tests inside \`pnp/\`",
              "output": undefined,
              "result": "success",
              "time": 2547,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/pnp.test.ts",
      "output": undefined,
      "totalTime": 2715,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "errors if describe returns a Promise",
              "output": undefined,
              "result": "success",
              "time": 781,
            },
            TestCaseResult {
              "error": undefined,
              "name": "errors if describe returns something",
              "output": undefined,
              "result": "success",
              "time": 709,
            },
            TestCaseResult {
              "error": undefined,
              "name": "errors if describe throws",
              "output": undefined,
              "result": "success",
              "time": 778,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/declarationErrors.test.ts",
      "output": undefined,
      "totalTime": 2389,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "Wrong globals for environment",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "print useful error for window",
              "output": undefined,
              "result": "success",
              "time": 736,
            },
            TestCaseResult {
              "error": undefined,
              "name": "print useful error for document",
              "output": undefined,
              "result": "success",
              "time": 533,
            },
            TestCaseResult {
              "error": undefined,
              "name": "print useful error for navigator",
              "output": undefined,
              "result": "success",
              "time": 606,
            },
            TestCaseResult {
              "error": undefined,
              "name": "print useful error for unref",
              "output": undefined,
              "result": "success",
              "time": 1301,
            },
            TestCaseResult {
              "error": undefined,
              "name": "print useful error when it explodes during evaluation",
              "output": undefined,
              "result": "success",
              "time": 659,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/wrongEnv.test.ts",
      "output": undefined,
      "totalTime": 3877,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "setupFilesAfterEnv",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "requires multiple setup files before each file in the suite",
              "output": undefined,
              "result": "success",
              "time": 1063,
            },
            TestCaseResult {
              "error": undefined,
              "name": "requires setup files *after* the test runners are required",
              "output": undefined,
              "result": "success",
              "time": 800,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/setupFilesAfterEnvConfig.test.ts",
      "output": undefined,
      "totalTime": 1967,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "No tests are found",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "fails the test suite in standard situation",
              "output": undefined,
              "result": "success",
              "time": 488,
            },
            TestCaseResult {
              "error": undefined,
              "name": "doesn't fail the test suite if --passWithNoTests passed",
              "output": undefined,
              "result": "success",
              "time": 518,
            },
            TestCaseResult {
              "error": undefined,
              "name": "doesn't fail the test suite if using --lastCommit",
              "output": undefined,
              "result": "success",
              "time": 608,
            },
            TestCaseResult {
              "error": undefined,
              "name": "doesn't fail the test suite if using --onlyChanged",
              "output": undefined,
              "result": "success",
              "time": 565,
            },
            TestCaseResult {
              "error": undefined,
              "name": "doesn't fail the test suite if using --findRelatedTests",
              "output": undefined,
              "result": "success",
              "time": 505,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/noTestsFound.test.ts",
      "output": undefined,
      "totalTime": 2739,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "works with custom matchers",
              "output": undefined,
              "result": "success",
              "time": 873,
            },
            TestCaseResult {
              "error": undefined,
              "name": "custom async matchers",
              "output": undefined,
              "result": "success",
              "time": 623,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/customMatcherStackTrace.test.ts",
      "output": undefined,
      "totalTime": 1539,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "print correct error message with nested test definitions outside describe",
              "output": undefined,
              "result": "success",
              "time": 1354,
            },
            TestCaseResult {
              "error": undefined,
              "name": "print correct error message with nested test definitions inside describe",
              "output": undefined,
              "result": "success",
              "time": 1088,
            },
            TestCaseResult {
              "error": undefined,
              "name": "print correct message when nesting describe inside it",
              "output": undefined,
              "result": "success",
              "time": 1047,
            },
            TestCaseResult {
              "error": undefined,
              "name": "print correct message when nesting a hook inside it",
              "output": undefined,
              "result": "success",
              "time": 1027,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/nestedTestDefinitions.test.ts",
      "output": undefined,
      "totalTime": 4641,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "suite with auto-clear",
              "output": undefined,
              "result": "success",
              "time": 801,
            },
            TestCaseResult {
              "error": undefined,
              "name": "suite without auto-clear",
              "output": undefined,
              "result": "success",
              "time": 837,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/autoClearMocks.test.ts",
      "output": undefined,
      "totalTime": 1681,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "exits the process after test are done but before timers complete",
              "output": undefined,
              "result": "success",
              "time": 2157,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/forceExit.test.ts",
      "output": undefined,
      "totalTime": 2208,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "exits with a specified code when test fail",
              "output": undefined,
              "result": "success",
              "time": 2073,
            },
            TestCaseResult {
              "error": undefined,
              "name": "exits with a specified code when bailing from a failed test",
              "output": undefined,
              "result": "success",
              "time": 2188,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/testFailureExitCode.test.ts",
      "output": undefined,
      "totalTime": 4476,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "",
              "output": undefined,
              "result": "success",
              "time": 905,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/promiseReject.test.ts",
      "output": undefined,
      "totalTime": 967,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "run timers after resetAllMocks test",
              "output": undefined,
              "result": "success",
              "time": 944,
            },
            TestCaseResult {
              "error": undefined,
              "name": "run timers with resetMocks in config test",
              "output": undefined,
              "result": "success",
              "time": 814,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/timerResetMocks.test.ts",
      "output": undefined,
      "totalTime": 1878,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "triggers setup/teardown hooks",
              "output": undefined,
              "result": "success",
              "time": 1422,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/testEnvironmentAsync.test.ts",
      "output": undefined,
      "totalTime": 1493,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "show error message with matching files",
              "output": undefined,
              "result": "success",
              "time": 1064,
            },
            TestCaseResult {
              "error": undefined,
              "name": "show error message when no js moduleFileExtensions",
              "output": undefined,
              "result": "success",
              "time": 117,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/resolveNoFileExtensions.test.ts",
      "output": undefined,
      "totalTime": 1263,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "works with nested event loops",
              "output": undefined,
              "result": "success",
              "time": 1392,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/nestedEventLoop.test.ts",
      "output": undefined,
      "totalTime": 1422,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "no tests found message is redirected to stderr",
              "output": undefined,
              "result": "success",
              "time": 1257,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/useStderr.test.ts",
      "output": undefined,
      "totalTime": 1352,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should work without error",
              "output": undefined,
              "result": "success",
              "time": 1310,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/domDiffing.test.ts",
      "output": undefined,
      "totalTime": 1361,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "console printing",
              "output": undefined,
              "result": "success",
              "time": 1301,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/consoleAfterTeardown.test.ts",
      "output": undefined,
      "totalTime": 1341,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "runs tests in only test.js and spec.js",
              "output": undefined,
              "result": "success",
              "time": 944,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/testInRoot.test.ts",
      "output": undefined,
      "totalTime": 1008.9999999999999,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "\`require.main\` on using \`jest.isolateModules\` should not be undefined",
              "output": undefined,
              "result": "success",
              "time": 867,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/requireMainIsolateModules.test.ts",
      "output": undefined,
      "totalTime": 976,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "jest --clearCache",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "normal run results in cache directory being written",
              "output": undefined,
              "result": "success",
              "time": 792,
            },
            TestCaseResult {
              "error": undefined,
              "name": "clearCache results in deleted directory and exitCode 0",
              "output": undefined,
              "result": "success",
              "time": 127,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/clearCache.test.ts",
      "output": undefined,
      "totalTime": 1004,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "Runtime Internal Module Registry",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "correctly makes use of internal module registry when requiring modules",
              "output": undefined,
              "result": "success",
              "time": 1150,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/runtimeInternalModuleRegistry.test.ts",
      "output": undefined,
      "totalTime": 1202,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "resolve node module",
              "output": undefined,
              "result": "success",
              "time": 890,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/resolveNodeModule.test.ts",
      "output": undefined,
      "totalTime": 943,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "setImmediate",
              "output": undefined,
              "result": "success",
              "time": 859,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/setImmediate.test.ts",
      "output": undefined,
      "totalTime": 904,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "JSON Reporter",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "fails the test suite if it contains no tests",
              "output": undefined,
              "result": "success",
              "time": 824,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/emptySuiteError.test.ts",
      "output": undefined,
      "totalTime": 885,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "suite with test cases that contain malformed sourcemaps",
              "output": undefined,
              "result": "success",
              "time": 823,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/badSourceMap.test.ts",
      "output": undefined,
      "totalTime": 858,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "useRealTimers cancels \\"timers\\": \\"fake\\" for whole test file",
              "output": undefined,
              "result": "success",
              "time": 986,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/timerUseRealTimers.test.ts",
      "output": undefined,
      "totalTime": 1018,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "can redefine global",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/global-mutation.test.ts",
      "output": undefined,
      "totalTime": 40,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "run Jest programmatically cjs",
              "output": undefined,
              "result": "success",
              "time": 75,
            },
            TestCaseResult {
              "error": undefined,
              "name": "run Jest programmatically esm",
              "output": undefined,
              "result": "success",
              "time": 462,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/runProgrammatically.test.ts",
      "output": undefined,
      "totalTime": 575,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "Symbol deletion",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/symbol.test.ts",
      "output": undefined,
      "totalTime": 49,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should not warn when a mock file changes",
              "output": undefined,
              "result": "success",
              "time": 298,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/hasteMapMockChanged.test.ts",
      "output": undefined,
      "totalTime": 379,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "error when rootDir does not exist",
              "output": undefined,
              "result": "success",
              "time": 109,
            },
            TestCaseResult {
              "error": undefined,
              "name": "error when rootDir is a file",
              "output": undefined,
              "result": "success",
              "time": 109,
            },
            TestCaseResult {
              "error": undefined,
              "name": "error when roots directory does not exist",
              "output": undefined,
              "result": "success",
              "time": 137,
            },
            TestCaseResult {
              "error": undefined,
              "name": "error when roots is a file",
              "output": undefined,
              "result": "success",
              "time": 129,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/existentRoots.test.ts",
      "output": undefined,
      "totalTime": 627,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "\`done()\` works properly in hooks",
              "output": undefined,
              "result": "success",
              "time": 819,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/doneInHooks.test.ts",
      "output": undefined,
      "totalTime": 855,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "calls asynchronous handleTestEvent in testEnvironment",
              "output": undefined,
              "result": "success",
              "time": 1458,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/testEnvironmentCircusAsync.test.ts",
      "output": undefined,
      "totalTime": 1507,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "moduleNameMapper wrong configuration",
              "output": undefined,
              "result": "success",
              "time": 1030,
            },
            TestCaseResult {
              "error": undefined,
              "name": "moduleNameMapper wrong array configuration",
              "output": undefined,
              "result": "success",
              "time": 909,
            },
            TestCaseResult {
              "error": undefined,
              "name": "moduleNameMapper correct configuration",
              "output": undefined,
              "result": "success",
              "time": 913,
            },
            TestCaseResult {
              "error": undefined,
              "name": "moduleNameMapper correct configuration mocking module of absolute path",
              "output": undefined,
              "result": "success",
              "time": 1479,
            },
            TestCaseResult {
              "error": undefined,
              "name": "moduleNameMapper with mocking",
              "output": undefined,
              "result": "success",
              "time": 967,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/moduleNameMapper.test.ts",
      "output": undefined,
      "totalTime": 5395,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "Custom Reporters Integration",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "valid string format for adding reporters",
              "output": undefined,
              "result": "success",
              "time": 966,
            },
            TestCaseResult {
              "error": undefined,
              "name": "valid array format for adding reporters",
              "output": undefined,
              "result": "success",
              "time": 623,
            },
            TestCaseResult {
              "error": undefined,
              "name": "invalid format for adding reporters",
              "output": undefined,
              "result": "success",
              "time": 115,
            },
            TestCaseResult {
              "error": undefined,
              "name": "default reporters enabled",
              "output": undefined,
              "result": "success",
              "time": 620,
            },
            TestCaseResult {
              "error": undefined,
              "name": "TestReporter with all tests passing",
              "output": undefined,
              "result": "success",
              "time": 978,
            },
            TestCaseResult {
              "error": undefined,
              "name": "TestReporter with all tests failing",
              "output": undefined,
              "result": "success",
              "time": 1093,
            },
            TestCaseResult {
              "error": undefined,
              "name": "IncompleteReporter for flexibility",
              "output": undefined,
              "result": "success",
              "time": 801,
            },
            TestCaseResult {
              "error": undefined,
              "name": "reporters can be default exports",
              "output": undefined,
              "result": "success",
              "time": 792,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints reporter errors",
              "output": undefined,
              "result": "success",
              "time": 495,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/customReporters.test.ts",
      "output": undefined,
      "totalTime": 6553,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "--findRelatedTests flag",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "runs tests related to filename",
              "output": undefined,
              "result": "success",
              "time": 1324,
            },
            TestCaseResult {
              "error": undefined,
              "name": "runs tests related to uppercased filename on case-insensitive os",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "runs tests related to filename with a custom dependency extractor",
              "output": undefined,
              "result": "success",
              "time": 1307,
            },
            TestCaseResult {
              "error": undefined,
              "name": "generates coverage report for filename",
              "output": undefined,
              "result": "success",
              "time": 2001.9999999999998,
            },
            TestCaseResult {
              "error": undefined,
              "name": "coverage configuration is applied correctly",
              "output": undefined,
              "result": "success",
              "time": 1516,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/findRelatedFiles.test.ts",
      "output": undefined,
      "totalTime": 6230,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "Environment override",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "uses jsdom when specified",
              "output": undefined,
              "result": "success",
              "time": 1501,
            },
            TestCaseResult {
              "error": undefined,
              "name": "uses node as default from package.json",
              "output": undefined,
              "result": "success",
              "time": 1002,
            },
            TestCaseResult {
              "error": undefined,
              "name": "uses node when specified",
              "output": undefined,
              "result": "success",
              "time": 664,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fails when the env is not available",
              "output": undefined,
              "result": "success",
              "time": 121,
            },
          ],
        },
        TestGroupResult {
          "name": "Environment equivalent",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "uses jsdom",
              "output": undefined,
              "result": "success",
              "time": 1092,
            },
            TestCaseResult {
              "error": undefined,
              "name": "uses node",
              "output": undefined,
              "result": "success",
              "time": 731,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/env.test.ts",
      "output": undefined,
      "totalTime": 5221,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "globalSetup is triggered once before all test suites",
              "output": undefined,
              "result": "success",
              "time": 2384,
            },
            TestCaseResult {
              "error": undefined,
              "name": "jest throws an error when globalSetup does not export a function",
              "output": undefined,
              "result": "success",
              "time": 851,
            },
            TestCaseResult {
              "error": undefined,
              "name": "globalSetup function gets jest config object as a parameter",
              "output": undefined,
              "result": "success",
              "time": 918,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should call globalSetup function of multiple projects",
              "output": undefined,
              "result": "success",
              "time": 1307,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should not call a globalSetup of a project if there are no tests to run from this project",
              "output": undefined,
              "result": "success",
              "time": 1189,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should not call any globalSetup if there are no tests to run",
              "output": undefined,
              "result": "success",
              "time": 792,
            },
            TestCaseResult {
              "error": undefined,
              "name": "globalSetup works with default export",
              "output": undefined,
              "result": "success",
              "time": 926,
            },
            TestCaseResult {
              "error": undefined,
              "name": "globalSetup throws with named export",
              "output": undefined,
              "result": "success",
              "time": 783,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should not transpile the transformer",
              "output": undefined,
              "result": "success",
              "time": 718,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should transform node_modules if configured by transformIgnorePatterns",
              "output": undefined,
              "result": "success",
              "time": 1165,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/globalSetup.test.ts",
      "output": undefined,
      "totalTime": 13926,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "prints a warning if a worker is force exited",
              "output": undefined,
              "result": "success",
              "time": 2355,
            },
            TestCaseResult {
              "error": undefined,
              "name": "force exits a worker that fails to exit gracefully",
              "output": undefined,
              "result": "success",
              "time": 2319,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/workerForceExit.test.ts",
      "output": undefined,
      "totalTime": 4751,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "successfully runs the tests inside \`babel-plugin-jest-hoist/\`",
              "output": undefined,
              "result": "success",
              "time": 6179,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/babelPluginJestHoist.test.ts",
      "output": undefined,
      "totalTime": 6249,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "code coverage for transform instrumented code",
              "output": undefined,
              "result": "success",
              "time": 4910,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/coverageTransformInstrumented.test.ts",
      "output": undefined,
      "totalTime": 5029,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "does not work on jest-circus",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "exceeds the timeout set using jasmine.DEFAULT_TIMEOUT_INTERVAL",
              "output": undefined,
              "result": "skipped",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not exceed the timeout using jasmine.DEFAULT_TIMEOUT_INTERVAL",
              "output": undefined,
              "result": "skipped",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "can read and write jasmine.DEFAULT_TIMEOUT_INTERVAL",
              "output": undefined,
              "result": "skipped",
              "time": 0,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/timeoutsLegacy.test.ts",
      "output": undefined,
      "totalTime": 71,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "successfully transpiles async",
              "output": undefined,
              "result": "success",
              "time": 4040,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/asyncRegenerator.test.ts",
      "output": undefined,
      "totalTime": 4127,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "works fine when function throws error",
              "output": undefined,
              "result": "success",
              "time": 790,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws the error if tested function didn't throw error",
              "output": undefined,
              "result": "success",
              "time": 713,
            },
            TestCaseResult {
              "error": undefined,
              "name": "accepts custom snapshot name",
              "output": undefined,
              "result": "success",
              "time": 653,
            },
            TestCaseResult {
              "error": undefined,
              "name": "cannot be used with .not",
              "output": undefined,
              "result": "success",
              "time": 644,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should support rejecting promises",
              "output": undefined,
              "result": "success",
              "time": 647,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/toThrowErrorMatchingSnapshot.test.ts",
      "output": undefined,
      "totalTime": 3524,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "works with all statuses",
              "output": undefined,
              "result": "success",
              "time": 891,
            },
            TestCaseResult {
              "error": undefined,
              "name": "shows error messages when called with no arguments",
              "output": undefined,
              "result": "success",
              "time": 602,
            },
            TestCaseResult {
              "error": undefined,
              "name": "shows error messages when called with multiple arguments",
              "output": undefined,
              "result": "success",
              "time": 669,
            },
            TestCaseResult {
              "error": undefined,
              "name": "shows error messages when called with invalid argument",
              "output": undefined,
              "result": "success",
              "time": 624,
            },
            TestCaseResult {
              "error": undefined,
              "name": "shows todo messages when in verbose mode",
              "output": undefined,
              "result": "success",
              "time": 710,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/testTodo.test.ts",
      "output": undefined,
      "totalTime": 3573,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "onlyFailures flag works in non-watch mode",
              "output": undefined,
              "result": "success",
              "time": 2841,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/onlyFailuresNonWatch.test.ts",
      "output": undefined,
      "totalTime": 2893,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "supports json preset",
              "output": undefined,
              "result": "success",
              "time": 860,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports js preset",
              "output": undefined,
              "result": "success",
              "time": 956,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/presets.test.ts",
      "output": undefined,
      "totalTime": 1966,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "works with passing tests",
              "output": undefined,
              "result": "success",
              "time": 1173,
            },
            TestCaseResult {
              "error": undefined,
              "name": "shows the correct errors in stderr when failing tests",
              "output": undefined,
              "result": "success",
              "time": 760,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/expectAsyncMatcher.test.ts",
      "output": undefined,
      "totalTime": 2732,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "babel-jest",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "runs transpiled code",
              "output": undefined,
              "result": "success",
              "time": 2241,
            },
            TestCaseResult {
              "error": undefined,
              "name": "instruments only specific files and collects coverage",
              "output": undefined,
              "result": "success",
              "time": 2589,
            },
          ],
        },
        TestGroupResult {
          "name": "babel-jest ignored",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "tells user to match ignored files",
              "output": undefined,
              "result": "success",
              "time": 940,
            },
          ],
        },
        TestGroupResult {
          "name": "babel-jest with manual transformer",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "runs transpiled code",
              "output": undefined,
              "result": "success",
              "time": 1608,
            },
          ],
        },
        TestGroupResult {
          "name": "no babel-jest",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "fails with syntax error on flow types",
              "output": undefined,
              "result": "success",
              "time": 1343,
            },
            TestCaseResult {
              "error": undefined,
              "name": "instrumentation with no babel-jest",
              "output": undefined,
              "result": "success",
              "time": 1378,
            },
          ],
        },
        TestGroupResult {
          "name": "custom transformer",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "proprocesses files",
              "output": undefined,
              "result": "success",
              "time": 673,
            },
            TestCaseResult {
              "error": undefined,
              "name": "instruments files",
              "output": undefined,
              "result": "success",
              "time": 706,
            },
          ],
        },
        TestGroupResult {
          "name": "multiple-transformers",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "transforms dependencies using specific transformers",
              "output": undefined,
              "result": "success",
              "time": 7383,
            },
          ],
        },
        TestGroupResult {
          "name": "ecmascript-modules-support",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "runs transpiled code",
              "output": undefined,
              "result": "success",
              "time": 923,
            },
          ],
        },
        TestGroupResult {
          "name": "transformer-config",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "runs transpiled code",
              "output": undefined,
              "result": "success",
              "time": 1636,
            },
            TestCaseResult {
              "error": undefined,
              "name": "instruments only specific files and collects coverage",
              "output": undefined,
              "result": "success",
              "time": 1588,
            },
          ],
        },
        TestGroupResult {
          "name": "transformer caching",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "does not rerun transform within worker",
              "output": undefined,
              "result": "success",
              "time": 1033,
            },
          ],
        },
        TestGroupResult {
          "name": "transform-environment",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should transform the environment",
              "output": undefined,
              "result": "success",
              "time": 1044,
            },
          ],
        },
        TestGroupResult {
          "name": "transform-runner",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should transform runner",
              "output": undefined,
              "result": "success",
              "time": 795,
            },
          ],
        },
        TestGroupResult {
          "name": "transform-testrunner",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should transform testRunner",
              "output": undefined,
              "result": "success",
              "time": 783,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/transform.test.ts",
      "output": undefined,
      "totalTime": 26740,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "chai assertion errors should display properly",
              "output": undefined,
              "result": "success",
              "time": 1817,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/chaiAssertionLibrary.ts",
      "output": undefined,
      "totalTime": 1902,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "processes stack traces and code frames with source maps with coverage",
              "output": undefined,
              "result": "success",
              "time": 2394,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/stackTraceSourceMapsWithCoverage.test.ts",
      "output": undefined,
      "totalTime": 2444,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "run prioritySequence first sync",
              "output": undefined,
              "result": "success",
              "time": 933,
            },
            TestCaseResult {
              "error": undefined,
              "name": "run prioritySequence first async",
              "output": undefined,
              "result": "success",
              "time": 901,
            },
            TestCaseResult {
              "error": undefined,
              "name": "run failed tests async",
              "output": undefined,
              "result": "success",
              "time": 849,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/customTestSequencers.test.ts",
      "output": undefined,
      "totalTime": 2757,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "Correct BeforeAll run",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "ensures the BeforeAll of ignored suite is not run",
              "output": undefined,
              "result": "success",
              "time": 905,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/beforeAllFiltered.ts",
      "output": undefined,
      "totalTime": 958,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "Fake promises",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should be possible to resolve with fake timers using immediates",
              "output": undefined,
              "result": "success",
              "time": 901,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should be possible to resolve with fake timers using asap",
              "output": undefined,
              "result": "success",
              "time": 780,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/fakePromises.test.ts",
      "output": undefined,
      "totalTime": 1716,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "processes stack traces and code frames with source maps",
              "output": undefined,
              "result": "success",
              "time": 2153,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/stackTraceSourceMaps.test.ts",
      "output": undefined,
      "totalTime": 2185,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "successfully runs tests with dynamic dependencies",
              "output": undefined,
              "result": "success",
              "time": 811,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/dynamicRequireDependencies.ts",
      "output": undefined,
      "totalTime": 847,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "overriding native promise does not freeze Jest",
              "output": undefined,
              "result": "success",
              "time": 1116,
            },
            TestCaseResult {
              "error": undefined,
              "name": "has a duration even if time is faked",
              "output": undefined,
              "result": "success",
              "time": 859,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/overrideGlobals.test.ts",
      "output": undefined,
      "totalTime": 2045.9999999999998,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "Tests are executed only once even in an MPR",
              "output": undefined,
              "result": "success",
              "time": 908,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/executeTestsOnceInMpr.ts",
      "output": undefined,
      "totalTime": 976,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "module.parent should be null in test files",
              "output": undefined,
              "result": "success",
              "time": 830,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/moduleParentNullInTest.ts",
      "output": undefined,
      "totalTime": 886,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "prints useful error for requires after test is done",
              "output": undefined,
              "result": "success",
              "time": 842,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/requireAfterTeardown.test.ts",
      "output": undefined,
      "totalTime": 921,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "suite with invalid assertions in afterAll",
              "output": undefined,
              "result": "success",
              "time": 827,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/lifecycles.ts",
      "output": undefined,
      "totalTime": 861,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "exits the process after test are done but before timers complete",
              "output": undefined,
              "result": "success",
              "time": 187,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/hasteMapSha1.test.ts",
      "output": undefined,
      "totalTime": 298,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "JSON is available in the global scope",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "JSON.parse creates objects from within this context",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/json.test.ts",
      "output": undefined,
      "totalTime": 29,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "testNamePattern",
              "output": undefined,
              "result": "success",
              "time": 859,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/testResultsProcessor.test.ts",
      "output": undefined,
      "totalTime": 910,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "jest --debug",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "outputs debugging info before running the test",
              "output": undefined,
              "result": "success",
              "time": 857,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/debug.test.ts",
      "output": undefined,
      "totalTime": 899,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "imported globals",
              "output": undefined,
              "result": "success",
              "time": 1012,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/importedGlobals.test.ts",
      "output": undefined,
      "totalTime": 1043,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "use the custom resolver",
              "output": undefined,
              "result": "success",
              "time": 749,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/customResolver.test.ts",
      "output": undefined,
      "totalTime": 826,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "handles circular inequality properly",
              "output": undefined,
              "result": "success",
              "time": 1407,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/circularInequality.test.ts",
      "output": undefined,
      "totalTime": 1451,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "globals are undefined if passed \`false\` from CLI",
              "output": undefined,
              "result": "success",
              "time": 876,
            },
            TestCaseResult {
              "error": undefined,
              "name": "globals are undefined if passed \`false\` from config",
              "output": undefined,
              "result": "success",
              "time": 918,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/injectGlobals.test.ts",
      "output": undefined,
      "totalTime": 1860,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "correctly skip \`beforeAll\`s in skipped tests",
              "output": undefined,
              "result": "success",
              "time": 998,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/skipBeforeAfterAll.test.ts",
      "output": undefined,
      "totalTime": 1061,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "works with custom inline snapshot matchers",
              "output": undefined,
              "result": "success",
              "time": 2145,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/customInlineSnapshotMatchers.test.ts",
      "output": undefined,
      "totalTime": 2206,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "Regex Char In Path",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "parses paths containing regex chars correctly",
              "output": undefined,
              "result": "success",
              "time": 873,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/regexCharInPath.test.ts",
      "output": undefined,
      "totalTime": 962,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "Coverage Report",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "outputs coverage report",
              "output": undefined,
              "result": "success",
              "time": 551,
            },
          ],
        },
        TestGroupResult {
          "name": "File path not found in mulit-project scenario",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "outputs coverage report",
              "output": undefined,
              "result": "success",
              "time": 463,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/noTestFound.test.ts",
      "output": undefined,
      "totalTime": 1063,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "test config is without transform",
              "output": undefined,
              "result": "success",
              "time": 133,
            },
          ],
        },
        TestGroupResult {
          "name": "on node ^12.16.0 || >=13.7.0",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "runs test with native ESM",
              "output": undefined,
              "result": "success",
              "time": 690,
            },
          ],
        },
        TestGroupResult {
          "name": "on node >=14.3.0",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "supports top-level await",
              "output": undefined,
              "result": "skipped",
              "time": 0,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/nativeEsm.test.ts",
      "output": undefined,
      "totalTime": 905,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "works with passing tests",
              "output": undefined,
              "result": "success",
              "time": 777,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws error for unknown dashed & camelcase args",
              "output": undefined,
              "result": "success",
              "time": 119,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/supportsDashedArgs.ts",
      "output": undefined,
      "totalTime": 968,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should transform linked modules",
              "output": undefined,
              "result": "success",
              "time": 734,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/transformLinkedModules.test.ts",
      "output": undefined,
      "totalTime": 783,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "testNamePattern",
              "output": undefined,
              "result": "success",
              "time": 788,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/testNamePattern.test.ts",
      "output": undefined,
      "totalTime": 859,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "mocks async functions",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/nativeAsyncMock.test.ts",
      "output": undefined,
      "totalTime": 55,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "reports the correct file size",
              "output": undefined,
              "result": "success",
              "time": 83,
            },
            TestCaseResult {
              "error": undefined,
              "name": "updates the file size when a file changes",
              "output": undefined,
              "result": "success",
              "time": 217,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/hasteMapSize.test.ts",
      "output": undefined,
      "totalTime": 397,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "defining tests and hooks asynchronously throws",
              "output": undefined,
              "result": "success",
              "time": 832,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/circusDeclarationErrors.test.ts",
      "output": undefined,
      "totalTime": 869,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "calls testEnvironment handleTestEvent",
              "output": undefined,
              "result": "success",
              "time": 1456,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/testEnvironmentCircus.test.ts",
      "output": undefined,
      "totalTime": 1501,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "\`done()\` should not be called more than once",
              "output": undefined,
              "result": "success",
              "time": 820,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/callDoneTwice.test.ts",
      "output": undefined,
      "totalTime": 882,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "hook in empty describe",
              "output": undefined,
              "result": "success",
              "time": 829,
            },
            TestCaseResult {
              "error": undefined,
              "name": "hook in describe with skipped test",
              "output": undefined,
              "result": "success",
              "time": 614,
            },
            TestCaseResult {
              "error": undefined,
              "name": "hook in empty nested describe",
              "output": undefined,
              "result": "success",
              "time": 680,
            },
            TestCaseResult {
              "error": undefined,
              "name": "multiple hooks in empty describe",
              "output": undefined,
              "result": "success",
              "time": 726,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/emptyDescribeWithHooks.test.ts",
      "output": undefined,
      "totalTime": 2886,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "does not work on jest-circus",
              "output": undefined,
              "result": "success",
              "time": 4,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fail.test.js errors in errorOnDeprecated mode",
              "output": undefined,
              "result": "skipped",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "jasmine.addMatchers.test.js errors in errorOnDeprecated mode",
              "output": undefined,
              "result": "skipped",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "jasmine.any.test.js errors in errorOnDeprecated mode",
              "output": undefined,
              "result": "skipped",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "jasmine.anything.test.js errors in errorOnDeprecated mode",
              "output": undefined,
              "result": "skipped",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "jasmine.arrayContaining.test.js errors in errorOnDeprecated mode",
              "output": undefined,
              "result": "skipped",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "jasmine.createSpy.test.js errors in errorOnDeprecated mode",
              "output": undefined,
              "result": "skipped",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "jasmine.objectContaining.test.js errors in errorOnDeprecated mode",
              "output": undefined,
              "result": "skipped",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "jasmine.stringMatching.test.js errors in errorOnDeprecated mode",
              "output": undefined,
              "result": "skipped",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "pending.test.js errors in errorOnDeprecated mode",
              "output": undefined,
              "result": "skipped",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "spyOn.test.js errors in errorOnDeprecated mode",
              "output": undefined,
              "result": "skipped",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "spyOnProperty.test.js errors in errorOnDeprecated mode",
              "output": undefined,
              "result": "skipped",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "defaultTimeoutInterval.test.js errors in errorOnDeprecated mode",
              "output": undefined,
              "result": "skipped",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "fail.test.js errors when not in errorOnDeprecated mode",
              "output": undefined,
              "result": "skipped",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "jasmine.addMatchers.test.js passes when not in errorOnDeprecated mode",
              "output": undefined,
              "result": "skipped",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "jasmine.any.test.js passes when not in errorOnDeprecated mode",
              "output": undefined,
              "result": "skipped",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "jasmine.anything.test.js passes when not in errorOnDeprecated mode",
              "output": undefined,
              "result": "skipped",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "jasmine.arrayContaining.test.js passes when not in errorOnDeprecated mode",
              "output": undefined,
              "result": "skipped",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "jasmine.createSpy.test.js passes when not in errorOnDeprecated mode",
              "output": undefined,
              "result": "skipped",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "jasmine.objectContaining.test.js passes when not in errorOnDeprecated mode",
              "output": undefined,
              "result": "skipped",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "jasmine.stringMatching.test.js passes when not in errorOnDeprecated mode",
              "output": undefined,
              "result": "skipped",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "pending.test.js passes when not in errorOnDeprecated mode",
              "output": undefined,
              "result": "skipped",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "spyOn.test.js passes when not in errorOnDeprecated mode",
              "output": undefined,
              "result": "skipped",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "spyOnProperty.test.js errors when not in errorOnDeprecated mode",
              "output": undefined,
              "result": "skipped",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "defaultTimeoutInterval.test.js passes when not in errorOnDeprecated mode",
              "output": undefined,
              "result": "skipped",
              "time": 0,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/errorOnDeprecated.test.ts",
      "output": undefined,
      "totalTime": 56,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "Test Retries",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "retries failed tests",
              "output": undefined,
              "result": "success",
              "time": 859,
            },
            TestCaseResult {
              "error": undefined,
              "name": "reporter shows more than 1 invocation if test is retried",
              "output": undefined,
              "result": "success",
              "time": 829,
            },
            TestCaseResult {
              "error": undefined,
              "name": "reporter shows 1 invocation if tests are not retried",
              "output": undefined,
              "result": "success",
              "time": 811,
            },
            TestCaseResult {
              "error": undefined,
              "name": "tests are not retried if beforeAll hook failure occurs",
              "output": undefined,
              "result": "success",
              "time": 706,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/testRetries.test.ts",
      "output": undefined,
      "totalTime": 3277,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "works with jest.config.ts",
              "output": undefined,
              "result": "success",
              "time": 3356,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with tsconfig.json",
              "output": undefined,
              "result": "success",
              "time": 3224,
            },
            TestCaseResult {
              "error": undefined,
              "name": "traverses directory tree up until it finds jest.config",
              "output": undefined,
              "result": "success",
              "time": 3116,
            },
            TestCaseResult {
              "error": undefined,
              "name": "it does type check the config",
              "output": undefined,
              "result": "success",
              "time": 2278,
            },
            TestCaseResult {
              "error": undefined,
              "name": "invalid JS in jest.config.ts",
              "output": undefined,
              "result": "success",
              "time": 2200,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/jest.config.ts.test.ts",
      "output": undefined,
      "totalTime": 14322,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "outputs coverage report",
              "output": undefined,
              "result": "success",
              "time": 2076,
            },
            TestCaseResult {
              "error": undefined,
              "name": "collects coverage only from specified file",
              "output": undefined,
              "result": "success",
              "time": 1646,
            },
            TestCaseResult {
              "error": undefined,
              "name": "collects coverage only from multiple specified files",
              "output": undefined,
              "result": "success",
              "time": 1587,
            },
            TestCaseResult {
              "error": undefined,
              "name": "collects coverage only from specified files avoiding dependencies",
              "output": undefined,
              "result": "success",
              "time": 1173,
            },
            TestCaseResult {
              "error": undefined,
              "name": "json reporter printing with --coverage",
              "output": undefined,
              "result": "success",
              "time": 898,
            },
            TestCaseResult {
              "error": undefined,
              "name": "outputs coverage report as json",
              "output": undefined,
              "result": "success",
              "time": 1824,
            },
            TestCaseResult {
              "error": undefined,
              "name": "outputs coverage report when text is requested",
              "output": undefined,
              "result": "success",
              "time": 1872,
            },
            TestCaseResult {
              "error": undefined,
              "name": "outputs coverage report when text-summary is requested",
              "output": undefined,
              "result": "success",
              "time": 1850,
            },
            TestCaseResult {
              "error": undefined,
              "name": "outputs coverage report when text and text-summary is requested",
              "output": undefined,
              "result": "success",
              "time": 1827,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not output coverage report when html is requested",
              "output": undefined,
              "result": "success",
              "time": 2021,
            },
            TestCaseResult {
              "error": undefined,
              "name": "collects coverage from duplicate files avoiding shared cache",
              "output": undefined,
              "result": "success",
              "time": 2245,
            },
            TestCaseResult {
              "error": undefined,
              "name": "generates coverage when using the testRegex config param",
              "output": undefined,
              "result": "success",
              "time": 2300,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/coverageReport.test.ts",
      "output": undefined,
      "totalTime": 22264,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "basic support",
              "output": undefined,
              "result": "success",
              "time": 4442,
            },
            TestCaseResult {
              "error": undefined,
              "name": "do not indent empty lines",
              "output": undefined,
              "result": "success",
              "time": 1940,
            },
            TestCaseResult {
              "error": undefined,
              "name": "handles property matchers",
              "output": undefined,
              "result": "success",
              "time": 3820,
            },
            TestCaseResult {
              "error": undefined,
              "name": "removes obsolete external snapshots",
              "output": undefined,
              "result": "success",
              "time": 3007,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports async matchers",
              "output": undefined,
              "result": "success",
              "time": 895,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports async tests",
              "output": undefined,
              "result": "success",
              "time": 1117,
            },
            TestCaseResult {
              "error": undefined,
              "name": "writes snapshots with non-literals in expect(...)",
              "output": undefined,
              "result": "success",
              "time": 897,
            },
            TestCaseResult {
              "error": undefined,
              "name": "handles mocking native modules prettier relies on",
              "output": undefined,
              "result": "success",
              "time": 1142,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports custom matchers",
              "output": undefined,
              "result": "success",
              "time": 2263,
            },
            TestCaseResult {
              "error": undefined,
              "name": "supports custom matchers with property matcher",
              "output": undefined,
              "result": "success",
              "time": 1950,
            },
            TestCaseResult {
              "error": undefined,
              "name": "multiple custom matchers and native matchers",
              "output": undefined,
              "result": "success",
              "time": 1385,
            },
            TestCaseResult {
              "error": undefined,
              "name": "indentation is correct in the presences of existing snapshots",
              "output": undefined,
              "result": "success",
              "time": 932,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/toMatchInlineSnapshot.test.ts",
      "output": undefined,
      "totalTime": 23917,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "renders correctly",
              "output": undefined,
              "result": "success",
              "time": 478,
            },
            TestCaseResult {
              "error": undefined,
              "name": "renders the ActivityIndicator component",
              "output": undefined,
              "result": "success",
              "time": 106,
            },
            TestCaseResult {
              "error": undefined,
              "name": "renders the TextInput component",
              "output": undefined,
              "result": "success",
              "time": 2887,
            },
            TestCaseResult {
              "error": undefined,
              "name": "renders the FlatList component",
              "output": undefined,
              "result": "success",
              "time": 791,
            },
          ],
        },
      ],
      "name": "examples/react-native/__tests__/intro.test.js",
      "output": undefined,
      "totalTime": 8559,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "works with a single snapshot",
              "output": undefined,
              "result": "success",
              "time": 2009,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works when a different assertion is failing",
              "output": undefined,
              "result": "success",
              "time": 600,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works when multiple tests have snapshots but only one of them failed multiple times",
              "output": undefined,
              "result": "success",
              "time": 1640,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/toMatchInlineSnapshotWithRetries.test.ts",
      "output": undefined,
      "totalTime": 4670,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "exceeds the timeout",
              "output": undefined,
              "result": "success",
              "time": 782,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not exceed the timeout",
              "output": undefined,
              "result": "success",
              "time": 664,
            },
            TestCaseResult {
              "error": undefined,
              "name": "exceeds the command line testTimeout",
              "output": undefined,
              "result": "success",
              "time": 1529,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not exceed the command line testTimeout",
              "output": undefined,
              "result": "success",
              "time": 856,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/timeouts.test.ts",
      "output": undefined,
      "totalTime": 4029,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "empty external",
              "output": undefined,
              "result": "success",
              "time": 1636,
            },
            TestCaseResult {
              "error": undefined,
              "name": "empty internal ci false",
              "output": undefined,
              "result": "success",
              "time": 1213,
            },
            TestCaseResult {
              "error": undefined,
              "name": "undefined internal ci true",
              "output": undefined,
              "result": "success",
              "time": 598,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/toMatchSnapshotWithStringSerializer.test.ts",
      "output": undefined,
      "totalTime": 3544,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "async jasmine",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "works with beforeAll",
              "output": undefined,
              "result": "success",
              "time": 1317,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with beforeEach",
              "output": undefined,
              "result": "success",
              "time": 673,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with afterAll",
              "output": undefined,
              "result": "success",
              "time": 1151,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with afterEach",
              "output": undefined,
              "result": "success",
              "time": 638,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with fit",
              "output": undefined,
              "result": "success",
              "time": 936,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with xit",
              "output": undefined,
              "result": "success",
              "time": 738,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws when not a promise is returned",
              "output": undefined,
              "result": "success",
              "time": 670,
            },
            TestCaseResult {
              "error": undefined,
              "name": "tests async promise code",
              "output": undefined,
              "result": "success",
              "time": 10831,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with concurrent",
              "output": undefined,
              "result": "success",
              "time": 757,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with concurrent within a describe block when invoked with testNamePattern",
              "output": undefined,
              "result": "success",
              "time": 686,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with concurrent.each",
              "output": undefined,
              "result": "success",
              "time": 717,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with concurrent.only.each",
              "output": undefined,
              "result": "success",
              "time": 1171,
            },
            TestCaseResult {
              "error": undefined,
              "name": "doesn't execute more than 5 tests simultaneously",
              "output": undefined,
              "result": "success",
              "time": 976,
            },
            TestCaseResult {
              "error": undefined,
              "name": "async test fails",
              "output": undefined,
              "result": "success",
              "time": 6223,
            },
            TestCaseResult {
              "error": undefined,
              "name": "generator test",
              "output": undefined,
              "result": "success",
              "time": 688,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/jasmineAsync.test.ts",
      "output": undefined,
      "totalTime": 28291,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "config as JSON",
              "output": undefined,
              "result": "success",
              "time": 381,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with sane config JSON",
              "output": undefined,
              "result": "success",
              "time": 621,
            },
            TestCaseResult {
              "error": undefined,
              "name": "watchman config option is respected over default argv",
              "output": undefined,
              "result": "success",
              "time": 640,
            },
            TestCaseResult {
              "error": undefined,
              "name": "config from argv is respected with sane config JSON",
              "output": undefined,
              "result": "success",
              "time": 530,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with jsdom testEnvironmentOptions config JSON",
              "output": undefined,
              "result": "success",
              "time": 1558,
            },
            TestCaseResult {
              "error": undefined,
              "name": "negated flags override previous flags",
              "output": undefined,
              "result": "success",
              "time": 156,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/config.test.ts",
      "output": undefined,
      "totalTime": 3945,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "fails a test that terminates the worker with a fatal error",
              "output": undefined,
              "result": "success",
              "time": 3117,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/fatalWorkerError.test.ts",
      "output": undefined,
      "totalTime": 3167,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "works with a single snapshot",
              "output": undefined,
              "result": "success",
              "time": 2153,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works when multiple tests have snapshots but only one of them failed multiple times",
              "output": undefined,
              "result": "success",
              "time": 2208,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/toMatchSnapshotWithRetries.test.ts",
      "output": undefined,
      "totalTime": 4435,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "can press \\"p\\" to filter by file name",
              "output": undefined,
              "result": "success",
              "time": 1471,
            },
            TestCaseResult {
              "error": undefined,
              "name": "can press \\"t\\" to filter by test name",
              "output": undefined,
              "result": "success",
              "time": 1775,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/watchModePatterns.test.ts",
      "output": undefined,
      "totalTime": 3503,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "triggers unexpected token error message for non-JS assets",
              "output": undefined,
              "result": "success",
              "time": 980,
            },
            TestCaseResult {
              "error": undefined,
              "name": "triggers unexpected token error message for untranspiled node_modules",
              "output": undefined,
              "result": "success",
              "time": 794,
            },
            TestCaseResult {
              "error": undefined,
              "name": "does not trigger unexpected token error message for regular syntax errors",
              "output": undefined,
              "result": "success",
              "time": 1539,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/unexpectedToken.test.ts",
      "output": undefined,
      "totalTime": 3411,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "understands dependencies using jest.requireMock",
              "output": undefined,
              "result": "success",
              "time": 1909,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/jestRequireMock.test.ts",
      "output": undefined,
      "totalTime": 2119,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "instruments and collects coverage for typescript files",
              "output": undefined,
              "result": "success",
              "time": 2830,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/typescriptCoverage.test.ts",
      "output": undefined,
      "totalTime": 2893,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "works with jest.config.js",
              "output": undefined,
              "result": "success",
              "time": 1016,
            },
            TestCaseResult {
              "error": undefined,
              "name": "traverses directory tree up until it finds jest.config",
              "output": undefined,
              "result": "success",
              "time": 882,
            },
            TestCaseResult {
              "error": undefined,
              "name": "invalid JS in jest.config.js",
              "output": undefined,
              "result": "success",
              "time": 135,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/jest.config.js.test.ts",
      "output": undefined,
      "totalTime": 2134,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "\`require.main\` on using \`--resetModules='true'\` should not be undefined",
              "output": undefined,
              "result": "success",
              "time": 970,
            },
            TestCaseResult {
              "error": undefined,
              "name": "\`require.main\` on using \`jest.resetModules()\` should not be undefined",
              "output": undefined,
              "result": "success",
              "time": 915,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/requireMainResetModules.test.ts",
      "output": undefined,
      "totalTime": 1961,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "modern implementation of fake timers",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should be possible to use modern implementation from config",
              "output": undefined,
              "result": "success",
              "time": 792,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should be possible to use modern implementation from jest-object",
              "output": undefined,
              "result": "success",
              "time": 831,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/modernFakeTimers.test.ts",
      "output": undefined,
      "totalTime": 1680,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "runs tests by exact path",
              "output": undefined,
              "result": "success",
              "time": 1938,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/runTestsByPath.test.ts",
      "output": undefined,
      "totalTime": 1999,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "respects testEnvironment docblock",
              "output": undefined,
              "result": "success",
              "time": 1513,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/testEnvironment.test.ts",
      "output": undefined,
      "totalTime": 1628,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "works with concurrent.each",
              "output": undefined,
              "result": "success",
              "time": 817,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with concurrent.only.each",
              "output": undefined,
              "result": "success",
              "time": 695,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/circusConcurrentEach.test.ts",
      "output": undefined,
      "totalTime": 1591,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "suite with auto-restore",
              "output": undefined,
              "result": "success",
              "time": 822,
            },
            TestCaseResult {
              "error": undefined,
              "name": "suite without auto-restore",
              "output": undefined,
              "result": "success",
              "time": 845,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/autoRestoreMocks.test.ts",
      "output": undefined,
      "totalTime": 1797,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "JSON Reporter",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "writes test result to sum.result.json",
              "output": undefined,
              "result": "success",
              "time": 721,
            },
            TestCaseResult {
              "error": undefined,
              "name": "outputs coverage report",
              "output": undefined,
              "result": "success",
              "time": 698,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/jsonReporter.test.ts",
      "output": undefined,
      "totalTime": 1514,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "suite with auto-reset",
              "output": undefined,
              "result": "success",
              "time": 801,
            },
            TestCaseResult {
              "error": undefined,
              "name": "suite without auto-reset",
              "output": undefined,
              "result": "success",
              "time": 827,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/autoResetMocks.test.ts",
      "output": undefined,
      "totalTime": 1666,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "runs only \\"it.only\\" tests",
              "output": undefined,
              "result": "success",
              "time": 834,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/focusedTests.test.ts",
      "output": undefined,
      "totalTime": 888,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "can press \\"f\\" to run only failed tests",
              "output": undefined,
              "result": "success",
              "time": 1341,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/watchModeOnlyFailed.test.ts",
      "output": undefined,
      "totalTime": 1394,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "does not work on jest-circus",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
        TestGroupResult {
          "name": "Correct beforeEach order",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "ensures the correct order for beforeEach",
              "output": undefined,
              "result": "skipped",
              "time": 0,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/beforeEachQueue.ts",
      "output": undefined,
      "totalTime": 55,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "works with injected globals",
              "output": undefined,
              "result": "success",
              "time": 962,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/extraGlobals.test.ts",
      "output": undefined,
      "totalTime": 1010.9999999999999,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "Snapshot serializers",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "renders snapshot",
              "output": undefined,
              "result": "success",
              "time": 607,
            },
            TestCaseResult {
              "error": undefined,
              "name": "compares snapshots correctly",
              "output": undefined,
              "result": "success",
              "time": 1365,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/snapshotSerializers.test.ts",
      "output": undefined,
      "totalTime": 2065,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "defaults to null for location",
              "output": undefined,
              "result": "success",
              "time": 836,
            },
            TestCaseResult {
              "error": undefined,
              "name": "adds correct location info when provided with flag",
              "output": undefined,
              "result": "success",
              "time": 859,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/locationInResults.test.ts",
      "output": undefined,
      "totalTime": 1764,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "prints console.logs when run with forceExit",
              "output": undefined,
              "result": "success",
              "time": 726,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/consoleLogOutputWhenRunInBand.test.ts",
      "output": undefined,
      "totalTime": 793,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "does not require project modules from inside node_modules",
              "output": undefined,
              "result": "success",
              "time": 723,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/dependencyClash.test.ts",
      "output": undefined,
      "totalTime": 833,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "produces code coverage for uncovered files without transformer",
              "output": undefined,
              "result": "success",
              "time": 1020.9999999999999,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/coverageWithoutTransform.test.ts",
      "output": undefined,
      "totalTime": 1075,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "CLI accepts exact file names if matchers matched",
              "output": undefined,
              "result": "success",
              "time": 741,
            },
            TestCaseResult {
              "error": undefined,
              "name": "CLI skips exact file names if no matchers matched",
              "output": undefined,
              "result": "success",
              "time": 389,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/cliHandlesExactFilenames.test.ts",
      "output": undefined,
      "totalTime": 1230,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "on node >=12.2.0",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "\`require.main\` not undefined after createRequire",
              "output": undefined,
              "result": "success",
              "time": 891,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/requireMainAfterCreateRequire.test.ts",
      "output": undefined,
      "totalTime": 966,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "jest.resetModules should not error when _isMockFunction is defined but not boolean",
              "output": undefined,
              "result": "success",
              "time": 883,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/resetModules.test.ts",
      "output": undefined,
      "totalTime": 926,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "can press \\"u\\" to update snapshots",
              "output": undefined,
              "result": "success",
              "time": 993,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/watchModeUpdateSnapshot.test.ts",
      "output": undefined,
      "totalTime": 1075,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "mock works with generator",
              "output": undefined,
              "result": "success",
              "time": 974,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/generatorMock.test.ts",
      "output": undefined,
      "totalTime": 1027,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "require.resolve.paths",
              "output": undefined,
              "result": "success",
              "time": 1119,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/resolveGetPaths.test.ts",
      "output": undefined,
      "totalTime": 1155,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "prints coverage with missing sourcemaps",
              "output": undefined,
              "result": "success",
              "time": 1002.9999999999999,
            },
            TestCaseResult {
              "error": undefined,
              "name": "prints coverage with empty sourcemaps",
              "output": undefined,
              "result": "success",
              "time": 1338,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/v8Coverage.test.ts",
      "output": undefined,
      "totalTime": 2412,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "require.resolve with paths",
              "output": undefined,
              "result": "success",
              "time": 1117,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/resolveWithPaths.test.ts",
      "output": undefined,
      "totalTime": 1170,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "logs memory usage",
              "output": undefined,
              "result": "success",
              "time": 830,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/logHeapUsage.test.ts",
      "output": undefined,
      "totalTime": 884,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "provides \`require.main\` set to test suite module",
              "output": undefined,
              "result": "success",
              "time": 1008.9999999999999,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/requireMain.test.ts",
      "output": undefined,
      "totalTime": 1137,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "store snapshot even if fs is mocked",
              "output": undefined,
              "result": "success",
              "time": 800,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/snapshotMockFs.test.ts",
      "output": undefined,
      "totalTime": 883,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "Snapshot serializers",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "renders snapshot",
              "output": undefined,
              "result": "success",
              "time": 798,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/snapshot-unknown.test.ts",
      "output": undefined,
      "totalTime": 838,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "AppComponent",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should create the app",
              "output": undefined,
              "result": "success",
              "time": 69,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should have as title 'angular'",
              "output": undefined,
              "result": "success",
              "time": 28,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should render title in a h1 tag",
              "output": undefined,
              "result": "success",
              "time": 115,
            },
          ],
        },
      ],
      "name": "examples/angular/app.component.spec.ts",
      "output": undefined,
      "totalTime": 654,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "prints a usable stack trace even if no Error.captureStackTrace",
              "output": undefined,
              "result": "success",
              "time": 848,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/stackTraceNoCaptureStackTrace.test.ts",
      "output": undefined,
      "totalTime": 899,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "testNamePattern skipped",
              "output": undefined,
              "result": "success",
              "time": 924,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/testNamePatternSkipped.test.ts",
      "output": undefined,
      "totalTime": 991,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "that the failureDetails property is set",
              "output": undefined,
              "result": "success",
              "time": 856,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/failureDetailsProperty.test.ts",
      "output": undefined,
      "totalTime": 907,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "Custom snapshot resolver",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "Resolves snapshot files using custom resolver",
              "output": undefined,
              "result": "success",
              "time": 735,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/snapshotResolver.test.ts",
      "output": undefined,
      "totalTime": 823,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "prints stack trace pointing to process.exit call",
              "output": undefined,
              "result": "success",
              "time": 1012.9999999999999,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/processExit.test.ts",
      "output": undefined,
      "totalTime": 1070,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "supports NODE_PATH",
              "output": undefined,
              "result": "success",
              "time": 833,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/nodePath.test.ts",
      "output": undefined,
      "totalTime": 866,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "Verbose Reporter",
              "output": undefined,
              "result": "success",
              "time": 631,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/verbose.test.ts",
      "output": undefined,
      "totalTime": 683,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "--listTests flag",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "causes tests to be printed in different lines",
              "output": undefined,
              "result": "success",
              "time": 478,
            },
            TestCaseResult {
              "error": undefined,
              "name": "causes tests to be printed out as JSON when using the --json flag",
              "output": undefined,
              "result": "success",
              "time": 404,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/listTests.test.ts",
      "output": undefined,
      "totalTime": 945,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "allows retrieving the current domain",
              "output": undefined,
              "result": "success",
              "time": 867,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/createProcessObject.test.ts",
      "output": undefined,
      "totalTime": 908,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "CheckboxWithLabel changes the text after click",
              "output": undefined,
              "result": "success",
              "time": 33,
            },
          ],
        },
      ],
      "name": "examples/react-testing-library/__tests__/CheckboxWithLabel-test.js",
      "output": undefined,
      "totalTime": 469,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "Service: DataService",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should create service",
              "output": undefined,
              "result": "success",
              "time": 20,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should return the right title",
              "output": undefined,
              "result": "success",
              "time": 8,
            },
          ],
        },
      ],
      "name": "examples/angular/shared/data.service.spec.ts",
      "output": undefined,
      "totalTime": 431,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "prints useful error for environment methods after test is done",
              "output": undefined,
              "result": "success",
              "time": 846,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/environmentAfterTeardown.test.ts",
      "output": undefined,
      "totalTime": 892,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "reads config from cjs file",
              "output": undefined,
              "result": "success",
              "time": 157,
            },
          ],
        },
        TestGroupResult {
          "name": "on node ^12.17.0 || >=13.2.0",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "reads config from mjs file",
              "output": undefined,
              "result": "success",
              "time": 202,
            },
            TestCaseResult {
              "error": undefined,
              "name": "reads config from js file when package.json#type=module",
              "output": undefined,
              "result": "success",
              "time": 115,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/esmConfigFile.test.ts",
      "output": undefined,
      "totalTime": 526,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "CheckboxWithLabel changes the text after click",
              "output": undefined,
              "result": "success",
              "time": 6,
            },
          ],
        },
      ],
      "name": "examples/enzyme/__tests__/CheckboxWithLabel-test.js",
      "output": undefined,
      "totalTime": 434,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "define mock per test",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "uses mocked module",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "uses actual module",
              "output": undefined,
              "result": "success",
              "time": 10,
            },
          ],
        },
      ],
      "name": "examples/module-mock/__tests__/mock_per_test.js",
      "output": undefined,
      "totalTime": 116,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should aggregate docs from collection",
              "output": undefined,
              "result": "success",
              "time": 10,
            },
          ],
        },
      ],
      "name": "examples/mongodb/__test__/db.test.js",
      "output": undefined,
      "totalTime": 236,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "renders correctly",
              "output": undefined,
              "result": "success",
              "time": 6,
            },
            TestCaseResult {
              "error": undefined,
              "name": "renders as an anchor when no page is set",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "properly escapes quotes",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "changes the class when hovered",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
          ],
        },
      ],
      "name": "examples/snapshot/__tests__/link.react.test.js",
      "output": undefined,
      "totalTime": 181,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "CheckboxWithLabel changes the text after click",
              "output": undefined,
              "result": "success",
              "time": 16,
            },
          ],
        },
      ],
      "name": "examples/typescript/__tests__/CheckboxWithLabel-test.tsx",
      "output": undefined,
      "totalTime": 227,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "CheckboxWithLabel changes the text after click",
              "output": undefined,
              "result": "success",
              "time": 17,
            },
          ],
        },
      ],
      "name": "examples/react/__tests__/CheckboxWithLabel-test.js",
      "output": undefined,
      "totalTime": 256,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "--showConfig outputs config info and exits",
              "output": undefined,
              "result": "success",
              "time": 144,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/showConfig.test.ts",
      "output": undefined,
      "totalTime": 195,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "renders correctly",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
          ],
        },
      ],
      "name": "examples/snapshot/__tests__/clock.react.test.js",
      "output": undefined,
      "totalTime": 62,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "schedules a 10-second timer after 1 second",
              "output": undefined,
              "result": "success",
              "time": 26,
            },
          ],
        },
      ],
      "name": "examples/timer/__tests__/infinite_timer_game.test.js",
      "output": undefined,
      "totalTime": 94,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "calls into $.ajax with the correct params",
              "output": undefined,
              "result": "success",
              "time": 73,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls the callback when $.ajax requests are finished",
              "output": undefined,
              "result": "success",
              "time": 10,
            },
          ],
        },
      ],
      "name": "examples/jquery/__tests__/fetch_current_user.test.js",
      "output": undefined,
      "totalTime": 196,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "displays a user after a click",
              "output": undefined,
              "result": "success",
              "time": 71,
            },
          ],
        },
      ],
      "name": "examples/jquery/__tests__/display_user.test.js",
      "output": undefined,
      "totalTime": 196,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "timerGame",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "waits 1 second before ending the game",
              "output": undefined,
              "result": "success",
              "time": 8,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls the callback after 1 second via runAllTimers",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "calls the callback after 1 second via advanceTimersByTime",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
      ],
      "name": "examples/timer/__tests__/timer_game.test.js",
      "output": undefined,
      "totalTime": 74,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "works with resolves",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with promises",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with async/await",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "works with async/await and resolves",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "tests error with rejects",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "tests error with promises",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "tests error with async/await",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "tests error with async/await and rejects",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "examples/async/__tests__/user.test.js",
      "output": undefined,
      "totalTime": 96,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "implementation created by automock",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "implementation created by jest.createMockFromModule",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "examples/automatic-mocks/__tests__/createMockFromModule.test.js",
      "output": undefined,
      "totalTime": 115,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "listFilesInDirectorySync",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "includes all files in the directory in the summary",
              "output": undefined,
              "result": "success",
              "time": 21,
            },
          ],
        },
      ],
      "name": "examples/manual-mocks/__tests__/file_summarizer.test.js",
      "output": undefined,
      "totalTime": 87,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "calc - mocks",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "returns result from subtract",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "returns result from sum",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "adds last result to memory",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "subtracts last result to memory",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "clears the memory",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "throws an error when invalid Op is passed",
              "output": undefined,
              "result": "success",
              "time": 8,
            },
          ],
        },
      ],
      "name": "examples/typescript/__tests__/calc.test.ts",
      "output": undefined,
      "totalTime": 276,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "adds 1 + 2 to equal 3",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "examples/getting-started/sum.test.js",
      "output": undefined,
      "totalTime": 78,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "Service: SubService",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should create service",
              "output": undefined,
              "result": "success",
              "time": 12,
            },
          ],
        },
      ],
      "name": "examples/angular/shared/sub.service.spec.ts",
      "output": undefined,
      "totalTime": 109,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "if orginal user model",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
      ],
      "name": "examples/manual-mocks/__tests__/user.test.js",
      "output": undefined,
      "totalTime": 41,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "adds 1 + 2 to equal 3 in TScript",
              "output": undefined,
              "result": "success",
              "time": 8,
            },
            TestCaseResult {
              "error": undefined,
              "name": "adds 1 + 2 to equal 3 in JavaScript",
              "output": undefined,
              "result": "success",
              "time": 9,
            },
          ],
        },
      ],
      "name": "examples/typescript/__tests__/sum-test.ts",
      "output": undefined,
      "totalTime": 69,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "if utils are mocked",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
            TestCaseResult {
              "error": undefined,
              "name": "mocked implementation",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
      ],
      "name": "examples/automatic-mocks/__tests__/automock.test.js",
      "output": undefined,
      "totalTime": 74,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "if lodash head is mocked",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
      ],
      "name": "examples/manual-mocks/__tests__/lodashMocking.test.js",
      "output": undefined,
      "totalTime": 109,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "if user model is mocked",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
      ],
      "name": "examples/manual-mocks/__tests__/userMocked.test.js",
      "output": undefined,
      "totalTime": 105,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "adds 1 + 2 to equal 3 in Typescript",
              "output": undefined,
              "result": "success",
              "time": 2,
            },
            TestCaseResult {
              "error": undefined,
              "name": "adds 1 + 2 to equal 3 in JavaScript",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
      ],
      "name": "examples/typescript/__tests__/sum.test.js",
      "output": undefined,
      "totalTime": 100,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "b",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "e2e/custom-test-sequencer/b.test.js",
      "output": undefined,
      "totalTime": 21,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "subtracts 5 - 1 to equal 4 in TypeScript",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
      ],
      "name": "examples/typescript/__tests__/sub-test.ts",
      "output": undefined,
      "totalTime": 43,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "does a full mock",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "examples/module-mock/__tests__/full_mock.js",
      "output": undefined,
      "totalTime": 60,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "globals are properly defined",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/global.test.ts",
      "output": undefined,
      "totalTime": 31,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "original implementation",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "examples/automatic-mocks/__tests__/disableAutomocking.test.js",
      "output": undefined,
      "totalTime": 24,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "timers",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should work before calling resetAllMocks",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
            TestCaseResult {
              "error": undefined,
              "name": "should not break after calling resetAllMocks",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
      ],
      "name": "e2e/timer-reset-mocks/after-reset-all-mocks/timerAndMock.test.js",
      "output": undefined,
      "totalTime": 30,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "v8 module",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/requireV8Module.test.ts",
      "output": undefined,
      "totalTime": 30,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "timers",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "should work before calling resetAllMocks",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "e2e/timer-reset-mocks/with-reset-mocks/timerWithMock.test.js",
      "output": undefined,
      "totalTime": 34,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "does a partial mock",
              "output": undefined,
              "result": "success",
              "time": 1,
            },
          ],
        },
      ],
      "name": "examples/module-mock/__tests__/partial_mock.js",
      "output": undefined,
      "totalTime": 215,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "d",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "e2e/custom-test-sequencer/d.test.js",
      "output": undefined,
      "totalTime": 21,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "a",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "e2e/custom-test-sequencer/a.test.js",
      "output": undefined,
      "totalTime": 29,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "e",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "e2e/custom-test-sequencer/e.test.js",
      "output": undefined,
      "totalTime": 27,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "c",
              "output": undefined,
              "result": "success",
              "time": 0,
            },
          ],
        },
      ],
      "name": "e2e/custom-test-sequencer/c.test.js",
      "output": undefined,
      "totalTime": 42,
    },
    TestSuiteResult {
      "groups": Array [
        TestGroupResult {
          "name": "",
          "output": undefined,
          "tests": Array [
            TestCaseResult {
              "error": undefined,
              "name": "errors when a test both returns a promise and takes a callback",
              "output": undefined,
              "result": "success",
              "time": 704,
            },
          ],
        },
      ],
      "name": "e2e/__tests__/asyncAndCallback.test.ts",
      "output": undefined,
      "totalTime": 746,
    },
  ],
  "totalTime": 165872,
}
`;
